{"version":3,"sources":["Code_VowlPipe.png","Code_SPARQLPipeline.png","Code_RDFStyledPipeline.png","NodeLinkPipeline.png","Implementation/Base/BaseComponent.js","Implementation/Base/BaseComponentConstants.js","Implementation/Base/BaseModel.js","Implementation/Models/ResourceRelationModel.js","Implementation/Base/globalHelper.js","Implementation/Models/Resource.js","Implementation/Models/Relation.js","Implementation/Parsers/SparqlParser.js","Implementation/Parsers/VOWLParser.js","Implementation/Models/VertexEdgeModel.js","Implementation/Models/Vertex.js","Implementation/Models/Edge.js","Implementation/Mappers/VOWL-VertexEdgeMapper.js","Implementation/Mappers/SPARQL-VertexEdgeMapper.js","Implementation/Models/Node.js","Implementation/Models/Link.js","Implementation/Base/LanguageTools.js","Implementation/Models/NodeLinkModel.js","Implementation/Mappers/VOWL-NodeLinkMapper.js","Implementation/Mappers/RDF-NodeLinkMapper.js","Implementation/Mappers/SPARQL-NodeLinkMapper.js","Implementation/Renderes/gizmoRenderer/ShapeTools.js","Implementation/Renderes/gizmoRenderer/LineTools.js","Implementation/Renderes/gizmoRenderer/DrawTools.js","Implementation/Renderes/gizmoRenderer/renderingElements/BasePrimitive.js","Implementation/Renderes/gizmoRenderer/renderingElements/NodePrimitive.js","Implementation/Renderes/gizmoRenderer/renderingElements/LinkPrimitive.js","Implementation/Renderes/gizmoRenderer/renderingConfigs/defaultRenderingHandler.js","Implementation/Renderes/gizmoRenderer/Layout/ForceLayout.js","Implementation/Renderes/gizmoRenderer/Layout/BaseLayoutComponent.js","Implementation/Renderes/gizmoRenderer/graph.js","Implementation/Renderes/gizmoRenderer/Interactions/graphInteractions.js","Implementation/Renderes/gizmoRenderer/Interactions/nodeInteractions.js","Implementation/Renderes/gizmoRenderer/Interactions/linkInteractions.js","Implementation/Renderes/gizmoRenderer/Interactions/interactions.js","Implementation/Renderes/gizmoRenderer/vowlGraph.js","Implementation/Renderes/gizmoRenderer/renderingConfigs/SPARQLRenderingHandler.js","Implementation/Renderes/gizmoRenderer/renderingConfigs/VOWLRenderingHandler.js","Implementation/Renderes/gizmoRenderer/renderingConfigs/RDFStyledRenderingHandler.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BaseComponent","getResult","resultObject","setInputData","inputDataAsJsonObject","execute","a","console","log","__run__","_postRun_","this","type","BaseModel","modelAsJsonObject","getResourceIdentifier","__resourceIdentifier","setResourceIdentifier","id","__isInMap__","map","identifier","__resourceIdentifier__","resourceObject","__isEqual__","b","ResourceRelationModel","error","addResource","resource","resourceMap","__mergeItem","__integrateResourceItem","resources","r1","r2","integrateResource","target","push","addRelation","relation","relationMap","relations","validIRI","str","test","Resource","addAnnotation","name","value","lang","inputName","suffix","split","pref","tokens","length","i","prName","prefixMapperL2S","_annotations","languageSelector","tm","_resourceURI","undefined","_semanticType","_axioms","val","arguments","t","indexOf","subject","axiom","object","hasOwnProperty","src","forEach","addSemanticType","annoType","langType","ax","Relation","domains","ranges","r","d","dom","ran","SparqlParser","m","processedData","_preProcess","_processData","output","input","binds","results","bindings","labels","head","vars","res","aStatement","label","allStatements","concat","definitionMap","model","dataObject","statement","predicate","subjectResource","propertyRelation","objectResource","resourceIdentifier","ignoreSubjectResource","ignoreObjectResource","ignorePropertyRelation","addAxiom","addDomain","addRange","resultingModel","VOWLParser","classArray","class","propArray","property","Map","cAttr","classAttribute","pAttr","propertyAttribute","item","get","superClasses","iri","equivalent","domain","range","subproperty","inverse","resultingModelObject","__processResources","__processRelations","modelResource","comment","eq","sc","modelRelation","__processLabels","__processComments","__processResourceAxioms","__processRelationAxioms","__processRelationAttributes","VertexEdgeModel","addVertex","vertex","vertexeMap","__integrateVertexEdgeItem","vertices","addEdge","edge","edgeMap","edges","Vertex","resourceReference","__outgoingEdges","__incomingEdges","Edge","VertexEdgeMapper","requestedInputType","hasCompatibleInput","__mapInputModel","modelData","veModel","__mapResourcesToVertex","__mapRelationsToEdge","_createVertexFromResource","aVertex","vMapper","vertexMapper","dataPath","dataItem","_createEdgeFromRelation","anEdge","eMapper","edgeMapper","__vertexType","__vertexEdgeIdentifier","__displayName","__edgeType","__sources","__targets","dataArray","mappedVertex","Object","keys","axiomsArray","vertexInMap","targetVertex","getVertexFromName","axiomEdge","__createAxiomEdge","srcVertex","axiomName","__edgeAxiom","addOutgoingEdge","addIncomingEdge","mappedEdge","tar","tempVertex","clonedEdge","newTarget","Node","__outgoingLinks","__incomingLinks","__nodeType","__aggregatedLink","link","Link","LanguageTools","prefixMap","IRI","textInLanguage","textObject","preferredLanguage","textForLanguage","searchLanguage","language","NodeLinkModel","addNode","node","nodeMap","__integrateNodeLinkItem","nodes","addLink","linkMap","links","__SHADOWNODE","__hasEquivalentClasses","inLink","__SHADOWLINK","outLink","nodesToRemove","linksToRemove","n","idToRemove","splice","l","NodeLinkMapper","nlModel","__mapVerticesToNodes","_mapEdgesToLinks","_mergeAndSplitNodes","_createNodeFromVertex","aNode","nMapper","nodeMapper","_createLinkFromEdge","aLink","mapper","linkMapper","__linkType","__nodeLinkIdentifier","__linkAxiom","nodeMerge","nodeSplit","constraints","auxiliaryNodes","_mergeNodes","removeShadowsFromModel","_splitNodes","splitDefs","linksToSplit","_splitAppliesOnTarget","cloneIterator","nodeToClone","__target","newNode","mergeDefs","linksToMerge","_mergeApplies","srcNode","getNodeFromName","tarNode","mergeNodes","compares","validCompares","applies","cons","linkData","compareValue","isNodeOfType","langRep","IRI2Label","__source","addOutgoingLink","_introduceAuxiliaryNode","edgeType","auxiliaryLinks","source","auxiliaryNode","def","auxDef","_auxApplies","auxNode","auxLink1","link1Def","auxLinks","auxLink2","link2Def","lT","cT","j","toLowerCase","k","_autoAssignLinkTypesBasedOnTarget","__aggregateLinks","aggregate","addAggregatedLink","ShapeTools","getShapeRadius","shape","parseFloat","attr","getShapeWidth","getShapeHeight","LineTools","computeIntersectionPointsWithProperty","offset","distOffset","parentShape","renderingShape","data","updateRenderingPosition","iP_Src","x","y","iP_Prop","iP_Tar","__internalType","divisor","numberOfLoops","fairShareLoopAngleWithMargin","loopAngle","Math","min","dx","dy","labelRadian","atan2","labelAngle","__calculateAngle","startAngle","endAngle","radius","shapeTools","arcFrom","__calculateRadian","arcTo","x1","cos","y1","sin","x2","y2","offsetDirection","__computeNormalizedOffsetDirection","__shapeBasedIntersection","computeIntersectionPoints","cx","cy","angle","PI","radian","len","sqrt","IntPoint","cfg","renderingConfig","style","renderingType","distanceToBorder","scale","width","height","distanceToBorderX","distanceToBorderY","abs","DrawTools","graph","__directLineFunction","d3","line","__curveLineFunction","interpolate","__loopLineFunction","tension","drawDisplayName","group","text","options","_drawText","fontStyle","applyAdditionalOptions","config","addTitleForDisplayName","append","cropLongText","getBoundingClientRect","croppedText","cropText","drawNestedAttributes","refereceResource","nestedLinks","w","fontSizeProperty","window","getComputedStyle","getPropertyValue","fontSize","linePosY","linePosX","nestedGroup","offsetVal","subGroupProperty","subGroupNode","linkCFG","renderingConfigHandler","getLinkConfigFromType","nodeCFG","getNodeConfigFromType","renderShadowNode","propertyNode","fontPositionV","_text_vAlignCenter","fontPositionH","_text_hAlignCenter","_addStrokeElements","element","selector","color","applyShapeStyle","targetPrimitive","bgColor","renderBaseShape","parseInt","roundedCorner","tok","lineTools","getRenderingHandler","groupContainer","shapeConfig","displayName","renderingText","propertyContainer","arrowContainer","renderingLine","__createLinkLine","drawArrowHead","__drawArrowHead","arrowHead","drawArrowTail","__drawArrowTail","arrowTail","drawPropertyNode","renderingElements","__createRenderingShapeForPropertyNode","itemId","sourceNode","targetNode","dataObj","__id","ref","groupRoot","__data__","setPosition","elements","renderNode","linkLine","parent","container","__drawArrowPrimitive","makerType","scaleFactor","vB_String","m1X","m1Y","m2X","m2Y","p1","p2","pathString","strokeColor","strokeWidth","fillColor","strokeStyle","linkType","curve","controlPoints","parentGroup","parentNode","centerPoint","computeCenterPoint","renderingTextElement","fontFamily","fontColor","document","getElementById","offsetWidth","remove","textWidth","ratio","newTruncatedTextLength","truncatedText","measureTextWidth","floor","substring","BasePrimitive","cfgObj","__renderingConfig","JSON","parse","stringify","__drawTools","__visible","visible","drawTools","nameStr","NodePrimitive","addIncomingLink","incomingLinks","outgoingLinks","render","__numberOfLoops","LinkPrimitive","updateLinePosition","link_renderingType","updatePropertyPosition","renderLink","DefaultRenderingHandler","renderingConfigObject","defaultNodeCFG","defaultLinkCFG","strokeElement","overwritesShapeSize","overwriteOffset","lineStyle","lineWidth","lineColor","fontSizeOverWritesShapeSize","overWriteOffset","ForceLayout","pauseForceLayoutAnimation","doPause","stopForce","resumeForce","recalculatePositions","renderedNodes","renderedLinks","force","forceLinks","forceNodes","linkDistance","distanceValue","layoutSize","resume","stop","alpha","updateLayoutSize","createForceElements","start","bb","svgRoot","getForceLink","getForceNode","layoutHandlerReference","charge","computeLinkDistance","linkStrength","size","gravity","on","GraphRenderer","setRenderingContainer","divId","divRoot","setDrawTools","tools","setModel","setRenderingConfig","setInteractionHandler","handler","interactionHandler","initializeRenderingContainer","_clearRenderingContainers","_createRenderingContainers","graphRoot","selectAll","divNode","_checkForPaddingInDivNode","divBoundingBox","_createLayers","root","layerNamePrefix","layerObject","layer","noError","createNodePrimitive","nodePrimitive","createLinkPrimitive","linkPrimitive","setSourceNode","setTargetNode","setInternalType","updateMultiLinkTypes","isMultiLink","out","drawRenderingPrimitives","_drawRenderingPrimitivesForNodes","_drawRenderingPrimitivesForLinks","applyInteractions","layoutHandler","initializeLayoutEngine","linkContainer","createRenderingPrimitives","each","nodeContainer","GRAPH_TYPE","warn","typeClass","enter","classed","GraphInteractions","applyGraphInteractions","graphObject","that","zoom","duration","scaleExtent","zoomed","sourceEvent","buttons","call","event","graphContainer","zoomEventByMWheel","deltaY","transformAnimation","zoomFactor","graphTranslation","translate","transition","tween","tr","ease","NodeInteractions","applyNodeInteractions","dragBehaviour","drag","origin","dragStart","dragEnd","hoverBehaviour","hasNodeHover","nodeHoverIn","nodeHoverOut","clickBehaviour","hasNodeClick","nodeClick","doubleClickBehavoir","hasNodeDobleClick","nodeDoubleClick","stopPropagation","fixed","px","py","preventDefault","toggleForce","LinkInteractions","applyLinkInteractions","hasLinkHover","linkHoverIn","linkHoverOut","propertyHoverBehaviour","hasPropertyHover","propertyHoverIn","propertyHoverOut","shapeRoot","mouseEntered","keepRendering","unblockRendering","Interactions","graphInteractions","nodeInteractions","linkInteractions","VOWLRenderer","Literal","doubleStrokes","auxForDataTypeProperties","auxForObjectProperties","auxLink","App","props","SPARQL_Pipeline","parser","mapper_1","Sparql_VertexEdgeMapper","mapper_2","SPARQL_NodeLinkMapper","renderingModule","nestedVisualizationConfig","SPARQLRenderingHandler","inputSPARQLDataAsJSON","createRenderingElements","VOWL_Pipeline","VOWL_Parser","VOWL_VertexEdgeMapper","VOWL_NodeLinkMapper","nativeVOWLRenderingConfig","VOWLRenderingHandler","deepCopy","inputVOWLDataAsJSON","RDFStyled_Pipeline","RDF_NodeLinkMapper","AuxiliariesNodeRenderingConfig","RDFStyledRenderingHandler","state","canRenderVisualization","then","className","Schematic_Overview","alt","backgroundColor","margin","paddingTop","VOWL_PipelineCode","RDF_PipelineCode","SPARQL_PipelineCode","Component","Boolean","location","hostname","match","ReactDOM","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"0tLAAAA,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,iD,gBCA3CD,EAAOC,QAAU,IAA0B,oD,gBCA3CD,EAAOC,QAAU,IAA0B,8C,u1GCEtBC,EACnB,aAAe,IAAD,gCAOdC,UAAY,WACV,OAAO,EAAKC,cARA,KAWdC,aAAe,SAAAC,GACb,EAAKA,sBAAwBA,GAZjB,KAedC,QAfc,sBAeJ,sBAAAC,EAAA,yDACH,EAAKF,sBADF,uBAENG,QAAQC,IAAI,uCAFN,0CAMF,EAAKC,UANH,OAOR,EAAKC,YAPG,2CAfI,KA0BdD,QAAU,aA1BI,KA6BdC,UAAY,aA5BVC,KAAKC,KCJmC,+BDKxCD,KAAKP,sBAAwB,KAC7BO,KAAKT,aAAe,IEFHW,EACnB,aAAe,IAAD,gCAOdZ,UAAY,WACV,OAAO,EAAKa,mBARA,KAWdC,sBAAwB,WACtB,OAAO,EAAKC,sBAZA,KAedC,sBAAwB,SAAAC,GAEtB,EAAKF,qBAAuBE,GAjBhB,KAqBdC,YAAc,SAACC,EAAKC,GAClB,OAAO,GAtBK,KAyBdC,uBAAyB,SAAAC,KAzBX,KA6BdC,YAAc,SAAClB,EAAGmB,GAEhB,OAAO,GA9BPd,KAAKC,KDA0B,sBCC/BD,KAAKG,kBAAoB,KACzBH,KAAKK,qBAAuB,+BCLXU,E,kDACnB,aAAe,IAAD,8BACZ,gBAeFP,YAAc,SAACC,EAAKC,GAClB,OAAKA,IAKMD,EAAIC,IAJbd,QAAQoB,MACN,wIAMG,IAzBK,EA4BdH,YAAc,SAAClB,EAAGmB,GAEhB,OAAO,GA9BK,EAiCdH,uBAAyB,SAAAC,GACvB,OAAOA,EAAe,EAAKP,uBAlCf,EAuCdY,YAAc,SAAAC,GAET,EAAKV,YAAY,EAAKW,YAAa,EAAKR,uBAAuBO,IAShE,EAAKE,YACH,EAAKD,YAAY,EAAKR,uBAAuBO,IAC7CA,GATF,EAAKG,wBACH,EAAKlB,kBAAkBmB,UACvB,EAAKH,YACLD,IA9CQ,EAyDdE,YAAc,SAACG,EAAIC,GAEjBD,EAAGE,kBAAkBD,IA3DT,EA8DdH,wBAA0B,SAACK,EAAQjB,EAAKS,GACtCQ,EAAOC,KAAKT,GACZT,EAAI,EAAKE,uBAAuBO,IAAaA,GAhEjC,EAmEdU,YAAc,SAAAC,GAET,EAAKrB,YAAY,EAAKsB,YAAa,EAAKnB,uBAAuBkB,IAShE,EAAKT,YACH,EAAKU,YAAY,EAAKnB,uBAAuBkB,IAC7CA,GATF,EAAKR,wBACH,EAAKlB,kBAAkB4B,UACvB,EAAKD,YACLD,IAvEJ,EAAK5B,KFAmC,+BEGxC,EAAKE,kBAAoB,CAAEmB,UAAW,GAAIS,UAAW,IAGrD,EAAKZ,YAAc,GACnB,EAAKW,YAAc,GAEnB,EAAKzB,qBAAuB,uBAZhB,E,UADmCH,GCHtC8B,EAAW,SAAAC,GAEtB,MADiB,6TACDC,KAAKD,ICAFE,E,WACnB,aAAe,IAAD,gCAyBdC,cAAgB,SAACC,EAAMC,EAAOC,GAG5B,IAAIC,EAAYH,EAChB,GAAIL,EAASK,GAAO,CAClB,IAAII,EAASJ,EAAKK,MAAM,KAAK,GACzBC,EAAO,GACX,GAAKF,EAQHE,EAAON,EAAKK,MAAM,KAAK,GACvBC,GAAQ,QATG,CACX,IAAMC,EAASP,EAAKK,MAAM,KAC1BD,EAASG,EAAOA,EAAOC,OAAS,GAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAOC,OAAS,EAAGC,IACrCH,GAAQC,EAAOE,GAEjBH,GAAQ,IAMV,IAAMI,EAAS,EAAKC,gBAAgBL,GAChCI,IACFP,EAAYO,EAAS,IAAMN,GAG1B,EAAKQ,aAAaT,KACrB,EAAKS,aAAaT,GAAa,IAGjC,IAAIU,EAAmB,UACnBX,GAAiB,cAATA,IACVW,EAAmBX,GAErB,IAAMY,EAAK,EAAKF,aAAaT,GACxBW,EAAGD,KACNC,EAAGD,GAAoB,IAEzBC,EAAGD,GAAkBvB,KAAKW,IA5D1BtC,KAAKoD,kBAAeC,EACpBrD,KAAKsD,cAAgB,GACrBtD,KAAKiD,aAAe,GACpBjD,KAAKuD,QAAU,GACfvD,KAAKK,0BAAuBgD,EAE5BrD,KAAKgD,gBAAkB,CACrB,wCAAyC,Q,+DAI1BQ,GACjB,IAAKC,UAAUZ,OACb,OAAO7C,KAAKK,qBAEdL,KAAKK,qBAAuBmD,I,sCAGdE,IACyB,IAAnC1D,KAAKsD,cAAcK,QAAQD,IAC7B1D,KAAKsD,cAAc3B,KAAK+B,K,+BA2CnBE,EAASC,EAAOC,GAElB9D,KAAKuD,QAAQQ,eAAeF,KAC/B7D,KAAKuD,QAAQM,GAAS,IAExB7D,KAAKuD,QAAQM,GAAOlC,KAAKmC,K,wCAGTE,GAAM,IAAD,OASrB,IAAK,IAAM3B,KANX2B,EAAIV,cAAcW,SAAQ,SAAAP,GACxB,EAAKQ,gBAAgBR,MAKJM,EAAIf,aACrB,GAAIe,EAAIf,aAAac,eAAe1B,GAAO,CACzC,IAAM8B,EAAWH,EAAIf,aAAaZ,GAE7BrC,KAAKiD,aAAaZ,KACrBrC,KAAKiD,aAAaZ,GAAQ,IAJa,eAO9B+B,GACT,GAAID,EAASJ,eAAeK,GAAW,CAErC,IAAM9B,EAAQ6B,EAASC,GACjBjB,EAAK,EAAKF,aAAaZ,GACxBc,EAAGiB,KACNjB,EAAGiB,GAAY,IAGjB9B,EAAM2B,SAAQ,SAAAhC,IACuB,IAA/BkB,EAAGiB,GAAUT,QAAQ1B,IACvBkB,EAAGiB,GAAUzC,KAAKM,QAX1B,IAAK,IAAMmC,KAAYD,EAAW,EAAvBC,GAjBM,eAqCV/B,GACL2B,EAAIT,QAAQQ,eAAe1B,KACxB,EAAKkB,QAAQlB,KAChB,EAAKkB,QAAQlB,GAAQ,IAIV2B,EAAIT,QAAQlB,GACpB4B,SAAQ,SAAAI,IAE6B,IAApC,EAAKd,QAAQlB,GAAMsB,QAAQU,IAC7B,EAAKd,QAAQlB,GAAMV,KAAK0C,QAXhC,IAAK,IAAMhC,KAAQ2B,EAAIT,QAAU,EAAtBlB,O,oBC9GMiC,E,kDACnB,aAAe,IAAD,8BACZ,gBAEKC,QAAU,GACf,EAAKC,OAAS,GAJF,E,qDAOLC,IACyB,IAA5BzE,KAAKwE,OAAOb,QAAQc,IACtBzE,KAAKwE,OAAO7C,KAAK8C,K,gCAIXC,GACR1E,KAAKuE,QAAQ5C,KAAK+C,K,wCAGFV,GAAM,IAAD,OAErB,yEAAwBA,GAExBA,EAAIO,QAAQN,SAAQ,SAAAU,IACiB,IAA/B,EAAKJ,QAAQZ,QAAQgB,IACvB,EAAKJ,QAAQ5C,KAAKgD,MAGtBX,EAAIQ,OAAOP,SAAQ,SAAAW,IACiB,IAA9B,EAAKJ,OAAOb,QAAQiB,IACtB,EAAKJ,OAAO7C,KAAKiD,U,GA7BazC,GCKjB0C,E,kDACnB,aAAe,IAAD,8BACZ,gBAuBF/E,QAxBc,sBAwBJ,8BAAAH,EAAA,sDACFmF,EAAI,IAAI/D,EACRgE,EAAgB,EAAKC,cAC3B,EAAKC,aAAaH,EAAGC,GAHb,2CAxBI,EA2HdC,YAAc,WACZ,IAAME,EAAS,GACTC,EAAQ,EAAK1F,sBAIb2F,EAAQD,EAAME,QAAQC,SACtBC,EAASJ,EAAMK,KAAKC,KAc1B,OAZAL,EAAMnB,SAAQ,SAAAyB,GAEZ,IAAMC,EAAa,GAEnBJ,EAAOtB,SAAQ,SAAA2B,GACbD,EAAWC,GAASF,EAAIE,MAG1BV,EAAOvD,KAAKgE,MAGd,EAAKE,cAAgB,GAAGC,OAAO,EAAKD,cAAeX,GAC5CA,GA9IP,EAAKjF,KNPyB,qBMS9B,EAAK8F,cAAgB,CAEnB,kDAAmD,YAEnD,kDAAmD,QACnD,qDAAsD,QACtD,gDAAiD,QAGjD,+CAAgD,aAChD,6CAA8C,aAC9C,mDAAoD,aAGpD,qBAAsB,sBACtB,uBAAwB,uBAnBd,E,yDA8BDC,EAAOC,GAAa,IAAD,OAC9BA,EAAWhC,SAAQ,SAAAiC,GACjB,IAAMtC,EAAUsC,EAAUtC,QACpBuC,EAAYD,EAAUC,UACtBrC,EAASoC,EAAUpC,OAInBsC,EAAkB,IAAIjE,EACtBkE,EAAmB,IAAI/B,EACvBgC,EAAiB,IAAInE,EAG3BiE,EAAgBG,mBAAmB3C,EAAQtB,OACvC,EAAKN,SAAS4B,EAAQtB,SACxB8D,EAAgBhD,aAAeQ,EAAQtB,OAGzC+D,EAAiBE,mBAAmBJ,EAAU7D,OAC1C,EAAKN,SAASmE,EAAU7D,SAC1B+D,EAAiBjD,aAAe+C,EAAU7D,OAG5CgE,EAAeC,mBAAmBzC,EAAOxB,OACrC,EAAKN,SAAS8B,EAAOxB,SACvBgE,EAAelD,aAAeU,EAAOxB,OAGvC,IAAIkE,GAAwB,EACxBC,GAAuB,EACvBC,GAAyB,EAE7B,GAA4C,cAAxC,EAAKX,cAAcI,EAAU7D,OAS/B,MARyC,wBAArC,EAAKyD,cAAcjC,EAAOxB,OAC5B8D,EAAgBlC,gBAAgBJ,EAAOxB,OAGvCoE,GAAyB,OAG3BV,EAAM/E,YAAYmF,GAKpB,OAAQ,EAAKL,cAAcI,EAAU7D,QACnC,IAAK,QACH8D,EAAgBO,SACd/C,EAAQtB,MACR6D,EAAU7D,MACVwB,EAAOxB,OAETmE,GAAuB,EACvB,MACF,IAAK,aACC3C,EAAO,YACTsC,EAAgBhE,cACd+D,EAAU7D,MACVwB,EAAOxB,MACPwB,EAAO,aAGTsC,EAAgBhE,cAAc+D,EAAU7D,MAAOwB,EAAOxB,OAGxDmE,GAAuB,EACvBC,GAAyB,EACzB,MACF,QAIEL,EAAiBO,UAAUhD,EAAQtB,OACnC+D,EAAiBQ,SAAS/C,EAAOxB,OACjCmE,GAAuB,EACvBD,GAAwB,EAGvBA,GACHR,EAAM/E,YAAYmF,GAEfM,GACHV,EAAMpE,YAAYyE,GAEfI,GACHT,EAAM/E,YAAYqF,MAGtBtG,KAAKT,aAAauH,eAAiBd,I,+BA6B5B/D,GAEP,MADiB,6TACDC,KAAKD,O,GAtJiB5C,GCArB0H,E,kDACnB,aAAe,IAAD,8BACZ,gBAMFjH,QAPc,sBAOJ,8BAAAH,EAAA,sDACFmF,EAAI,IAAI/D,EACRgE,EAAgB,EAAKC,cAC3B,EAAKC,aAAaH,EAAGC,GAHb,2CAPI,EA2IdC,YAAc,WAEZ,IAAMgC,EAAa,EAAKvH,sBAAsBwH,MACxCC,EAAY,EAAKzH,sBAAsB0H,SAGzChG,EAAc,IAAIiG,IAAIJ,EAAWvG,KAAI,SAAAiE,GAAC,MAAI,CAACA,EAAEnE,GAAImE,OACjD5C,EAAc,IAAIsF,IAAIF,EAAUzG,KAAI,SAAAiE,GAAC,MAAI,CAACA,EAAEnE,GAAImE,OAE9C2C,EAAQ,EAAK5H,sBAAsB6H,eACnCC,EAAQ,EAAK9H,sBAAsB+H,kBAmDzC,OAjDAH,EAAMpD,SAAQ,SAAAwD,GACZA,EAAKxH,KAAOkB,EAAYuG,IAAID,EAAKlH,IAAIN,QAIvCkB,EAAc,IAAIiG,IAAIC,EAAM5G,KAAI,SAAAiE,GAAC,MAAI,CAACA,EAAEnE,GAAImE,OAE5C2C,EAAMpD,SAAQ,SAAAwD,GACZ,GAAIA,EAAKE,aACP,IAAK,IAAI7E,EAAI,EAAGA,EAAI2E,EAAKE,aAAa9E,OAAQC,IAC5C2E,EAAKE,aAAa7E,GAAK3B,EAAYuG,IAAID,EAAKE,aAAa7E,IAAI8E,IAGjE,GAAIH,EAAKI,WACP,IAAK,IAAI/E,EAAI,EAAGA,EAAI2E,EAAKI,WAAWhF,OAAQC,IAC1C2E,EAAKI,WAAW/E,GAAK3B,EAAYuG,IAAID,EAAKI,WAAW/E,IAAI8E,OAK/DL,EAAMtD,SAAQ,SAAAwD,GACZA,EAAKxH,KAAO6B,EAAY4F,IAAID,EAAKlH,IAAIN,KACjCwH,EAAKK,SAEPL,EAAKK,OAAS3G,EAAYuG,IAAID,EAAKK,QAAQF,KAEzCH,EAAKM,QAEPN,EAAKM,MAAQ5G,EAAYuG,IAAID,EAAKM,OAAOH,QAK7C9F,EAAc,IAAIsF,IAAIG,EAAM9G,KAAI,SAAAiE,GAAC,MAAI,CAACA,EAAEnE,GAAImE,OAC5C6C,EAAMtD,SAAQ,SAAAwD,GACZ,GAAIA,EAAKO,YACP,IAAK,IAAIlF,EAAI,EAAGA,EAAI2E,EAAKO,YAAYnF,OAAQC,IAC3C2E,EAAKO,YAAYlF,GAAKhB,EAAY4F,IAAID,EAAKO,YAAYlF,IAAI8E,IAG/D,GAAIH,EAAKI,WACP,IAAK,IAAI/E,EAAI,EAAGA,EAAI2E,EAAKI,WAAWhF,OAAQC,IAC1C2E,EAAKI,WAAW/E,GAAKhB,EAAY4F,IAAID,EAAKI,WAAW/E,IAAI8E,IAGzDH,EAAKQ,UACPR,EAAKQ,QAAUnG,EAAY4F,IAAID,EAAKQ,SAASL,QAG1C,CAAEtG,UAAW+F,EAAOtF,UAAWwF,IAtMtC,EAAKtH,KPRuB,mBOS5B,EAAKiI,qBAAuB,KAHhB,E,yDAaDlC,EAAOC,GAClBjG,KAAKmI,mBAAmBnC,EAAOC,GAC/BjG,KAAKoI,mBAAmBpC,EAAOC,GAC/BjG,KAAKT,aAAauH,eAAiBd,I,sCAIrB9E,EAAUmH,GAExB,GAAInH,EAAS0E,MAEX,GAA8B,kBAAnB1E,EAAS0E,MAClByC,EAAcjG,cAAc,aAAclB,EAAS0E,YAEnD,IAAK,IAAMvD,KAAQnB,EAAS0E,MACtB1E,EAAS0E,MAAM7B,eAAe1B,IACnB,cAATA,GACFgG,EAAcjG,cACZ,aACAlB,EAAS0E,MAAMvD,GACfA,K,wCASInB,EAAUmH,GAC1B,GAAInH,EAASoH,QAEX,GAAgC,kBAArBpH,EAASoH,QAClBD,EAAcjG,cAAc,eAAgBlB,EAASoH,cAErD,IAAK,IAAMjG,KAAQnB,EAASoH,QACtBpH,EAASoH,QAAQvE,eAAe1B,IACrB,cAATA,GACFgG,EAAcjG,cACZ,eACAlB,EAASoH,QAAQjG,GACjBA,K,8CASUnB,EAAUmH,GAC5BnH,EAAS2G,YACX3G,EAAS2G,WAAW5D,SAAQ,SAAAsE,GAC1BF,EAAc1B,SAAS0B,EAAe,sBAAuBE,MAG7DrH,EAASyG,cACXzG,EAASyG,aAAa1D,SAAQ,SAAAuE,GAC5BH,EAAc1B,SAAS0B,EAAe,kBAAmBG,Q,8CAKvC3G,EAAUwG,M,kDAINxG,EAAU4G,GAEhC5G,EAASiG,QACXW,EAAc7B,UAAU/E,EAASiG,QAE/BjG,EAASkG,OACXU,EAAc5B,SAAShF,EAASkG,S,yCAIjB/B,EAAOC,GAAa,IAAD,OACpCA,EAAW3E,UAAU2C,SAAQ,SAAA/C,GAEtBA,EAAS0G,IAGZ1G,EAASb,qBAAuBa,EAAS0G,IAFzC1G,EAASb,qBAAuBa,EAASjB,KAK3C,IAAMoI,EAAgB,IAAIlG,EAE1BkG,EAAc9B,mBAAmBrF,EAASb,sBAC1CgI,EAAcjF,aAAelC,EAAS0G,IACtCS,EAAcnE,gBAAgBhD,EAASjB,MAEvC,EAAKyI,gBAAgBxH,EAAUmH,GAC/B,EAAKM,kBAAkBzH,EAAUmH,GACjC,EAAKO,wBAAwB1H,EAAUmH,GACvCrC,EAAM/E,YAAYoH,Q,yCAIHrC,EAAOC,GAAa,IAAD,OACpCA,EAAWlE,UAAUkC,SAAQ,SAAApC,GAQ3B,GAPKA,EAAS+F,IAGZ/F,EAASxB,qBAAuBwB,EAAS+F,IAFzC/F,EAASxB,qBAAuBwB,EAAS5B,KAMrB,oBAAlB4B,EAAS5B,KAAb,CAIA,IAAMwI,EAAgB,IAAInE,EAE1BmE,EAAclC,mBAAmB1E,EAASxB,sBAC1CoI,EAAcrF,aAAevB,EAAS+F,IACtCa,EAAcvE,gBAAgBrC,EAAS5B,MAEvC,EAAKyI,gBAAgB7G,EAAU4G,GAC/B,EAAKE,kBAAkB9G,EAAU4G,GACjC,EAAKI,wBAAwBhH,EAAU4G,GACvC,EAAKK,4BAA4BjH,EAAU4G,GAE3CzC,EAAMpE,YAAY6G,W,GAzIgBpJ,GCFnB0J,E,kDACnB,aAAe,IAAD,8BACZ,gBAuBFvI,YAAc,SAACC,EAAKC,GAClB,OAAKA,IAKMD,EAAIC,IAJbd,QAAQoB,MACN,wIAMG,IAjCK,EAoCdL,uBAAyB,SAAAC,GACvB,OAAOA,EAAe,EAAKP,uBArCf,EA0Cd2I,UAAY,SAAAC,GAEP,EAAKzI,YAAY,EAAK0I,WAAY,EAAKvI,uBAAuBsI,KAE/D,EAAKE,0BACH,EAAKhJ,kBAAkBiJ,SACvB,EAAKF,WACLD,IAjDQ,EAsDdI,QAAU,SAAAC,GACH,EAAK9I,YAAY,EAAK+I,QAAS,EAAK5I,uBAAuB2I,KAC9D,EAAKH,0BACH,EAAKhJ,kBAAkBqJ,MACvB,EAAKD,QACLD,IA3DQ,EAgEdH,0BAA4B,SAACzH,EAAQjB,EAAKS,GACxCQ,EAAOC,KAAKT,GACZT,EAAI,EAAKE,uBAAuBO,IAAaA,GAhE7C,EAAKjB,KRA6B,yBQGlC,EAAKE,kBAAoB,CAAEiJ,SAAU,GAAII,MAAO,IAGhD,EAAKN,WAAa,GAClB,EAAKK,QAAU,GAEf,EAAKlJ,qBAAuB,yBAXhB,E,wDAcFgC,GAEV,OAAOrC,KAAKQ,YAAYR,KAAKkJ,WAAY7G,K,wCAGzBA,GAChB,OAAOrC,KAAKkJ,WAAW7G,O,GArBkBnC,GCLxBuJ,E,WACnB,aAAe,oBACbzJ,KAAK0J,kBAAoB,KACzB1J,KAAK2J,gBAAkB,GACvB3J,KAAK4J,gBAAkB,G,4DAGTN,GACdtJ,KAAK2J,gBAAgBhI,KAAK2H,K,sCAGZA,GACdtJ,KAAK4J,gBAAgBjI,KAAK2H,O,KCZTO,EACnB,aAAe,oBACb7J,KAAK0J,kBAAoB,MCMRI,E,kDACnB,aAAe,IAAD,8BACZ,gBAyBFtK,aAAe,SAAAC,GACb,EAAKA,sBAAwBA,EAGzB,EAAKsK,qBAAuBtK,EAAsBqH,eAAe7G,KACnE,EAAK+J,oBAAqB,EAE1BpK,QAAQoB,MACN,0BACEvB,EAAsBqH,eAAe7G,KACrC,aACA,EAAK8J,qBArCC,EA2CdjK,QAAU,WACJ,EAAKkK,mBACP,EAAKC,mBAELrK,QAAQoB,MAAM,cACd,EAAKzB,aAAauH,eAAiB,OAhDzB,EAoDdmD,gBAAkB,WAEhB,IACMC,EADQ,EAAKzK,sBAAsBqH,eACjBxH,YAElB6K,EAAU,IAAIpB,EACpBoB,EAAQ7J,sBAAsB,0BAE9B,EAAK8J,uBAAuBD,EAASD,EAAU5I,WAC/C,EAAK+I,qBAAqBF,EAASD,EAAUnI,WAC7C,EAAKxC,aAAauH,eAAiBqD,GA9DvB,EAkIdG,0BAA4B,SAAA7C,GAC1B,IAAM8C,EAAU,IAAId,EACpBc,EAAQb,kBAAoBjC,EAG5B,IAAM+C,EAAU,EAAKzE,cAAc0E,aACnC,IAAK,IAAMpI,KAAQmI,EACjB,GAAIA,EAAQzG,eAAe1B,GAAO,CAEhC,IAAMqI,EAAWF,EAAQnI,GACzB,IAA+B,IAA3BqI,EAAS/G,QAAQ,KAAa,CAIhC,IAFA,IAAMf,EAAS8H,EAAShI,MAAM,KAC1BiI,EAAWlD,EACN3E,EAAI,EAAGA,EAAIF,EAAOC,OAAQC,IACjC6H,EAAWA,EAAS/H,EAAOE,IAE7ByH,EAAQlI,GAAQsI,OAGhBJ,EAAQlI,GAAQoF,EAAKiD,GAI3B,OAAOH,GA1JK,EAyNdK,wBAA0B,SAAAnD,GACxB,IAAMoD,EAAS,IAAIhB,EACnBgB,EAAOnB,kBAAoBjC,EAG3B,IAAMqD,EAAU,EAAK/E,cAAcgF,WACnC,IAAK,IAAM1I,KAAQyI,EACjB,GAAIA,EAAQ/G,eAAe1B,GAAO,CAEhC,IAAMqI,EAAWI,EAAQzI,GACzB,IAA+B,IAA3BqI,EAAS/G,QAAQ,KAAa,CAIhC,IAFA,IAAMf,EAAS8H,EAAShI,MAAM,KAC1BiI,EAAWlD,EACN3E,EAAI,EAAGA,EAAIF,EAAOC,OAAQC,IACjC6H,EAAWA,EAAS/H,EAAOE,IAE7B+H,EAAOxI,GAAQsI,OAGfE,EAAOxI,GAAQoF,EAAKiD,GAI1B,OAAOG,GA/OP,EAAK5K,KXC8B,0BWCnC,EAAK8J,mBXNmC,+BWOxC,EAAKC,oBAAqB,EAE1B,EAAKjE,cAAgB,CAEnB0E,aAAc,CACZO,aAAc,gBACdC,uBAAwB,uBACxBC,cAAe,2BAGjBH,WAAY,CACVI,WAAY,gBACZF,uBAAwB,uBACxBC,cAAe,0BACfE,UAAW,UACXC,UAAW,WApBH,E,mEAiESrF,EAAOsF,GAAY,IAAD,OAEvCA,EAAUrH,SAAQ,SAAAwD,GAChB,IAAM8D,EAAe,EAAKjB,0BAA0B7C,GACpDzB,EAAMgD,UAAUuC,MAMCvF,EAAM7F,kBAAkBiJ,SAEhCnF,SAAQ,SAAAgF,GAEjB,GACEA,EAAOS,kBAAkBnG,SACzBiI,OAAOC,KAAKxC,EAAOS,kBAAkBnG,SAASV,OAAS,EACvD,CACA,IAAM6I,EAAczC,EAAOS,kBAAkBnG,QAD7C,WAGWlB,GACLqJ,EAAY3H,eAAe1B,IAEjBqJ,EAAYrJ,GACpB4B,SAAQ,SAAAJ,GACLmC,EAAM2F,YAAY9H,IACrBjE,QAAQoB,MACN,uDAGJ,IAAM4K,EAAe5F,EAAM6F,kBAAkBhI,GACvCiI,EAAY,EAAKC,kBACrB9C,EACA5G,EACAuJ,GAEF5F,EAAMqD,QAAQyC,OAhBpB,IAAK,IAAMzJ,KAAQqJ,EAAc,EAAtBrJ,S,wCAwBC2J,EAAWC,EAAWL,GACtC,IAAMf,EAAS,IAAIhB,EAiBnB,OAhBAgB,EAAOnB,kBAAoBuC,EAC3BpB,EAAOM,WAAa,YACpBN,EAAOqB,YAAcD,EACrBpB,EAAOI,uBACLe,EAAUf,uBACV,KACAgB,EACA,KACAL,EAAaX,uBACfJ,EAAOK,cAAgBe,EACvBpB,EAAOO,UAAY,CAACY,GACpBnB,EAAOQ,UAAY,CAACO,GAEpBI,EAAUG,gBAAgBtB,GAC1Be,EAAaQ,gBAAgBvB,GAEtBA,I,2CA8BY7E,EAAOsF,GAAY,IAAD,OAErCA,EAAUrH,SAAQ,SAAAwD,GAGhB,IAFA,IAAM4E,EAAa,EAAKzB,wBAAwBnD,GAEvC3E,EAAI,EAAGA,EAAIuJ,EAAWjB,UAAUvI,OAAQC,IAAK,CACpD,IAAMkB,EAAMqI,EAAWjB,UAAUtI,GAC3BmG,EAASjD,EAAM6F,kBAAkB7H,GAEnCiF,IACFoD,EAAWjB,UAAUtI,GAAKmG,EAC1BA,EAAOkD,gBAAgBE,IAG3B,IAAK,IAAIvJ,EAAI,EAAGA,EAAIuJ,EAAWhB,UAAUxI,OAAQC,IAAK,CACpD,IAAMwJ,EAAMD,EAAWhB,UAAUvI,GAC3BmG,EAASjD,EAAM6F,kBAAkBS,GAEvC,GAAIrD,EACFoD,EAAWhB,UAAUvI,GAAKmG,EAC1BA,EAAOmD,gBAAgBC,QAEvB,GACErG,EAAM6F,kBACJQ,EAAWpB,uBAAyB,KAAOqB,GAE7C,CACA,IAAMC,EAAavG,EAAM6F,kBACvBQ,EAAWpB,uBAAyB,KAAOqB,GAE7CD,EAAWhB,UAAUvI,GAAKyJ,EAC1BA,EAAWH,gBAAgBC,OACtB,CACLzM,QAAQoB,MAAM,4BAA8BsL,GAE5C,IAAM/B,EAAU,IAAId,EACpBc,EAAQb,kBAAoB4C,EACxBtK,EAASsK,GAEX/B,EAAQU,uBAAyBqB,GAEjC/B,EAAQS,aAAe,UAEvBT,EAAQU,uBACNoB,EAAWpB,uBAAyB,KAAOqB,EAC7C/B,EAAQW,cAAgBoB,GAK1B/B,EAAQ6B,gBAAgBC,GACxBrG,EAAMgD,UAAUuB,GAChB8B,EAAWhB,UAAUvI,GAAKyH,GAIhCvE,EAAMqD,QAAQgD,U,GAtN0BhN,GCAzByK,E,kDACnB,aAAe,IAAD,8BACZ,gBAyBFtK,aAAe,SAAAC,GACb,EAAKA,sBAAwBA,EAGzB,EAAKsK,qBAAuBtK,EAAsBqH,eAAe7G,KACnE,EAAK+J,oBAAqB,EAE1BpK,QAAQoB,MACN,0BACEvB,EAAsBqH,eAAe7G,KACrC,aACA,EAAK8J,qBArCC,EA2CdjK,QAAU,WACJ,EAAKkK,mBACP,EAAKC,mBAELrK,QAAQoB,MAAM,cACd,EAAKzB,aAAauH,eAAiB,OAhDzB,EAoDdmD,gBAAkB,WAEhB,IACMC,EADQ,EAAKzK,sBAAsBqH,eACjBxH,YAElB6K,EAAU,IAAIpB,EACpBoB,EAAQ7J,sBAAsB,0BAE9B,EAAK8J,uBAAuBD,EAASD,EAAU5I,WAC/C,EAAK+I,qBAAqBF,EAASD,EAAUnI,WAC7C,EAAKxC,aAAauH,eAAiBqD,GA9DvB,EAkIdG,0BAA4B,SAAA7C,GAC1B,IAAM8C,EAAU,IAAId,EACpBc,EAAQb,kBAAoBjC,EAG5B,IAAM+C,EAAU,EAAKzE,cAAc0E,aACnC,IAAK,IAAMpI,KAAQmI,EACjB,GAAIA,EAAQzG,eAAe1B,GAAO,CAEhC,IAAMqI,EAAWF,EAAQnI,GACzB,IAA+B,IAA3BqI,EAAS/G,QAAQ,KAAa,CAIhC,IAFA,IAAMf,EAAS8H,EAAShI,MAAM,KAC1BiI,EAAWlD,EACN3E,EAAI,EAAGA,EAAIF,EAAOC,OAAQC,IACjC6H,EAAWA,EAAS/H,EAAOE,IAE7ByH,EAAQlI,GAAQsI,OAGhBJ,EAAQlI,GAAQoF,EAAKiD,GAI3B,OAAOH,GA1JK,EA+OdK,wBAA0B,SAAAnD,GACxB,IAAMoD,EAAS,IAAIhB,EACnBgB,EAAOnB,kBAAoBjC,EAG3B,IAAMqD,EAAU,EAAK/E,cAAcgF,WACnC,IAAK,IAAM1I,KAAQyI,EACjB,GAAIA,EAAQ/G,eAAe1B,GAAO,CAEhC,IAAMqI,EAAWI,EAAQzI,GACzB,IAA+B,IAA3BqI,EAAS/G,QAAQ,KAAa,CAIhC,IAFA,IAAMf,EAAS8H,EAAShI,MAAM,KAC1BiI,EAAWlD,EACN3E,EAAI,EAAGA,EAAIF,EAAOC,OAAQC,IACjC6H,EAAWA,EAAS/H,EAAOE,IAE7B+H,EAAOxI,GAAQsI,OAGfE,EAAOxI,GAAQoF,EAAKiD,GAI1B,OAAOG,GArQP,EAAK5K,KZC8B,0BYCnC,EAAK8J,mBZNmC,+BYOxC,EAAKC,oBAAqB,EAE1B,EAAKjE,cAAgB,CAEnB0E,aAAc,CACZO,aAAc,gBACdC,uBAAwB,uBACxBC,cAAe,2BAGjBH,WAAY,CACVI,WAAY,gBACZF,uBAAwB,uBACxBC,cAAe,uBACfE,UAAW,UACXC,UAAW,WApBH,E,mEAiESrF,EAAOsF,GAAY,IAAD,OAEvCA,EAAUrH,SAAQ,SAAAwD,GAChB,IAAM8D,EAAe,EAAKjB,0BAA0B7C,GACpDzB,EAAMgD,UAAUuC,MAMCvF,EAAM7F,kBAAkBiJ,SAEhCnF,SAAQ,SAAAgF,GAEjB,GACEA,EAAOS,kBAAkBnG,SACzBiI,OAAOC,KAAKxC,EAAOS,kBAAkBnG,SAASV,OAAS,EACvD,CACA,IAAM6I,EAAczC,EAAOS,kBAAkBnG,QAD7C,WAGWlB,GACLqJ,EAAY3H,eAAe1B,IAEjBqJ,EAAYrJ,GACpB4B,SAAQ,SAAAJ,GACLmC,EAAM2F,YAAY9H,IACrBjE,QAAQoB,MACN,uDAGJ,IAAM4K,EAAe5F,EAAM6F,kBAAkBhI,GACvCiI,EAAY,EAAKC,kBACrB9C,EACA5G,EACAuJ,GAEF5F,EAAMqD,QAAQyC,OAhBpB,IAAK,IAAMzJ,KAAQqJ,EAAc,EAAtBrJ,S,wCAwBC2J,EAAWC,EAAWL,GACtC,IAAMf,EAAS,IAAIhB,EAiBnB,OAhBAgB,EAAOnB,kBAAoBuC,EAC3BpB,EAAOM,WAAa,YACpBN,EAAOqB,YAAcD,EACrBpB,EAAOI,uBACLe,EAAUf,uBACV,KACAgB,EACA,KACAL,EAAaX,uBACfJ,EAAOK,cAAgBe,EACvBpB,EAAOO,UAAY,CAACY,GACpBnB,EAAOQ,UAAY,CAACO,GAEpBI,EAAUG,gBAAgBtB,GAC1Be,EAAaQ,gBAAgBvB,GAEtBA,I,2CA8BY7E,EAAOsF,GAAY,IAAD,OAErCA,EAAUrH,SAAQ,SAAAwD,GAGhB,IAFA,IAAM4E,EAAa,EAAKzB,wBAAwBnD,GAEvC3E,EAAI,EAAGA,EAAIuJ,EAAWjB,UAAUvI,OAAQC,IAAK,CACpD,IAAMkB,EAAMqI,EAAWjB,UAAUtI,GAC3BmG,EAASjD,EAAM6F,kBAAkB7H,GAEnCiF,IACFoD,EAAWjB,UAAUtI,GAAKmG,EAC1BA,EAAOkD,gBAAgBE,IAG3B,IAAK,IAAIvJ,EAAI,EAAGA,EAAIuJ,EAAWhB,UAAUxI,OAAQC,IAAK,CACpD,IAAMwJ,EAAMD,EAAWhB,UAAUvI,GAC3BmG,EAASjD,EAAM6F,kBAAkBS,GAEvC,GAAIrD,EACFoD,EAAWhB,UAAUvI,GAAKmG,EAC1BA,EAAOmD,gBAAgBC,QAEvB,GACErG,EAAM6F,kBACJQ,EAAWpB,uBAAyB,KAAOqB,GAE7C,CACA,IAAMC,EAAavG,EAAM6F,kBACvBQ,EAAWpB,uBAAyB,KAAOqB,GAE7CD,EAAWhB,UAAUvI,GAAKyJ,EAC1BA,EAAWH,gBAAgBC,OACtB,CACLzM,QAAQoB,MAAM,4BAA8BsL,GAE5C,IAAM/B,EAAU,IAAId,EACpBc,EAAQb,kBAAoB4C,EACxBtK,EAASsK,GAEX/B,EAAQU,uBAAyBqB,GAEjC/B,EAAQS,aAAe,UAEvBT,EAAQU,uBACNoB,EAAWpB,uBAAyB,KAAOqB,EAC7C/B,EAAQW,cAAgBoB,GAK1B/B,EAAQ6B,gBAAgBC,GACxBrG,EAAMgD,UAAUuB,GAChB8B,EAAWhB,UAAUvI,GAAKyH,GAOhC,GAHAvE,EAAMqD,QAAQgD,GAIoB,IAAhCA,EAAWjB,UAAUvI,QACrBwJ,EAAWhB,UAAUxI,OAAS,EAG9B,IAAK,IAAIC,EAAI,EAAGA,EAAIuJ,EAAWhB,UAAUxI,OAAQC,IAAK,CACpD,IAAM0J,EAAa,IAAI3C,EACvB,IAAK,IAAMxH,KAAQgK,EACbA,EAAWtI,eAAe1B,KAC5BmK,EAAWnK,GAAQgK,EAAWhK,IAIlC,IAAMoK,EAAYD,EAAWnB,UAAUvI,GACvC0J,EAAWnB,UAAY,CAACoB,GACxBD,EAAWvB,wBAA0B,eAAiBnI,EACtD2J,EAAUL,gBAAgBI,GAC1BxG,EAAMqD,QAAQmD,W,GA1OsBnN,GCRzBqN,E,WACnB,aAAe,oBACb1M,KAAK0J,kBAAoB,KACzB1J,KAAK2M,gBAAkB,GACvB3M,KAAK4M,gBAAkB,GACvB5M,KAAK6M,WAAa,GAClB7M,KAAK8M,iBAAmB,G,8DAGRC,GAChB/M,KAAK8M,iBAAiBnL,KAAKoL,K,sCAGbA,GACd/M,KAAK2M,gBAAgBhL,KAAKoL,K,sCAGZA,GACd/M,KAAK4M,gBAAgBjL,KAAKoL,K,mCAGf9M,GACX,IAAK,IAAI6C,EAAI,EAAGA,EAAI9C,KAAK6M,WAAWhK,OAAQC,IAC1C,GAAI9C,KAAK6M,WAAW/J,KAAO7C,EACzB,OAAO,EAGX,OAAO,M,KC3BU+M,EACnB,aAAe,oBACbhN,KAAK0J,kBAAoB,MCDRuD,E,uGAiCFC,EAAWC,GAC1B,IAAI1K,EAAS0K,EAAIzK,MAAM,KAAK,GACxBC,EAAO,GACX,GAAKF,EAQHE,EAAOwK,EAAIzK,MAAM,KAAK,GACtBC,GAAQ,QATG,CACX,IAAMC,EAASuK,EAAIzK,MAAM,KACzBD,EAASG,EAAOA,EAAOC,OAAS,GAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAOC,OAAS,EAAGC,IACrCH,GAAQC,EAAOE,GAEjBH,GAAQ,IAKV,IACMI,EAASmK,EAAUvK,GAMzB,OALII,EACOA,EAAS,IAAMN,EAEfA,M,KApDMwK,EACZG,eAAiB,SAACC,EAAYC,GACnC,GAA0B,qBAAfD,EAAX,CAIA,GAA0B,kBAAfA,EAAyB,CAClC,GAAIrL,EAASqL,GAAa,CACxB,IAAI5K,EAAS4K,EAAW3K,MAAM,KAAK,GACnC,IAAKD,EAAQ,CACX,IAAMG,EAASyK,EAAW3K,MAAM,KAChCD,EAASG,EAAOA,EAAOC,OAAS,GAElC,OAAOJ,EAET,OAAO4K,EAGT,GAAIC,GAAqBD,EAAWtJ,eAAeuJ,GACjD,OAAOD,EAAWC,GAAmB,GAGvC,IAAIC,EAtBaN,EAsBUO,eAAeH,EAAY,MACtD,OAAIE,IAGJA,EA1BiBN,EA0BMO,eAAeH,EAAY,YAFzCE,EAAgB,GAMlB,OA9BUN,EAyDZO,eAAiB,SAACH,EAAYC,GACnC,IAAK,IAAMG,KAAYJ,EACrB,GACEI,IAAaH,GACbD,EAAWtJ,eAAe0J,GAE1B,OAAOJ,EAAWI,I,IC3DLC,E,kDACnB,aAAe,IAAD,8BACZ,gBAuBFlN,YAAc,SAACC,EAAKC,GAClB,OAAKA,IAKMD,EAAIC,IAJbd,QAAQoB,MACN,wIAMG,IAjCK,EAoCdH,YAAc,SAAClB,EAAGmB,GAEhB,OAAO,GAtCK,EAyCdH,uBAAyB,SAAAC,GACvB,OAAOA,EAAe,EAAKP,uBA1Cf,EA+CdsN,QAAU,SAAAC,GACH,EAAKpN,YAAY,EAAKqN,QAAS,EAAKlN,uBAAuBiN,KAC9D,EAAKE,wBACH,EAAK3N,kBAAkB4N,MACvB,EAAKF,QACLD,IApDQ,EAyDdI,QAAU,SAAAjB,GACH,EAAKvM,YAAY,EAAKyN,QAAS,EAAKtN,uBAAuBoM,KAC9D,EAAKe,wBACH,EAAK3N,kBAAkB+N,MACvB,EAAKD,QACLlB,IA9DQ,EAyHde,wBAA0B,SAACpM,EAAQjB,EAAKS,GACtCQ,EAAOC,KAAKT,GACZT,EAAI,EAAKE,uBAAuBO,IAAaA,GAzH7C,EAAKjB,KhBC2B,uBgBEhC,EAAKE,kBAAoB,CAAE4N,MAAO,GAAIG,MAAO,IAG7C,EAAKL,QAAU,GACf,EAAKI,QAAU,GAEf,EAAK5N,qBAAuB,uBAXhB,E,4DAmBEgC,GACd,OAAOrC,KAAK6N,QAAQxL,K,iCA+CX2B,EAAKsI,GACdA,EAAI6B,cAAe,EACnBnK,EAAIkH,eAAiB,KAAOoB,EAAIpB,cAC3BlH,EAAIoK,yBACPpK,EAAIoK,uBAAyB,IAE/BpK,EAAIoK,uBAAuBzM,KAAK2K,GAGhCA,EAAIM,gBAAgB3I,SAAQ,SAAAoK,GACrBA,EAAOC,eACV1O,QAAQoB,MAAM,wCACdpB,QAAQC,IAAIwO,OAIhB/B,EAAIK,gBAAgB1I,SAAQ,SAAAsK,GACrBA,EAAQD,eACX1O,QAAQoB,MAAM,wCACdpB,QAAQC,IAAI0O,S,+CAKQ,IAAD,OACjBC,EAAgB,GAChBC,EAAgB,GACtBzO,KAAKG,kBAAkB4N,MAAM9J,SAAQ,SAAA2J,GAC/BA,EAAKO,eAEPK,EAAc7M,KAAKiM,UACZ,EAAKC,QAAQD,EAAK,EAAKvN,2BAGlCL,KAAKG,kBAAkB+N,MAAMjK,SAAQ,SAAA8I,GAC/BA,EAAKuB,eAEPG,EAAc9M,KAAKoL,UACZ,EAAKkB,QAAQlB,EAAK,EAAK1M,2BAKlCmO,EAAcvK,SAAQ,SAAAyK,GACpB,IAAMC,EAAa,EAAKxO,kBAAkB4N,MAAMpK,QAAQ+K,GACxD,EAAKvO,kBAAkB4N,MAAMa,OAAOD,EAAY,MAGlDF,EAAcxK,SAAQ,SAAA4K,GACpB,IAAMF,EAAa,EAAKxO,kBAAkB+N,MAAMvK,QAAQkL,GACxD,EAAK1O,kBAAkB+N,MAAMU,OAAOD,EAAY,U,GAtHXzO,GCMtB4O,E,kDACnB,aAAe,IAAD,8BACZ,gBAiDFtP,aAAe,SAAAC,GACb,EAAKA,sBAAwBA,EAEzB,EAAKsK,qBAAuBtK,EAAsBqH,eAAe7G,KACnE,EAAK+J,oBAAqB,EAE1BpK,QAAQoB,MACN,0BACEvB,EAAsBqH,eAAe7G,KACrC,aACA,EAAK8J,qBA5DC,EAkEdjK,QAAU,WACJ,EAAKkK,mBACP,EAAKC,mBAELrK,QAAQoB,MAAM,cACd,EAAKzB,aAAauH,eAAiB,OAvEzB,EA2EdmD,gBAAkB,WAEhB,IAAMjE,EAAQ,EAAKvG,sBAAsBqH,eACnCoD,EAAYlE,EAAM1G,YAGlByP,GAFqB/I,EAAM5F,wBAEjB,IAAIsN,GACpBqB,EAAQzO,sBAAsB,wBAE9B,EAAK0O,qBAAqBD,EAAS7E,EAAUd,UAC7C,EAAK6F,iBAAiBF,EAAS7E,EAAUV,OAEzC,EAAK0F,oBAAoBH,GAEzB,EAAKxP,aAAauH,eAAiBiI,GAzFvB,EAsPdI,sBAAwB,SAAA1H,GACtB,IAAM2H,EAAQ,IAAI1C,EAClB0C,EAAM1F,kBAAoBjC,EAG1B,IAAM4H,EAAU,EAAKtJ,cAAcuJ,WACnC,IAAK,IAAMjN,KAAQgN,EACjB,GAAIA,EAAQtL,eAAe1B,GAAO,CAEhC,IAAMqI,EAAW2E,EAAQhN,GACzB,IAA+B,IAA3BqI,EAAS/G,QAAQ,KAAa,CAIhC,IAFA,IAAMf,EAAS8H,EAAShI,MAAM,KAC1BiI,EAAWlD,EACN3E,EAAI,EAAGA,EAAIF,EAAOC,OAAQC,IACjC6H,EAAWA,EAAS/H,EAAOE,IAE7BsM,EAAM/M,GAAQsI,OAGdyE,EAAM/M,GAAQoF,EAAKiD,GAKzB,OAAO0E,GA/QK,EAkRdG,oBAAsB,SAAA9H,GACpB,IAAM+H,EAAQ,IAAIxC,EAClBwC,EAAM9F,kBAAoBjC,EAG1B,IAAMgI,EAAS,EAAK1J,cAAc2J,WAClC,IAAK,IAAMrN,KAAQoN,EACjB,GAAIA,EAAO1L,eAAe1B,IAAkB,aAATA,EAAqB,CAEtD,IAAMqI,EAAW+E,EAAOpN,GACxB,IAA+B,IAA3BqI,EAAS/G,QAAQ,KAAa,CAIhC,IAFA,IAAMf,EAAS8H,EAAShI,MAAM,KAC1BiI,EAAWlD,EACN3E,EAAI,EAAGA,EAAIF,EAAOC,OAAQC,IACjC6H,EAAWA,EAAS/H,EAAOE,IAE7B0M,EAAMnN,GAAQsI,OAGd6E,EAAMnN,GAAQoF,EAAKiD,GAYzB,MALyB,cAArB8E,EAAMG,aACRH,EAAMG,WAAa,aAErBH,EAAMtE,cAAgB+B,EAAcG,eAAeoC,EAAMtE,eAElDsE,GAhTP,EAAKvP,KjBF8B,0BiBInC,EAAK8J,mBjBR6B,yBiBSlC,EAAKC,oBAAqB,EAE1B,EAAKhH,gBAAkB,CACrB,8CAA+C,MAC/C,wCAAyC,OACzC,iCAAkC,MAClC,oCAAqC,MACrC,mCAAoC,KACpC,uCAAwC,MACxC,4BAA6B,MAC7B,gDAAiD,KACjD,6BAA8B,OAC9B,uCAAwC,QAG1C,EAAK+C,cAAgB,CACnBuJ,WAAY,CACVzC,WAAY,eACZ+C,qBAAsB,yBACtB1E,cAAe,iBAEjBwE,WAAY,CACVC,WAAY,aACZC,qBAAsB,yBACtB1E,cAAe,gBACf2E,YAAa,eAEfC,UAAW,CACT,CACEH,WAAY,YACZzE,cAAe,wBAGnB6E,UAAW,CACT,CACEC,YAAa,OACb/P,KAAM,CAAC,kBAIXgQ,eAAgB,IA7CN,E,gEA4FMjK,GAClBhG,KAAKkQ,YAAYlK,GACjBA,EAAMmK,yBAENnQ,KAAKoQ,YAAYpK,GACjBA,EAAMmK,2B,kCAGInK,GAAQ,IAAD,OACXkI,EAAQlI,EAAM7F,kBAAkB+N,MAChCmC,EAAYrQ,KAAK+F,cAAcgK,UAE/BO,EAAe,GACrBpC,EAAMjK,SAAQ,SAAA8I,GACe,EAAKwD,sBAAsBxD,EAAMsD,IAE1DC,EAAa3O,KAAKoL,MAGtB,IAAIyD,EAAgB,EACpBF,EAAarM,SAAQ,SAAA8I,GAEnB,IAAM0D,EAAc1D,EAAK2D,SACzBD,EAAYtC,cAAe,EAC3B,IAAMwC,EAAU,IAAIjE,EACpB,IAAK,IAAMrK,KAAQoO,EACbA,EAAY1M,eAAe1B,IAChB,oBAATA,GAAuC,oBAATA,IAChCsO,EAAQtO,GAAQoO,EAAYpO,IAKlCsO,EAAQf,qBACNe,EAAQf,qBAAuB,UAAYY,EAC7CG,EAAQxC,cAAe,EACvBnI,EAAM2H,QAAQgD,GACd5D,EAAK2D,SAAWC,EAChBH,S,kCAIQxK,GAAQ,IAAD,OAGXkI,EAAQlI,EAAM7F,kBAAkB+N,MAChC0C,EAAY5Q,KAAK+F,cAAc+J,UAE/Be,EAAe,GACrB3C,EAAMjK,SAAQ,SAAA8I,GACS,EAAK+D,cAAc/D,EAAM6D,KAE5C7D,EAAKuB,cAAe,EACpBuC,EAAalP,KAAKoL,OAGtB8D,EAAa5M,SAAQ,SAAA8I,GACnB,IAAMnK,EAASmK,EAAK6C,qBAAqBlN,MAAM,MACzCqO,EAAU/K,EAAMgL,gBAAgBpO,EAAO,IACvCqO,EAAUjL,EAAMgL,gBAAgBpO,EAAO,IAE7CoD,EAAMkL,WAAWH,EAASE,Q,oCAIhBlE,EAAMiD,GAClB,IAAImB,EAAW,EACXC,EAAgB,EAChBC,GAAU,EAmBd,OAlBArB,EAAY/L,SAAQ,SAAAqN,GAClB,IAAK,IAAMjP,KAAQiP,EACjB,GAAIA,EAAKvN,eAAe1B,GAAO,CAE7B,IAAMkP,EAAWxE,EAAK1K,GAChBmP,EAAeF,EAAKjP,GAC1B8O,IACII,IAAaC,GACfJ,IAKN,GAAIA,IAAkBD,EAEpB,OADAE,GAAU,KAIPA,I,4CAEatE,EAAMiD,GAC1B,IAAImB,EAAW,EACXC,EAAgB,EAChBC,GAAU,EAiCd,OAhCArB,EAAY/L,SAAQ,SAAAqN,GAClB,IAAK,IAAMjP,KAAQiP,EAAM,CACvB,GAAIA,EAAKvN,eAAe1B,GAGtB,GAAa,gBAATA,GAAyC,SAAfiP,EAAKjP,GAEjC8O,IACAC,SAGA,GAAa,SAAT/O,EAIuBiP,EAAKjP,GACb4B,SAAQ,SAAAP,GACnBqJ,EAAK2D,SAASe,aAAa/N,IAC7B0N,OAGJD,IAMR,GAAIC,IAAkBD,EAEpB,OADAE,GAAU,KAIPA,I,2CAGYrL,EAAOsF,GAAY,IAAD,OAGrCA,EAAUrH,SAAQ,SAAAwD,GAChB,IAAM2H,EAAQ,EAAKD,sBAAsB1H,GAErCiK,EAAUzE,EAAcG,eAAegC,EAAMlE,eACjC,OAAZwG,QAAgCrO,IAAZqO,IAClB1P,EAASyF,EAAKwD,wBAChByG,EAAUzE,EAAc0E,UACtB,EAAK3O,gBACLyE,EAAKwD,wBAGPrL,QAAQoB,MACN,sCAAwCyG,EAAKwD,yBAInDmE,EAAMlE,cAAgBwG,EACtB1L,EAAM2H,QAAQyB,Q,uCAqEDpJ,EAAOsF,GAAY,IAAD,OAGjCA,EAAUrH,SAAQ,SAAAwD,GAGhB,IAAMsF,EAAO,EAAKwC,oBAAoB9H,GAEtCA,EAAK2D,UAAUnH,SAAQ,SAAAD,GAErB,IAAM4J,EAAO5H,EAAMgL,gBAAgBhN,EAAIiH,wBAClC8B,EAAK6E,WACR7E,EAAK6E,SAAWhE,GAElBA,EAAKiE,gBAAgB9E,MAEvBtF,EAAK4D,UAAUpH,SAAQ,SAAAD,GAErB,IAAM4J,EAAO5H,EAAMgL,gBAAgBhN,EAAIiH,wBAClC8B,EAAK2D,WACR3D,EAAK2D,SAAW9C,GAGlBA,EAAKiE,gBAAgB9E,MAEvB/G,EAAMgI,QAAQjB,U,GA/UwB1N,GCAvByP,E,kDACnB,aAAe,IAAD,8BACZ,gBAkEFtP,aAAe,SAAAC,GACb,EAAKA,sBAAwBA,EAEzB,EAAKsK,qBAAuBtK,EAAsBqH,eAAe7G,KACnE,EAAK+J,oBAAqB,EAE1BpK,QAAQoB,MACN,0BACEvB,EAAsBqH,eAAe7G,KACrC,aACA,EAAK8J,qBA7EC,EAmFdjK,QAAU,WACJ,EAAKkK,mBACP,EAAKC,mBAELrK,QAAQoB,MAAM,cACd,EAAKzB,aAAauH,eAAiB,OAxFzB,EA4FdmD,gBAAkB,WAEhB,IAAMjE,EAAQ,EAAKvG,sBAAsBqH,eAEnCoD,EAAYlE,EAAM1G,YAGlByP,GAFqB/I,EAAM5F,wBAEjB,IAAIsN,GACpBqB,EAAQzO,sBAAsB,wBAE9B,EAAK0O,qBAAqBD,EAAS7E,EAAUd,UAC7C,EAAK6F,iBAAiBF,EAAS7E,EAAUV,OAEzC,EAAK0F,oBAAoBH,GACzB,EAAK+C,wBAAwB/C,GAE7B,EAAKxP,aAAauH,eAAiBiI,GA5GvB,EAqXdI,sBAAwB,SAAA1H,GACtB,IAAM2H,EAAQ,IAAI1C,EAClB0C,EAAM1F,kBAAoBjC,EAG1B,IAAM4H,EAAU,EAAKtJ,cAAcuJ,WACnC,IAAK,IAAMjN,KAAQgN,EACjB,GAAIA,EAAQtL,eAAe1B,GAAO,CAEhC,IAAMqI,EAAW2E,EAAQhN,GACzB,IAA+B,IAA3BqI,EAAS/G,QAAQ,KAAa,CAIhC,IAFA,IAAMf,EAAS8H,EAAShI,MAAM,KAC1BiI,EAAWlD,EACN3E,EAAI,EAAGA,EAAIF,EAAOC,OAAQC,IACjC6H,EAAWA,EAAS/H,EAAOE,IAE7BsM,EAAM/M,GAAQsI,OAGdyE,EAAM/M,GAAQoF,EAAKiD,GAKzB,OAAO0E,GA9YK,EAiZdG,oBAAsB,SAAA9H,GACpB,IAAM+H,EAAQ,IAAIxC,EAClBwC,EAAM9F,kBAAoBjC,EAG1B,IAAMgI,EAAS,EAAK1J,cAAc2J,WAClC,IAAK,IAAMrN,KAAQoN,EACjB,GAAIA,EAAO1L,eAAe1B,IAAkB,aAATA,EAAqB,CAEtD,IAAMqI,EAAW+E,EAAOpN,GACxB,IAA+B,IAA3BqI,EAAS/G,QAAQ,KAAa,CAIhC,IAFA,IAAMf,EAAS8H,EAAShI,MAAM,KAC1BiI,EAAWlD,EACN3E,EAAI,EAAGA,EAAIF,EAAOC,OAAQC,IACjC6H,EAAWA,EAAS/H,EAAOE,IAE7B0M,EAAMnN,GAAQsI,OAGd6E,EAAMnN,GAAQoF,EAAKiD,GAYzB,MALyB,cAArB8E,EAAMG,aACRH,EAAMG,WAAa,aAErBH,EAAMtE,cAAgB+B,EAAcG,eAAeoC,EAAMtE,eAElDsE,GA/aP,EAAKvP,KlBF8B,0BkBInC,EAAK8J,mBlBR6B,yBkBSlC,EAAKC,oBAAqB,EAE1B,EAAKhH,gBAAkB,CACrB,8CAA+C,MAC/C,wCAAyC,OACzC,iCAAkC,MAClC,oCAAqC,MACrC,mCAAoC,KACpC,uCAAwC,MACxC,4BAA6B,MAC7B,gDAAiD,KACjD,6BAA8B,OAC9B,uCAAwC,QAG1C,EAAK+C,cAAgB,CACnBuJ,WAAY,CACVzC,WAAY,eACZ+C,qBAAsB,yBACtB1E,cAAe,iBAEjBwE,WAAY,CACVC,WAAY,aACZC,qBAAsB,yBACtB1E,cAAe,gBACf2E,YAAa,eAEfC,UAAW,GAMXC,UAAW,GAOXE,eAAgB,CACd,CACE8B,SAAU,CAAC,sBACXC,eAAgB,CACdC,OAAQ,CAAC,SAAU,WACnBvQ,OAAQ,CAAC,QAAS,YAEpBwQ,cAAe,CAAC,gBAAiB,2BAEnC,CACEH,SAAU,CAAC,wBACXC,eAAgB,CACdC,OAAQ,CAAC,SAAU,WACnBvQ,OAAQ,CAAC,QAAS,YAEpBwQ,cAAe,CAAC,gBAAiB,+BA5D3B,E,oEA+GUlM,GAAQ,IAAD,OAC7B,GAAIhG,KAAK+F,cAAckK,eAAgB,CACrC,IAAMkC,EAAMnS,KAAK+F,cAAckK,eACjBjK,EAAM7F,kBAAkB+N,MAEhCjK,SAAQ,SAAA8I,GACZ,IAAMqF,EAAS,EAAKC,YAAYtF,EAAMoF,GACtC,IAAe,IAAXC,EAAkB,CACpBrF,EAAKuB,cAAe,EAGpB,IAAMgE,EAAU,IAAI5F,EACM,kBAAtB0F,EAAOE,QAAQ,GACjBA,EAAQpH,cAAgB6B,EAAK7B,cAE7BoH,EAAQpH,cAAgBkH,EAAOE,QAAQ,GAEzCA,EAAQzF,WAAa,CAACuF,EAAOE,QAAQ,IACrCA,EAAQ5I,kBAAoBqD,EAG5B,IAAMwF,EAAW,IAAIvF,EACfwF,EAAWJ,EAAOK,SAASR,OACjCM,EAASrH,cAAgBsH,EAAS,GAClCD,EAAS5C,WAAa6C,EAAS,GAC/BD,EAASX,SAAWU,EACpBC,EAAS7B,SAAW3D,EAAK6E,SAEzB,IAAMc,EAAW,IAAI1F,EACf2F,EAAWP,EAAOK,SAAS/Q,OACjCgR,EAASxH,cAAgByH,EAAS,GAClCD,EAAS/C,WAAagD,EAAS,GAC/BD,EAASd,SAAWU,EACpBI,EAAShC,SAAW3D,EAAK2D,SAGzB4B,EAAQ1C,qBACN7C,EAAK6E,SAAShC,qBACd,KACA7C,EAAK6C,qBACL,KACA7C,EAAK2D,SAASd,qBACd,aAEF2C,EAAS3C,qBACP7C,EAAK6E,SAAShC,qBACd,KACA7C,EAAK6C,qBACL,KACA7C,EAAK2D,SAASd,qBACd,cAEF8C,EAAS9C,qBACP7C,EAAK6E,SAAShC,qBACd,KACA7C,EAAK6C,qBACL,KACA7C,EAAK2D,SAASd,qBACd,cAEF5J,EAAM2H,QAAQ2E,GACdtM,EAAMgI,QAAQuE,GACdvM,EAAMgI,QAAQ0E,OAIpB1M,EAAMmK,2B,0CAGYnK,GAClBhG,KAAKkQ,YAAYlK,GACjBA,EAAMmK,yBAENnQ,KAAKoQ,YAAYpK,GACjBA,EAAMmK,2B,kCAGInK,GAAQ,IAAD,OACXkI,EAAQlI,EAAM7F,kBAAkB+N,MAChCmC,EAAYrQ,KAAK+F,cAAcgK,UAE/BO,EAAe,GACrBpC,EAAMjK,SAAQ,SAAA8I,GACe,EAAKwD,sBAAsBxD,EAAMsD,IAE1DC,EAAa3O,KAAKoL,MAGtB,IAAIyD,EAAgB,EACpBF,EAAarM,SAAQ,SAAA8I,GAEnB,IAAM0D,EAAc1D,EAAK2D,SACzBD,EAAYtC,cAAe,EAC3B,IAAMwC,EAAU,IAAIjE,EACpB,IAAK,IAAMrK,KAAQoO,EACbA,EAAY1M,eAAe1B,IAChB,oBAATA,GAAuC,oBAATA,IAChCsO,EAAQtO,GAAQoO,EAAYpO,IAKlCsO,EAAQf,qBACNe,EAAQf,qBAAuB,UAAYY,EAC7CG,EAAQxC,cAAe,EACvBnI,EAAM2H,QAAQgD,GACd5D,EAAK2D,SAAWC,EAChBH,S,kCAIQxK,GAAQ,IAAD,OAGXkI,EAAQlI,EAAM7F,kBAAkB+N,MAChC0C,EAAY5Q,KAAK+F,cAAc+J,UAE/Be,EAAe,GACrB3C,EAAMjK,SAAQ,SAAA8I,GACS,EAAK+D,cAAc/D,EAAM6D,KAE5C7D,EAAKuB,cAAe,EACpBuC,EAAalP,KAAKoL,OAGtB8D,EAAa5M,SAAQ,SAAA8I,GACnB,IAAMnK,EAASmK,EAAK6C,qBAAqBlN,MAAM,MACzCqO,EAAU/K,EAAMgL,gBAAgBpO,EAAO,IACvCqO,EAAUjL,EAAMgL,gBAAgBpO,EAAO,IAE7CoD,EAAMkL,WAAWH,EAASE,Q,oCAIhBlE,EAAMiD,GAClB,IAAImB,EAAW,EACXC,EAAgB,EAChBC,GAAU,EAmBd,OAlBArB,EAAY/L,SAAQ,SAAAqN,GAClB,IAAK,IAAMjP,KAAQiP,EACjB,GAAIA,EAAKvN,eAAe1B,GAAO,CAE7B,IAAMkP,EAAWxE,EAAK1K,GAChBmP,EAAeF,EAAKjP,GAC1B8O,IACII,IAAaC,GACfJ,IAKN,GAAIA,IAAkBD,EAEpB,OADAE,GAAU,KAIPA,I,kCAGGtE,EAAMiD,GAChB,IAAK,IAAIlN,EAAI,EAAGA,EAAIkN,EAAYnN,OAAQC,IACtC,IAAK,IAAMT,KAAQ2N,EAAYlN,GAC7B,GAAIkN,EAAYlN,GAAGiB,eAAe1B,IAGnB,aAATA,EAAqB,CACvB,IAAMuQ,EAAK7F,EAAK4C,WACVkD,EAAK7C,EAAYlN,GAAGT,GAE1B,GAAkB,kBAAPuQ,GACT,IAAK,IAAIE,EAAI,EAAGA,EAAID,EAAGhQ,OAAQiQ,IAC7B,GAAIF,EAAGG,gBAAkBF,EAAGC,GAAGC,cAC7B,MAAO,CACLN,SAAUzC,EAAYlN,GAAZ,eACVwP,QAAStC,EAAYlN,GAAZ,oBAKf,IAAK,IAAIkQ,EAAI,EAAGA,EAAIJ,EAAG/P,OAAQmQ,IAC7B,IAAK,IAAIF,EAAI,EAAGA,EAAID,EAAGhQ,OAAQiQ,IAC7B,GAAIF,EAAGI,GAAGD,gBAAkBF,EAAGC,GAAGC,cAChC,MAAO,CACLN,SAAUzC,EAAYlN,GAAZ,eACVwP,QAAStC,EAAYlN,GAAZ,eAU3B,OAAO,I,4CAGaiK,EAAMiD,GAC1B,IAAImB,EAAW,EACXC,EAAgB,EAChBC,GAAU,EAiCd,OAhCArB,EAAY/L,SAAQ,SAAAqN,GAClB,IAAK,IAAMjP,KAAQiP,EAAM,CACvB,GAAIA,EAAKvN,eAAe1B,GAGtB,GAAa,gBAATA,GAAyC,SAAfiP,EAAKjP,GAEjC8O,IACAC,SAGA,GAAa,SAAT/O,EAIuBiP,EAAKjP,GACb4B,SAAQ,SAAAP,GACnBqJ,EAAK2D,SAASe,aAAa/N,IAC7B0N,OAGJD,IAMR,GAAIC,IAAkBD,EAEpB,OADAE,GAAU,KAIPA,I,2CAGYrL,EAAOsF,GAAY,IAAD,OAGrCA,EAAUrH,SAAQ,SAAAwD,GAChB,IAAM2H,EAAQ,EAAKD,sBAAsB1H,GAErCiK,EAAUzE,EAAcG,eAAegC,EAAMlE,eACjC,OAAZwG,QAAgCrO,IAAZqO,IAClB1P,EAASyF,EAAKwD,wBAChByG,EAAUzE,EAAc0E,UACtB,EAAK3O,gBACLyE,EAAKwD,wBAGPrL,QAAQoB,MACN,sCAAwCyG,EAAKwD,yBAInDmE,EAAMlE,cAAgBwG,EACtB1L,EAAM2H,QAAQyB,Q,uCAqEDpJ,EAAOsF,GAAY,IAAD,OAGjCA,EAAUrH,SAAQ,SAAAwD,GAGhB,IAAMsF,EAAO,EAAKwC,oBAAoB9H,GAEtCA,EAAK2D,UAAUnH,SAAQ,SAAAD,GAErB,IAAM4J,EAAO5H,EAAMgL,gBAAgBhN,EAAIiH,wBAClC8B,EAAK6E,WACR7E,EAAK6E,SAAWhE,GAElBA,EAAKiE,gBAAgB9E,MAEvBtF,EAAK4D,UAAUpH,SAAQ,SAAAD,GAErB,IAAM4J,EAAO5H,EAAMgL,gBAAgBhN,EAAIiH,wBAClC8B,EAAK2D,WACR3D,EAAK2D,SAAW9C,GAElBA,EAAKiE,gBAAgB9E,MAEvB/G,EAAMgI,QAAQjB,U,GA7cwB1N,GCAvByP,E,kDACnB,aAAe,IAAD,8BACZ,gBAqEFtP,aAAe,SAAAC,GACb,EAAKA,sBAAwBA,EAEzB,EAAKsK,qBAAuBtK,EAAsBqH,eAAe7G,KACnE,EAAK+J,oBAAqB,EAE1BpK,QAAQoB,MACN,0BACEvB,EAAsBqH,eAAe7G,KACrC,aACA,EAAK8J,qBAhFC,EAsFdjK,QAAU,WACJ,EAAKkK,mBACP,EAAKC,mBAELrK,QAAQoB,MAAM,cACd,EAAKzB,aAAauH,eAAiB,OA3FzB,EA+FdmD,gBAAkB,WAEhB,IAAMjE,EAAQ,EAAKvG,sBAAsBqH,eACnCoD,EAAYlE,EAAM1G,YAGlByP,GAFqB/I,EAAM5F,wBAEjB,IAAIsN,GACpBqB,EAAQzO,sBAAsB,wBAE9B,EAAK0O,qBAAqBD,EAAS7E,EAAUd,UAC7C,EAAK6F,iBAAiBF,EAAS7E,EAAUV,OAGzC,EAAKyJ,kCAAkClE,EAAQzP,YAAY4O,OAK3D,EAAKgF,iBAAiBnE,GAEtB,EAAKxP,aAAauH,eAAiBiI,GAnHvB,EAsZdI,sBAAwB,SAAA1H,GACtB,IAAM2H,EAAQ,IAAI1C,EAClB0C,EAAM1F,kBAAoBjC,EAG1B,IAAM4H,EAAU,EAAKtJ,cAAcuJ,WACnC,IAAK,IAAMjN,KAAQgN,EACjB,GAAIA,EAAQtL,eAAe1B,GAAO,CAEhC,IAAMqI,EAAW2E,EAAQhN,GACzB,IAA+B,IAA3BqI,EAAS/G,QAAQ,KAAa,CAIhC,IAFA,IAAMf,EAAS8H,EAAShI,MAAM,KAC1BiI,EAAWlD,EACN3E,EAAI,EAAGA,EAAIF,EAAOC,OAAQC,IACjC6H,EAAWA,EAAS/H,EAAOE,IAE7BsM,EAAM/M,GAAQsI,OAGdyE,EAAM/M,GAAQoF,EAAKiD,GAUzB,YAJyBrH,IAArB+L,EAAMvC,aACRuC,EAAMvC,WAAa,WAGduC,GApbK,EAubdG,oBAAsB,SAAA9H,GACpB,IAAM+H,EAAQ,IAAIxC,EAClBwC,EAAM9F,kBAAoBjC,EAG1B,IAAMgI,EAAS,EAAK1J,cAAc2J,WAClC,IAAK,IAAMrN,KAAQoN,EACjB,GAAIA,EAAO1L,eAAe1B,IAAkB,aAATA,EAAqB,CAEtD,IAAMqI,EAAW+E,EAAOpN,GACxB,IAA+B,IAA3BqI,EAAS/G,QAAQ,KAAa,CAIhC,IAFA,IAAMf,EAAS8H,EAAShI,MAAM,KAC1BiI,EAAWlD,EACN3E,EAAI,EAAGA,EAAIF,EAAOC,OAAQC,IACjC6H,EAAWA,EAAS/H,EAAOE,IAE7B0M,EAAMnN,GAAQsI,OAGd6E,EAAMnN,GAAQoF,EAAKiD,GAczB,MAPyB,cAArB8E,EAAMG,aACRH,EAAMG,WAAa,aAErBH,EAAMtE,cAAgB+B,EAAcG,eAAeoC,EAAMtE,oBAChC7H,IAArBmM,EAAMG,aACRH,EAAMG,WAAa,WAEdH,GAvdP,EAAKvP,KnBF8B,0BmBInC,EAAK8J,mBnBR6B,yBmBSlC,EAAKC,oBAAqB,EAE1B,EAAKhH,gBAAkB,CACrB,8CAA+C,MAC/C,wCAAyC,OACzC,iCAAkC,MAClC,oCAAqC,MACrC,mCAAoC,KACpC,uCAAwC,MACxC,4BAA6B,MAC7B,gDAAiD,KACjD,6BAA8B,OAC9B,uCAAwC,QAG1C,EAAK+C,cAAgB,CACnBuJ,WAAY,CACVzC,WAAY,eACZ+C,qBAAsB,yBACtB1E,cAAe,iBAEjBwE,WAAY,CACVC,WAAY,aACZC,qBAAsB,yBACtB1E,cAAe,gBACf2E,YAAa,eAEfC,UAAW,CACT,CACEH,WAAY,YACZzE,cAAe,wBAInBiI,UAAW,CAAC,wBAEZpD,UAAW,CACT,CACEC,YAAa,OACb/P,KAAM,CAAC,kBAIXgQ,eAAgB,IAhDN,E,6DAsHGjK,GACf,IAAMmM,EAAMnS,KAAK+F,cAAcoN,UAC/BnN,EAAM1G,YAAY4O,MAAMjK,SAAQ,SAAA8I,IACQ,IAAlCoF,EAAIxO,QAAQoJ,EAAK4C,cACnB5C,EAAK6E,SAASwB,kBAAkBrG,GAChCA,EAAK2D,SAASvC,cAAe,EAC7BpB,EAAKuB,cAAe,MAGxBtI,EAAMmK,2B,wDAG0BjC,GAChCA,EAAMjK,SAAQ,SAAA8I,GACqB,YAA7BA,EAAK2D,SAAS7D,WAChBE,EAAK4C,WAAa,uBAGf5C,EAAK8C,aACJ9C,EAAK4C,YAAyC,IAA3B5C,EAAK4C,WAAW9M,SAErCkK,EAAK4C,WAAa,2B,8CAMF3J,GAAQ,IAAD,OAC7B,GAAIhG,KAAK+F,cAAckK,eAAgB,CACrC,IAAMkC,EAAMnS,KAAK+F,cAAckK,eACjBjK,EAAM7F,kBAAkB+N,MAEhCjK,SAAQ,SAAA8I,GACZ,IAAMqF,EAAS,EAAKC,YAAYtF,EAAMoF,GACtC,IAAe,IAAXC,EAAkB,CACpBrF,EAAKuB,cAAe,EAGpB,IAAMgE,EAAU,IAAI5F,EACM,kBAAtB0F,EAAOE,QAAQ,GACjBA,EAAQpH,cAAgB6B,EAAK7B,cAE7BoH,EAAQpH,cAAgBkH,EAAOE,QAAQ,GAEzCA,EAAQzF,WAAa,CAACuF,EAAOE,QAAQ,IACrCA,EAAQ5I,kBAAoBqD,EAG5B,IAAMwF,EAAW,IAAIvF,EACfwF,EAAWJ,EAAOK,SAASR,OACjCM,EAASrH,cAAgBsH,EAAS,GAClCD,EAAS5C,WAAa6C,EAAS,GAC/BD,EAASX,SAAWU,EACpBC,EAAS7B,SAAW3D,EAAK6E,SAEzB,IAAMc,EAAW,IAAI1F,EACf2F,EAAWP,EAAOK,SAAS/Q,OACjCgR,EAASxH,cAAgByH,EAAS,GAClCD,EAAS/C,WAAagD,EAAS,GAC/BD,EAASd,SAAWU,EACpBI,EAAShC,SAAW3D,EAAK2D,SAGzB4B,EAAQ1C,qBACN7C,EAAK6E,SAAShC,qBACd,KACA7C,EAAK6C,qBACL,KACA7C,EAAK2D,SAASd,qBACd,aAEF2C,EAAS3C,qBACP7C,EAAK6E,SAAShC,qBACd,KACA7C,EAAK6C,qBACL,KACA7C,EAAK2D,SAASd,qBACd,cAEF8C,EAAS9C,qBACP7C,EAAK6E,SAAShC,qBACd,KACA7C,EAAK6C,qBACL,KACA7C,EAAK2D,SAASd,qBACd,cAEF5J,EAAM2H,QAAQ2E,GACdtM,EAAMgI,QAAQuE,GACdvM,EAAMgI,QAAQ0E,OAIpB1M,EAAMmK,2B,0CAGYnK,GAClBhG,KAAKkQ,YAAYlK,GACjBA,EAAMmK,yBAENnQ,KAAKoQ,YAAYpK,GACjBA,EAAMmK,2B,kCAGInK,GAAQ,IAAD,OACXkI,EAAQlI,EAAM7F,kBAAkB+N,MAChCmC,EAAYrQ,KAAK+F,cAAcgK,UAE/BO,EAAe,GACrBpC,EAAMjK,SAAQ,SAAA8I,GACe,EAAKwD,sBAAsBxD,EAAMsD,IAE1DC,EAAa3O,KAAKoL,MAGtB,IAAIyD,EAAgB,EACpBF,EAAarM,SAAQ,SAAA8I,GAEnB,IAAM0D,EAAc1D,EAAK2D,SACzBD,EAAYtC,cAAe,EAC3B,IAAMwC,EAAU,IAAIjE,EACpB,IAAK,IAAMrK,KAAQoO,EACbA,EAAY1M,eAAe1B,IAChB,oBAATA,GAAuC,oBAATA,IAChCsO,EAAQtO,GAAQoO,EAAYpO,IAKlCsO,EAAQf,qBACNe,EAAQf,qBAAuB,UAAYY,EAC7CG,EAAQxC,cAAe,EACvBnI,EAAM2H,QAAQgD,GACd5D,EAAK2D,SAAWC,EAChBH,S,kCAIQxK,GAAQ,IAAD,OAGXkI,EAAQlI,EAAM7F,kBAAkB+N,MAChC0C,EAAY5Q,KAAK+F,cAAc+J,UAE/Be,EAAe,GACrB3C,EAAMjK,SAAQ,SAAA8I,GACS,EAAK+D,cAAc/D,EAAM6D,KAE5C7D,EAAKuB,cAAe,EACpBuC,EAAalP,KAAKoL,OAGtB8D,EAAa5M,SAAQ,SAAA8I,GACnB,IAAMnK,EAASmK,EAAK6C,qBAAqBlN,MAAM,MACzCqO,EAAU/K,EAAMgL,gBAAgBpO,EAAO,IACvCqO,EAAUjL,EAAMgL,gBAAgBpO,EAAO,IAE7CoD,EAAMkL,WAAWH,EAASE,Q,oCAIhBlE,EAAMiD,GAClB,IAAImB,EAAW,EACXC,EAAgB,EAChBC,GAAU,EAmBd,OAlBArB,EAAY/L,SAAQ,SAAAqN,GAClB,IAAK,IAAMjP,KAAQiP,EACjB,GAAIA,EAAKvN,eAAe1B,GAAO,CAE7B,IAAMkP,EAAWxE,EAAK1K,GAChBmP,EAAeF,EAAKjP,GAC1B8O,IACII,IAAaC,GACfJ,IAKN,GAAIA,IAAkBD,EAEpB,OADAE,GAAU,KAIPA,I,kCAGGtE,EAAMiD,GAChB,IAAK,IAAIlN,EAAI,EAAGA,EAAIkN,EAAYnN,OAAQC,IACtC,IAAK,IAAMT,KAAQ2N,EAAYlN,GAC7B,GAAIkN,EAAYlN,GAAGiB,eAAe1B,IAGnB,aAATA,EAAqB,CACvB,IAAMuQ,EAAK7F,EAAK4C,WACVkD,EAAK7C,EAAYlN,GAAGT,GAC1B,GAAkB,kBAAPuQ,GACT,IAAK,IAAIE,EAAI,EAAGA,EAAID,EAAGhQ,OAAQiQ,IAC7B,GAAIF,EAAGG,gBAAkBF,EAAGC,GAAGC,cAC7B,MAAO,CACLN,SAAUzC,EAAYlN,GAAZ,eACVwP,QAAStC,EAAYlN,GAAZ,oBAKf,IAAK,IAAIkQ,EAAI,EAAGA,EAAIJ,EAAG/P,OAAQmQ,IAC7B,IAAK,IAAIF,EAAI,EAAGA,EAAID,EAAGhQ,OAAQiQ,IAC7B,GAAIF,EAAGI,GAAGD,gBAAkBF,EAAGC,GAAGC,cAChC,MAAO,CACLN,SAAUzC,EAAYlN,GAAZ,eACVwP,QAAStC,EAAYlN,GAAZ,eAU3B,OAAO,I,4CAGaiK,EAAMiD,GAC1B,IAAImB,EAAW,EACXC,EAAgB,EAChBC,GAAU,EAiCd,OAhCArB,EAAY/L,SAAQ,SAAAqN,GAClB,IAAK,IAAMjP,KAAQiP,EAAM,CACvB,GAAIA,EAAKvN,eAAe1B,GAGtB,GAAa,gBAATA,GAAyC,SAAfiP,EAAKjP,GAEjC8O,IACAC,SAGA,GAAa,SAAT/O,EAIuBiP,EAAKjP,GACb4B,SAAQ,SAAAP,GACnBqJ,EAAK2D,SAASe,aAAa/N,IAC7B0N,OAGJD,IAMR,GAAIC,IAAkBD,EAEpB,OADAE,GAAU,KAIPA,I,2CAGYrL,EAAOsF,GAAY,IAAD,OAGrCA,EAAUrH,SAAQ,SAAAwD,GAChB,IAAM2H,EAAQ,EAAKD,sBAAsB1H,GAErCiK,EAAUzE,EAAcG,eAAegC,EAAMlE,eACjC,OAAZwG,QAAgCrO,IAAZqO,IAClB1P,EAASyF,EAAKwD,wBAChByG,EAAUzE,EAAc0E,UACtB,EAAK3O,gBACLyE,EAAKwD,wBAGPrL,QAAQoB,MACN,sCAAwCyG,EAAKwD,yBAInDmE,EAAMlE,cAAgBwG,EACtB1L,EAAM2H,QAAQyB,Q,uCA4EDpJ,EAAOsF,GAAY,IAAD,OAGjCA,EAAUrH,SAAQ,SAAAwD,GAGhB,IAAMsF,EAAO,EAAKwC,oBAAoB9H,GAEtCA,EAAK2D,UAAUnH,SAAQ,SAAAD,GAErB,IAAM4J,EAAO5H,EAAMgL,gBAAgBhN,EAAIiH,wBAClC8B,EAAK6E,WACR7E,EAAK6E,SAAWhE,GAElBA,EAAKiE,gBAAgB9E,MAEvBtF,EAAK4D,UAAUpH,SAAQ,SAAAD,GAErB,IAAM4J,EAAO5H,EAAMgL,gBAAgBhN,EAAIiH,wBAClC8B,EAAK2D,WACR3D,EAAK2D,SAAW9C,GAGlBA,EAAKiE,gBAAgB9E,MAEvB/G,EAAMgI,QAAQjB,U,GAtfwB1N,G,cCXvBgU,EACnB,aAAe,yBAGfC,eAAiB,SAAAC,GAEf,OAAOC,WAAWD,EAAME,KAAK,QALjB,KAQdC,cAAgB,SAAAH,GAEd,OAAOC,WAAWD,EAAME,KAAK,WAVjB,KAadE,eAAiB,SAAAJ,GAEf,OAAOC,WAAWD,EAAME,KAAK,aCdZG,E,WACnB,aAAe,IAAD,gCAUdC,sCAAwC,SAAC/L,EAAQC,EAAOgF,EAAM+G,GAC5D,IAAIC,EAAa,EACbD,IACFC,EAAaD,GAGf,IAAME,EAAcjH,EAAKkH,eACzBD,EAAYE,OAAO,GAAGC,0BAEtB,IAAMC,EAAS,CAAEC,EAAGvM,EAAOuM,EAAGC,EAAGxM,EAAOwM,GAClCC,EAAU,CAAEF,EAAGL,EAAYE,OAAO,GAAGG,EAAGC,EAAGN,EAAYE,OAAO,GAAGI,GACjEE,EAAS,CAAEH,EAAGtM,EAAMsM,EAAGC,EAAGvM,EAAMuM,GAEtC,GAA4B,SAAxBvH,EAAK0H,eAiBF,CACL,IAAIC,EAAU,EACV5M,EAAO6M,gBAAkB,IAC3BD,EAAU5M,EAAO6M,iBAEnB,IACEC,EAAoD,IAD3B,IAAMF,GAE/BG,EAAYC,KAAKC,IAAI,GAAIH,GAErBI,EAAKT,EAAQF,EAAIvM,EAAOuM,EAC5BY,EAAKV,EAAQD,EAAIxM,EAAOwM,EACxBY,EAAcJ,KAAKK,MAAMF,EAAID,GAC7BI,EAAa,EAAKC,iBAAiBH,GAC/BI,EAAaF,EAAaP,EAAY,EACtCU,EAAWH,EAAaP,EAAY,EACpCW,EACJ,EAAKC,WAAWnC,eAAexL,EAAOmM,gBAAkBF,EACpD2B,EAAU,EAAKC,kBAAkBL,GACrCM,EAAQ,EAAKD,kBAAkBJ,GAC/BM,EAAKf,KAAKgB,IAAIJ,GAAWF,EACzBO,EAAKjB,KAAKkB,IAAIN,GAAWF,EACzBS,EAAKnB,KAAKgB,IAAIF,GAASJ,EACvBU,EAAKpB,KAAKkB,IAAIJ,GAASJ,EAEzB,MAAO,CACL,CAAC1N,EAAOuM,EAAIwB,EAAI/N,EAAOwM,EAAIyB,GAC3B,CAACxB,EAAQF,EAAGE,EAAQD,GACpB,CAACxM,EAAOuM,EAAI4B,EAAInO,EAAOwM,EAAI4B,IA3C7B,IAAIC,EAAkB,EAAKC,mCACzBhC,EACAG,GA4CJ,OA1CE,EAAK8B,yBACHjC,EACAtM,EACAqO,EACApC,GAGFoC,EAAkB,EAAKC,mCACrB5B,EACAD,GAEF,EAAK8B,yBAAyB7B,EAAQzM,EAAOoO,EAAiBpC,GA+BzD,CACL,CAACK,EAAOC,EAAGD,EAAOE,GAClB,CAACC,EAAQF,EAAGE,EAAQD,GACpB,CAACE,EAAOH,EAAGG,EAAOF,KAzER,KAyFdgC,0BAA4B,SAACxO,EAAQC,EAAO+L,GAE1C,IAAIC,EAAa,EACbD,IACFC,EAAaD,GAEf,IAAMM,EAAS,CAAEC,EAAGvM,EAAOuM,EAAGC,EAAGxM,EAAOwM,GAClCE,EAAS,CAAEH,EAAGtM,EAAMsM,EAAGC,EAAGvM,EAAMuM,GAClC6B,EAAkB,EAAKC,mCACzBtO,EACAC,GAMF,OAJA,EAAKsO,yBAAyBjC,EAAQtM,EAAQqO,EAAiBpC,GAE/DoC,EAAkB,EAAKC,mCAAmCrO,EAAOD,GACjE,EAAKuO,yBAAyB7B,EAAQzM,EAAOoO,EAAiBpC,GACvD,CACL,CAACK,EAAOC,EAAGD,EAAOE,GAClB,CAACE,EAAOH,EAAGG,EAAOF,KA1GpBtU,KAAKyV,WAAa,IAAIpC,E,+DAGLvL,EAAQC,EAAO+L,GAGhC,MAAO,CAAEyC,GAFE,IAAOxO,EAAMsM,EAAIvM,EAAOuM,GAAKP,EAEvB0C,GADN,IAAOzO,EAAMuM,EAAIxM,EAAOwM,GAAKR,K,wCAuExB2C,GAKhB,OAJAA,GAAgB,KACJ,IACVA,GAAgB,KAEV3B,KAAK4B,GAAKD,EAAS,M,uCAGZE,GACf,OAAOA,GAAU,IAAM7B,KAAK4B,M,yDAyBKzE,EAAQvQ,GACzC,IAAM2S,EAAI3S,EAAO2S,EAAIpC,EAAOoC,EACtBC,EAAI5S,EAAO4S,EAAIrC,EAAOqC,EAEtBsC,EAAM9B,KAAK+B,KAAKxC,EAAIA,EAAIC,EAAIA,GAClC,MAAO,CAAED,EAAGA,EAAIuC,EAAKtC,EAAGA,EAAIsC,K,+CAGLE,EAAUlJ,EAAMuI,EAAiBpC,GACxD,IAAMgD,EAAMnJ,EAAKoJ,kBACjB,GAAgC,WAA5BD,EAAIE,MAAMC,cAA4B,CACxC,IAAMC,EACJnX,KAAKyV,WAAWnC,eAAe1F,EAAKqG,gBAAkBF,EAKxD+C,EAASzC,EAAIzG,EAAKyG,EAAI8C,EAAmBhB,EAAgB9B,EACzDyC,EAASxC,EAAI1G,EAAK0G,EAAI6C,EAAmBhB,EAAgB7B,MAEpD,IAAgC,SAA5ByC,EAAIE,MAAMC,cAA0B,CAC7C,IAQIE,EAREC,EACJrX,KAAKyV,WAAW/B,cAAc9F,EAAKqG,gBAAkBF,EAEjDuD,EACJtX,KAAKyV,WAAW9B,eAAe/F,EAAKqG,gBAAkBF,EAElDwD,EAAoB,GAAM/D,WAAW6D,GACrCG,EAAoB,GAAMhE,WAAW8D,GAS3C,OANEF,EADEtC,KAAK2C,IAAItB,EAAgB9B,IAAMS,KAAK2C,IAAItB,EAAgB7B,GAClD,EAAMQ,KAAK2C,IAAItB,EAAgB9B,GAE/B,EAAMS,KAAK2C,IAAItB,EAAgB7B,GAEzCwC,EAASzC,EAAIzG,EAAKyG,EAAI+C,EAAQG,EAAoBpB,EAAgB9B,EAClEyC,EAASxC,EAAI1G,EAAK0G,EAAI8C,EAAQI,EAAoBrB,EAAgB7B,EAC3DwC,EAGPA,EAASzC,EAAIzG,EAAKyG,EAClByC,EAASxC,EAAI1G,EAAK0G,O,KCxJHoD,E,WACnB,WAAYC,GAAQ,IAAD,gCA6SnBC,qBAAuBC,MAAOC,OA7SX,KA8SnBC,oBAAsBF,MAAOC,OAAOE,YAAY,YA9S7B,KA+SnBC,mBAAqBJ,MAClBC,OACAE,YAAY,YACZE,SAAS,GAlTO,KAoTnBC,gBAAkB,SAACC,EAAOC,EAAMtB,GAG9B,IAAoC,IAAhCA,EAAIuB,QAAQH,gBACd,OAAO,EAAKI,UAAUH,EAAOC,EAAMtB,EAAIyB,YAxTxB,KA6TnBC,uBAAyB,SAACL,EAAO7E,EAAO3N,EAAO8S,EAAQ9K,GACrD,IAAM0K,EAAUI,EAAOJ,QAKvB,GAJIA,EAAQK,wBACVP,EAAMQ,OAAO,SAASP,KAAKzS,EAAMyS,QAG/BC,EAAQO,cAERjT,EAAMgI,OAAOkL,wBAAwBzB,MACrC7D,WAAWD,EAAME,KAAK,UACtB,CAEA,IAAMsF,EAAc,EAAKC,SACvBpT,EAAMyS,OACNK,EAAOF,UACPhF,WAAWD,EAAME,KAAK,WAGxB7N,EAAMyS,KAAKU,GAMf,IACmC,IAAjCT,EAAQW,sBACRrL,EAAKsL,iBAAiBpM,iBAAiBjK,OAAS,EAChD,CAGA,IAAMsW,EAAcvL,EAAKsL,iBAAiBpM,iBAGpCwK,EAAS9D,WAAWD,EAAME,KAAK,WAAkC,GAArB0F,EAAYtW,OAE9D0Q,EAAME,KAAK,KAAK,KAChBF,EAAME,KAAK,KAAM,GAAM6D,GACvB/D,EAAME,KAAK,QALG,KAMdF,EAAME,KAAK,SAAU6D,GAGrB,IAGMxD,GAAU,GAAMwD,EAHN1R,EAAMgI,OAAOkL,wBAGUxB,OACvC1R,EAAM6N,KAAK,KAAMK,EAAS,MAG1B,IAAMgE,EAAOM,EAAMQ,OAAO,QAEpBvE,EAAId,EAAME,KAAK,KACfa,EAAIf,EAAME,KAAK,KACf2F,EAAI7F,EAAME,KAAK,SAEf4F,EAAmBC,OACtBC,iBAAiB3T,EAAMgI,QACvB4L,iBAAiB,aACdC,EAAWjG,WAAW6F,GACtBK,EAAWlG,WAAWc,GAAK,EAAImF,EAC/BE,EAAWnG,WAAWa,GAAKb,WAAW4F,GAC5CtB,EACGrE,KAAK,KAAMY,GACXZ,KAAK,KAAMiG,GACXjG,KAAK,KAAMkG,GACXlG,KAAK,KAAMiG,GACd5B,EAAKb,MAAM,SAAU,SACrB,IAAM2C,EAAcxB,EAAMQ,OAAO,KACjCgB,EAAYnG,KAAK,KAAM,qBAAuB7F,EAAKrN,MAEnD,IAAIsZ,EAAY,EAChBV,EAAYlV,SAAQ,SAAA8I,GAElB,IAAM+M,EAAmBF,EAAYhB,OAAO,KACtCmB,EAAeH,EAAYhB,OAAO,KAGlCoB,EAAU,EAAKC,uBAAuBC,sBAC1CnN,EAAK4C,YAGDwK,EAAU,EAAKF,uBAAuBG,sBAC1CrN,EAAK2D,SAAS7D,YAGhB,EAAKwN,iBACHP,EACAE,EAAQ/C,MAAMqD,aACdvN,GAIF+M,EAAiBrG,KACf,YACA,mBAA6B,GAAKoG,GAAa,KAGjD,EAAKQ,iBAAiBN,EAAcI,EAASpN,EAAK2D,UAElDqJ,EAAatG,KACX,YACA,kBAA4B,GAAKoG,GAAa,KAGhDA,GAAa,MAmBbvB,EAAQW,sBAC0C,IAAlDrL,EAAKsL,iBAAiBpM,iBAAiBjK,SACzCyV,EAAQiC,eACkB,WAA1BjC,EAAQiC,eAER,EAAKC,mBAAmB5U,EAAO2N,GAG7B+E,EAAQmC,eAA2C,WAA1BnC,EAAQmC,eACnC,EAAKC,mBAAmB9U,EAAO2N,IAhchB,KAocnBiH,mBAAqB,SAAC5U,EAAO2N,GAC3B,IAGMO,EAAS,IAHClO,EAAMgI,OAAOkL,wBAGCxB,OAC9B1R,EAAM6N,KAAK,KAAMK,EAAS,OAzcT,KA4cnB4G,mBAAqB,SAAC9U,EAAO2N,GAC3B,IACMO,GAAU,GADAlO,EAAMgI,OAAOkL,wBACCzB,MAC9BzR,EAAM6N,KAAK,KAAMK,EAAS,OA/cT,KA6dnB6G,mBAAqB,SAACC,EAAS7D,EAAK8D,GAClC,IAAMC,EAAQ/D,EAAI8D,EAAW,SACvBxD,EAAQN,EAAI8D,EAAW,SACvB5D,EAAQF,EAAI8D,EAAW,SAE7BD,EAAQ3D,MAAM,SAAU6D,GACxBF,EAAQ3D,MAAM,eAAgBI,GAChB,UAAVJ,IACY,WAAVA,GACF2D,EAAQ3D,MAAM,mBAAoB,GAEtB,WAAVA,GACF2D,EAAQ3D,MAAM,mBAAoB,KAzerB,KA8enB8D,gBAAkB,SAACC,EAAiBhE,GAClCgE,EAAgBvH,KAAK,OAAQuD,EAAgBiE,SAC7C,EAAKN,mBAAmBK,EAAiBhE,EAAiB,WAhfzC,KAmfnBkE,gBAAkB,SAACF,EAAiBhE,GAClC,IAAMxB,EAAS2F,SAASnE,EAAgBxB,QAClC6B,EAAQ8D,SAASnE,EAAgBK,OACjCC,EAAS6D,SAASnE,EAAgBM,QAcxC,GAVsC,WAAlCN,EAAgBE,gBAClB8D,EAAgBvH,KAAK,KAAM+B,GAC3BwF,EAAgBvH,KAAK,KAAM+B,GAC3BwF,EAAgBvH,KAAK,QAAS,EAAI+B,GAClCwF,EAAgBvH,KAAK,SAAU,EAAI+B,GACnCwF,EAAgBvH,KAAK,KAAM+B,GAC3BwF,EAAgBvH,KAAK,KAAM+B,IAIS,SAAlCwB,EAAgBE,gBAClB8D,EAAgBvH,KAAK,KAAM,GAAM4D,GACjC2D,EAAgBvH,KAAK,KAAM,GAAM6D,GACjC0D,EAAgBvH,KAAK,QAAS4D,GAC9B2D,EAAgBvH,KAAK,SAAU6D,GAC3BN,EAAgBoE,eAAe,CACjC,IAAMC,EAAMrE,EAAgBoE,cAAc1Y,MAAM,KAChDsY,EAAgBvH,KAAK,KAAMD,WAAW6H,EAAI,KAC1CL,EAAgBvH,KAAK,KAAMD,WAAW6H,EAAI,KAKR,YAAlCrE,EAAgBE,gBAClB8D,EAAgBvH,KAAK,KAAM,GAAM4D,GACjC2D,EAAgBvH,KAAK,KAAM,GAAM6D,GACjC0D,EAAgBvH,KAAK,QAAS4D,GAC9B2D,EAAgBvH,KAAK,SAAU6D,GAC/B0D,EAAgBvH,KAAK,KAAM4D,GAC3B2D,EAAgBvH,KAAK,KAAM6D,KArhB7BtX,KAAKsb,UAAY,IAAI1H,EACrB5T,KAAKia,uBAAyBtC,EAAM4D,sB,6DAGrBC,EAAgBxE,EAAiBpJ,GAIhD,IAAMqG,EAAiBuH,EAAe5C,OAAO,QACvC6C,EAAczE,EAAgBC,MACpCjX,KAAKkb,gBAAgBjH,EAAgBwH,GACrCzb,KAAK+a,gBAAgB9G,EAAgBwH,GACrC,IAAMC,EAAc1b,KAAKmY,gBACvBqD,EACA5N,EAAK1C,cACL8L,GAYF,OATAhX,KAAKyY,uBACH+C,EACAvH,EACAyH,EACA1E,EACApJ,GAIK,CAAEqG,eAAgBA,EAAgB0H,cAAeD,K,iCAG/CF,EAAgBxE,EAAiBpJ,GAI1C,IAAMqG,EAAiBuH,EAAe5C,OAAO,QACvC6C,EAAczE,EAAgBC,MACpCjX,KAAKkb,gBAAgBjH,EAAgBwH,GACrCzb,KAAK+a,gBAAgB9G,EAAgBwH,GACrC,IAAMC,EAAc1b,KAAKmY,gBACvBqD,EACA5N,EAAK8N,cACL1E,GAYF,OATAhX,KAAKyY,uBACH+C,EACAvH,EACAyH,EACA1E,EACApJ,GAIK,CAAEqG,eAAgBA,EAAgB0H,cAAeD,K,iCAIxDF,EACAI,EACAC,EACA7E,EACAjK,GAEA,IAAM+O,EAAgB9b,KAAK+b,iBACzBP,EACAxE,GAGE/C,EAAiB,KACjB0H,EAAgB,KAkBpB,GAhBI3E,EAAgBsB,QAAQ0D,eAC1Bhc,KAAKic,gBACHT,EACAK,EACA,aAAe9O,EAAKxM,KACpByW,EAAgBC,MAAMiF,WAGtBlF,EAAgBsB,QAAQ6D,eAC1Bnc,KAAKoc,gBACHZ,EACAK,EACA,aAAe9O,EAAKxM,KACpByW,EAAgBC,MAAMoF,WAGtBrF,EAAgBsB,QAAQgE,iBAAkB,CAC5C,IACMC,EAAoBvc,KAAKwc,sCAC7BZ,EAFqB,KAIrB5E,EAAgBC,MAAMqD,aACtBvN,GAEFkH,EAAiBsI,EAAkBtI,eACnC0H,EAAgBY,EAAkBb,YAGpC,MAAO,CACLI,cAAeA,EACf7H,eAAgBA,EAChB0H,cAAeA,K,4DAKjBC,EACAJ,EACAzE,EACAhK,GAGAyO,EAAiBI,EAAkBhD,OAAO,KAC1C,IAAM6D,EACJ,iBACA1P,EAAK2P,WAAWnc,KAChB,IACAwM,EAAKxM,KACL,IACAwM,EAAK4P,WAAWpc,KAClBib,EAAe5N,OAAOrN,GAAKkc,EAG3B,IAAMG,EAAU,CACdvI,EAAGtH,EAAKsH,EACRC,EAAGvH,EAAKuH,EACRuI,KAAMJ,EACNK,IAAK/P,EACLgQ,UAAWvB,GAEbA,EAAe5N,OAAOoP,SAAWJ,EACjCA,EAAQrc,GAAK,WACX,OAAOP,KAAK6c,MAEdD,EAAQzI,wBAA0B,WAChCnU,KAAK+c,UAAUtJ,KACb,YACA,aAAezT,KAAKqU,EAAI,IAAMrU,KAAKsU,EAAI,MAG3CsI,EAAQK,YAAc,SAAS5I,EAAGC,GAChCtU,KAAKqU,EAAIA,EACTrU,KAAKsU,EAAIA,GAEX,IAAM4I,EAAWld,KAAKmd,WAAW3B,EAAgBzE,EAAKhK,GACtD,MAAO,CACLkH,eAAgBiJ,EAASjJ,eACzByH,YAAawB,EAASxB,e,uCAITtD,EAAOM,GACtB,IAAM0E,EAAWhF,EAAMQ,OAAO,QAG9B,OAFA5Y,KAAK2a,mBAAmByC,EAAU1E,EAAOzB,MAAMlK,KAAM,QACrDqQ,EAASnG,MAAM,OAAQ,QAChBmG,I,sCAGOC,EAAQC,EAAW5c,EAAYqW,GAC7C/W,KAAKud,qBAAqBF,EAAQC,EAAW5c,EAAYqW,EAAK,gB,sCAEhDsG,EAAQC,EAAW5c,EAAYqW,GAC7C/W,KAAKud,qBACHF,EACAC,EACA5c,EACAqW,EACA,kB,2CAIiBsG,EAAQC,EAAW5c,EAAYqW,EAAKyG,GACvD,IAAMpG,EAAQ5D,WAAWuD,EAAI0G,aAMvBC,GALc,GAATtG,EAKY,KAJH,GAATA,EAIuB,IAHf,GAARA,EAGkC,IAF1B,GAARA,EAGL8E,EAAYoB,EACf1E,OAAO,UAEPnF,KAAK,KAAM/S,GACX+S,KAAK,UAAWiK,GAChBjK,KAAK,cAAuB,GAAR2D,GACpB3D,KAAK,eAAwB,GAAR2D,GAErB3D,KAAK,SAAU,QAElB4J,EAAO5J,KAAK+J,EAAW,QAAU9c,EAAa,KAC9C,IAAMuT,EAAiBiI,EAAUtD,OAAO,QACxC,GAA0B,aAAtB7B,EAAIG,cAA8B,CACpC,IAAMyG,GAAO,GAAKvG,EACZwG,EAAM,EAAIxG,EACVyG,GAAO,GAAKzG,EACZ0G,GAAO,EAAI1G,EACjBnD,EAAeR,KACb,IACA,SAAWkK,EAAM,IAAMC,EAAM,IAAMC,EAAM,IAAMC,EAA/C,QAGJ,GAA0B,YAAtB/G,EAAIG,cAA6B,CACnC,IACM6G,GAAM,EAAI3G,EACV4G,EAAK,EAAI5G,EACT6G,EACJ,MAGAF,EACA,IACAC,EALA,QAWAA,EACA,IACAD,EAbA,QAmBAA,EACA,IACAC,EArBA,KAyBF/J,EAAeR,KAAK,IAAKwK,GAG3BhK,EAAegD,MAAM,SAAUF,EAAImH,aACnCjK,EAAegD,MAAM,eAAgBF,EAAIoH,aACzClK,EAAegD,MAAM,OAAQF,EAAIqH,WACT,UAApBrH,EAAIsH,cACkB,WAApBtH,EAAIsH,aACNpK,EAAegD,MAAM,mBAAoB,GAEnB,WAApBF,EAAIsH,aACNpK,EAAegD,MAAM,mBAAoB,M,yCAK5BlK,EAAM+K,EAAM9T,EAAKsI,EAAKgS,EAAUC,GAMjD,GAJiB,SAAbD,GAAoC,cAAbA,IACzBC,GAAQ,IAGI,IAAVA,EAAiB,CACnB,IAAMC,EAAgBxe,KAAKsb,UAAUhF,0BACnCtS,EACAsI,EACA,GAEFwL,EAAKrE,KAAK,IAAKzT,KAAK4X,qBAAqB4G,QACpC,CACL,IAAMA,EAAgBxe,KAAKsb,UAAUzH,sCACnC7P,EACAsI,EACAS,EACA,GAEe,SAAbuR,EACFxG,EAAKrE,KAAK,IAAKzT,KAAKiY,mBAAmBuG,IAEvC1G,EAAKrE,KAAK,IAAKzT,KAAK+X,oBAAoByG,O,6CAKvBzR,EAAMwG,EAAOvP,EAAKsI,EAAKgS,EAAUC,GAItD,GAHiB,SAAbD,GAAoC,cAAbA,IACzBC,GAAQ,IAENA,GAGAhL,EAAO,CACT,IAAMkL,EAAclL,EAAM3F,OAAO8Q,WACjC,GAAID,IACY,IAAVF,EAAiB,CACnB,IAAMI,EAAc3e,KAAKsb,UAAUsD,mBAAmB5a,EAAKsI,EAAK,GAChEuL,SAAU4G,GACPvK,OAAO,GACP+I,YAAY0B,EAAYpI,GAAIoI,EAAYnI,IAC3CqB,SAAU4G,GACPvK,OAAO,GACPC,8B,gCA2KDmJ,EAAWjF,EAAMtB,GACzB,IAAM8H,EAAuBvB,EAAU1E,OAAO,QAAQP,KAAKA,GAO3D,OAJAwG,EAAqB5H,MAAM,cAAeF,EAAI+H,YAC9CD,EAAqB5H,MAAM,YAAaF,EAAI0C,UAC5CoF,EAAqB5H,MAAM,OAAQF,EAAIgI,WACvCF,EAAqB5H,MAAM,iBAAkB,QACtC4H,I,uCAmEQxG,EAAMyG,EAAYrF,GACjC,IAAM/U,EAAImT,SAAU,QAAQe,OAAO,QACnClU,EAAE+O,KAAK,KAAM,cACb/O,EAAE+O,KACA,QACA,kEACEqL,EACA,eACArF,GAGJ/U,EAAE2T,KAAKA,GACP,IAAMe,EAAI4F,SAASC,eAAe,cAAcC,YAEhD,OADAxa,EAAEya,SACK/F,I,+BAGAjU,EAAOuT,EAAQrB,GAKtB,IAJA,IACI+H,EACAC,EACAC,EAHAC,EAAgBpa,KAKlBia,EAAYpf,KAAKwf,iBACfD,EACA7G,EAAOoG,WACPpG,EAAOe,YAEQpC,KAGjBgI,EAAQD,EAAY/H,EACpBiI,EAAyBxK,KAAK2K,MAAMF,EAAc1c,OAASwc,GACvDE,EAAc1c,SAAWyc,IAG7BC,EAAgBA,EAAcG,UAAU,EAAGJ,GAE7C,OAAIna,EAAMtC,OAAS0c,EAAc1c,OACxBsC,EAAMua,UAAU,EAAGH,EAAc1c,OAAS,GAAK,MAEjDsC,M,KCxkBUwa,E,WACnB,aAAe,IAAD,gCAwCd3I,gBAAkB,SAAA4I,GAChB,IAAKA,EACH,OAAO,EAAKC,kBAGd,EAAKA,kBAAoBC,KAAKC,MAAMD,KAAKE,UAAUJ,KA5CnD5f,KAAK6c,UAAOxZ,EACZrD,KAAKkL,mBAAgB7H,EACrBrD,KAAK6f,uBAAoBxc,EACzBrD,KAAKigB,iBAAc5c,EAEnBrD,KAAKkgB,WAAY,EAGjBlgB,KAAK+c,eAAY1Z,E,oDAGX8c,GACN,IAAK1c,UAAUZ,OACb,OAAO7C,KAAKkgB,UAEdlgB,KAAKkgB,UAAYC,I,yBAGhB5f,GACD,IAAKkD,UAAUZ,OACb,OAAO7C,KAAK6c,KAEd7c,KAAK6c,KAAOtc,I,gCAGJ6f,GACR,IAAK3c,UAAUZ,OACb,OAAO7C,KAAKigB,YAEdjgB,KAAKigB,YAAcG,I,kCAGTC,GACV,IAAK5c,UAAUZ,OACb,OAAO7C,KAAKkL,cAEdlL,KAAKkL,cAAgBmV,I,+BAarBzgB,QAAQC,IAAI,kC,KCnDKygB,E,kDACnB,aAAe,IAAD,8BACZ,gBASFC,gBAAkB,SAAAxT,GAChB,EAAKyT,cAAc7e,KAAKoL,IAXZ,EAad8E,gBAAkB,SAAA9E,GAChB,EAAK0T,cAAc9e,KAAKoL,IAdZ,EAiBdkQ,YAAc,SAAC5I,EAAGC,GAChB,EAAKD,EAAIA,EACT,EAAKC,EAAIA,GAnBG,EA6BdH,wBAA0B,WACpB,EAAK4I,WACP,EAAKA,UAAUtJ,KAAK,YAAa,aAAe,EAAKY,EAAI,IAAM,EAAKC,EAAI,KAG1E,EAAKkM,cAAc1a,OAAO,EAAK2a,eAAexc,SAAQ,SAAA4K,GACpDA,EAAEsF,8BAnCQ,EAwCduM,OAAS,SAAA3D,GACP,EAAKA,UAAYA,EAGjB,IAAMR,EAAoB,EAAK6D,YAAYjD,WAAW,EAAKJ,UAAW,EAAK/F,kBAAjD,gBAC1B,EAAK/C,eAAiBsI,EAAkBtI,eACxC,EAAK0H,cAAgBY,EAAkBZ,cAQvC,EAAKxH,2BApDL,EAAKE,EAAI,EACT,EAAKC,EAAI,EAET,EAAKkM,cAAgB,GACrB,EAAKC,cAAgB,GACrB,EAAKE,gBAAkB,EAPX,E,0DAsBAnd,GACZ,IAAKC,UAAUZ,OACb,OAAO7C,KAAK2gB,gBAEd3gB,KAAK2gB,gBAAkBnd,M,GA3BgBmc,GCAtBiB,E,kDACnB,aAAe,IAAD,8BACZ,gBAsBF3D,YAAc,SAAC5I,EAAGC,GAChB,EAAKD,EAAIA,EACT,EAAKC,EAAIA,GAzBG,EAuEdH,wBAA0B,WAEpB,EAAK2H,gBAEP,EAAKsE,YAAYS,mBAAjB,eAEE,EAAK/E,cACL,EAAKY,WACL,EAAKC,WACL,EAAKlI,eACiD,UAAtD,EAAKuC,kBAAkBsB,QAAQwI,oBAGjC,EAAKV,YAAYW,uBAAjB,eAEE,EAAK9M,eACL,EAAKyI,WACL,EAAKC,WACL,EAAKlI,eACiD,UAAtD,EAAKuC,kBAAkBsB,QAAQwI,sBA1FvB,EAgGdJ,OAAS,SAAC3D,EAAWnB,EAAmBC,GACtC,EAAKkB,UAAYA,EACjB,EAAKnB,kBAAoBA,EACzB,EAAKC,eAAiBA,EAGtB,IAAMU,EAAoB,EAAK6D,YAAYY,WACzC,EAAKjE,UACL,EAAKnB,kBACL,EAAKC,eACL,EAAK7E,kBAJmB,gBAO1B,EAAK8E,cAAgBS,EAAkBT,cACvC,EAAK7H,eAAiBsI,EAAkBtI,eACxC,EAAK0H,cAAgBY,EAAkBZ,cACvC,EAAKxH,2BA9GL,EAAKE,EAAI,EACT,EAAKC,EAAI,EACT,EAAKoI,WAAa,KAClB,EAAKC,WAAa,KAClB,EAAKlI,eAAiB,aANV,E,4DASExU,GACdD,KAAKyU,eAAiBxU,I,oCAIV2N,GACZ5N,KAAK2c,WAAa/O,EAClBA,EAAK2S,gBAAgBvgB,Q,oCAET4N,GACZ5N,KAAK0c,WAAa9O,EAClBA,EAAKiE,gBAAgB7R,Q,qCASrB,MAA4B,SAAxBA,KAAKyU,gBAAqD,cAAxBzU,KAAKyU,eAEpBzU,KAAKiU,eAAeC,OAGpC,K,qCAIP,MAA4B,SAAxBlU,KAAKyU,eACA,CACL,CACExC,OAAQjS,KAAK0c,WACbhb,OAAQ1B,KAAKiU,eAAeC,OAAO,GACnCjU,KAAM,SAIgB,cAAxBD,KAAKyU,eACA,CACL,CACExC,OAAQjS,KAAK0c,WACbhb,OAAQ1B,KAAKiU,eAAeC,OAAO,GACnCjU,KAAM,UAER,CACEgS,OAAQjS,KAAKiU,eAAeC,OAAO,GACnCxS,OAAQ1B,KAAK2c,WACb1c,KAAM,WAKL,CACL,CACEgS,OAAQjS,KAAK0c,WACbhb,OAAQ1B,KAAK2c,WACb1c,KAAM,e,GAnE6B0f,GCFtBsB,GACnB,aAAe,IAAD,gCA4Fd7G,sBAAwB,SAAAna,GACtB,OAAK,EAAKihB,sBAAsBnd,eAAe9D,GAIxC,EAAKihB,sBAAsBjhB,IAHhCL,QAAQC,IAAI,+BAAiCI,GACtC,EAAKkhB,iBA/FF,KAoGdjH,sBAAwB,SAAAja,GACtB,OAAK,EAAKihB,sBAAsBnd,eAAe9D,GAKxC,EAAKihB,sBAAsBjhB,IAJhCL,QAAQC,IAAI,+BAAiCI,GAEtC,EAAKmhB,iBAvGdphB,KAAKkhB,sBAAwB,GAE7BlhB,KAAKmhB,eAAiB,CACpBlK,MAAO,CACLC,cAAe,SACf+D,QAAS,UACToG,eAAe,EACflD,YAAa,MACbE,YAAa,QACbH,YAAa,OACb1I,OAAQ,GACR6B,MAAO,IACPC,OAAQ,IAEVkB,UAAW,CACTsG,WAAY,6BACZC,UAAW,UACXtF,SAAU,QAGZnB,QAAS,CACPH,iBAAiB,EACjBc,sBAAsB,EACtBJ,cAAc,EACdF,wBAAwB,EACxB2I,qBAAqB,EACrBC,gBAAiB,EACjB9G,cAAe,SACfF,cAAe,WAInBva,KAAKohB,eAAiB,CACpBnK,MAAO,CACLlK,KAAM,CACJyU,UAAW,SACXC,UAAW,MACXC,UAAW,WAEbxF,UAAW,CACThF,cAAe,WACfuG,YAAa,EACbU,YAAa,MACbE,YAAa,QACbH,YAAa,UACbE,UAAW,WAEb/B,UAAW,CACTnF,cAAe,UACfuG,YAAa,EACbU,YAAa,MACbE,YAAa,QACbH,YAAa,UACbE,UAAW,WAEb9D,aAAc,CACZrD,MAAO,CACLC,cAAe,OACf+D,QAAS,UACTG,cAAe,MACfuG,4BAA6B,OAC7BC,gBAAiB,IACjBP,cAAe,QACf7L,OAAQ,GACR6B,MAAO,IACPC,OAAQ,IAEVkB,UAAW,CACTsG,WAAY,6BACZC,UAAW,UACXtF,SAAU,QAEZnB,QAAS,CACPH,iBAAiB,EACjBU,cAAc,EACdF,wBAAwB,EACxB2I,qBAAqB,EACrBC,gBAAiB,EACjB9G,cAAe,SACfF,cAAe,YAIrBjC,QAAS,CACPgE,kBAAkB,EAClBN,eAAe,EACfG,eAAe,EACf2E,mBAAoB,UCtFPe,G,kDACnB,WAAYlK,GAAQ,IAAD,8BACjB,cAAMA,IASRmK,0BAA4B,SAAAC,GACtBA,EACF,EAAKC,YAEL,EAAKC,eAdU,EA6DnBC,qBAAuB,WACrB,EAAKC,cAAcle,SAAQ,SAAA2J,GACzBA,EAAKuG,6BAEP,EAAKiO,cAAcne,SAAQ,SAAA8I,GACzBA,EAAKoH,8BAhEP,EAAKkO,WAAQhf,EACb,EAAKif,WAAa,GAClB,EAAKC,WAAa,GAClB,EAAKC,aAAe,OACpB,EAAKC,cAAgB,IACrB,EAAKC,WAAa,GAPD,E,4DAkBHpgB,GACdtC,KAAKyiB,cAAgBngB,EACjBtC,KAAKqiB,OACPriB,KAAKqiB,MAAMG,aAAalgB,K,oCAItBtC,KAAKqiB,OACPriB,KAAKqiB,MAAMM,W,kCAIT3iB,KAAKqiB,OACPriB,KAAKqiB,MAAMO,S,oCAIT5iB,KAAKqiB,QACoB,IAAvBriB,KAAKqiB,MAAMQ,QACb7iB,KAAKqiB,MAAMM,SAEX3iB,KAAKqiB,MAAMO,U,+CAMf5iB,KAAK8iB,mBACL9iB,KAAKmiB,cAAgBniB,KAAK2X,MAAM5J,MAChC/N,KAAKoiB,cAAgBpiB,KAAK2X,MAAMzJ,MAC5BlO,KAAKqiB,OACPriB,KAAKqiB,MAAMO,OAEb5iB,KAAK+iB,sBACL/iB,KAAKqiB,MAAMW,U,yCAIX,IAAMC,EAAKjjB,KAAK2X,MAAMuL,QAAQtV,OAAOkL,wBACrC9Y,KAAK0iB,WAAW,GAAKO,EAAG5L,MACxBrX,KAAK0iB,WAAW,GAAKO,EAAG3L,S,4CAYH,IAQjBxU,EARgB,OAmBpB,SAjBmBO,IAAfrD,KAAKqiB,QACPriB,KAAKqiB,MAAQxK,SAAUwK,SAGzBriB,KAAKsiB,WAAa,GAClBtiB,KAAKuiB,WAAa,GAYbzf,EAAI,EAAGA,EAAI9C,KAAKmiB,cAActf,OAAQC,IACrC9C,KAAKmiB,cAAcrf,GAAGqd,WACxBngB,KAAKuiB,WAAW5gB,KAAK3B,KAAKmiB,cAAcrf,IAI5C,IAAKA,EAAI,EAAGA,EAAI9C,KAAKoiB,cAAcvf,OAAQC,IACrC9C,KAAKoiB,cAActf,GAAGqd,YACxBngB,KAAKsiB,WAAatiB,KAAKsiB,WAAWxc,OAChC9F,KAAKoiB,cAActf,GAAGqgB,gBAExBnjB,KAAKuiB,WAAaviB,KAAKuiB,WAAWzc,OAChC9F,KAAKoiB,cAActf,GAAGsgB,iBAK5BpjB,KAAKqiB,MAAMtU,MAAM/N,KAAKuiB,YACtBviB,KAAKqiB,MAAMnU,MAAMlO,KAAKsiB,YAGtBtiB,KAAKuiB,WAAWte,SAAQ,SAAA2J,GACtBA,EAAKyV,uBAAyB,KAGhCrjB,KAAKsiB,WAAWre,SAAQ,SAAA8I,GACtBA,EAAKsW,uBAAyB,KAGhCrjB,KAAKyiB,cAAgB,IAErBziB,KAAKqiB,MACFiB,QAAQ,KACRd,aAAaxiB,KAAKujB,qBAClBC,aAAa,GACbC,KAAK,CArDKzjB,KAqDC0iB,WAAW,GArDZ1iB,KAqDqB0iB,WAAW,KAC1CgB,QAAQ,MAEX1jB,KAAKqiB,MAAMsB,GAAG,OAAQ3jB,KAAKkiB,wB,0CAGTnV,GAClB,MAAkB,WAAdA,EAAK9M,KACA,IAES,SAAd8M,EAAK9M,KACA,IAES,WAAd8M,EAAK9M,KACA,SADT,M,IC5IF,WAAY0X,GAAQ,oBAClB3X,KAAK2X,MAAQA,EAEb3X,KAAKmiB,cAAgBxK,EAAM5J,MAC3B/N,KAAKoiB,cAAgBzK,EAAMzJ,SCCV0V,G,WACnB,aAAe,IAAD,gCAyBdC,sBAAwB,SAAAC,GACtB,EAAKC,QAAUD,GA1BH,KA6BdE,aAAe,SAAAC,GACb,EAAK7D,UAAY6D,GA9BL,KAiCdC,SAAW,SAAAle,GACT,EAAKA,MAAQA,GAlCD,KAqCdme,mBAAqB,SAAAzL,GACnB,EAAK1B,gBAAkB0B,GAtCX,KAyCd6C,oBAAsB,WACpB,OAAO,EAAKvE,iBA1CA,KA6CdoN,sBAAwB,SAAAC,GACtB,EAAKC,mBAAqBD,GA9Cd,KA6EdE,6BAA+B,WACxB,EAAKR,SAKV,EAAKS,4BAEL,EAAKC,8BANH7kB,QAAQoB,MAAM,gCA/EJ,KAwFdwjB,0BAA4B,WACtB,EAAKE,YACP,EAAKA,UAAUC,UAAU,QAAQxF,SACjC,EAAKuF,UAAUC,UAAU,KAAKxF,SAC9B,EAAKuF,UAAUvF,UAEb,EAAK+D,SACP,EAAKA,QAAQ/D,SAGXtH,SAAU,IAAM,EAAKkM,QAAU,aAEjClM,SAAU,IAAM,EAAKkM,QAAU,YAAY5E,UApGjC,KAwGdsF,2BAA6B,WAC3B,IAAMG,EAAU/M,SAAU,IAAM,EAAKkM,SACrC,EAAKb,QAAU0B,EAAQhM,OAAO,OAC9B,EAAKsK,QAAQtV,OAAOrN,GAAK,EAAKwjB,QAAU,WACxC,EAAKb,QAAQjM,MAAM,aAAc,WAGjC,EAAK4N,4BACL,IAAMC,EAAiBF,EAAQhX,OAAOkL,wBACtC,EAAKoK,QAAQjM,MAAM,QAAS6N,EAAezN,MAAQ,MACnD,EAAK6L,QAAQjM,MAAM,SAAU6N,EAAexN,OAAS,MAIrD,EAAKoN,UAAY,EAAKxB,QAAQtK,OAAO,KACrC,EAAK8L,UAAUzN,MAAM,WAAY,UAEjC,EAAK8N,iBAzHO,KA6HdA,cAAgB,WACd,IAAMC,EAAO,EAAKN,UACZO,EAAkB,EAAKlB,QAC7B,EAAKmB,YAAYjhB,SAAQ,SAASkhB,GAClB,WAAVA,EACsBH,EAAKpM,OAAO,QACpBhL,OAAOrN,GAAK0kB,EAAkB,IAAME,EAE7BH,EAAKpM,OAAO,KACpBhL,OAAOrN,GAAK0kB,EAAkB,IAAME,MAtI3C,KA2IdN,0BAA4B,WAC1B,IAAMD,EAAU/M,SAAU,IAAM,EAAKkM,SACrC,GACEa,EAAQ3N,MAAM,iBACd2N,EAAQ3N,MAAM,kBACd2N,EAAQ3N,MAAM,gBACd2N,EAAQ3N,MAAM,kBACd,CACA,IAAImO,EAAU,GAEZR,EAAQ3N,MAAM,iBACqB,MAAlC2N,EAAQ3N,MAAM,iBACqB,QAAlC2N,EAAQ3N,MAAM,iBAEhBmO,KAGAR,EAAQ3N,MAAM,kBACsB,MAAnC2N,EAAQ3N,MAAM,kBACsB,QAAnC2N,EAAQ3N,MAAM,kBAEhBmO,KAIAR,EAAQ3N,MAAM,gBACoB,MAAjC2N,EAAQ3N,MAAM,gBACoB,QAAjC2N,EAAQ3N,MAAM,gBAEhBmO,KAGAR,EAAQ3N,MAAM,mBACuB,MAApC2N,EAAQ3N,MAAM,mBACuB,QAApC2N,EAAQ3N,MAAM,mBAEhBmO,IAEc,IAAZA,GACFxlB,QAAQoB,MACN,uFAnLM,KA0LdqkB,oBAAsB,SAAAzX,GACpB,IAAM0X,EAAgB,IAAIhF,EAC1BgF,EAAc/kB,GAAGqN,EAAKgC,sBACtB0V,EAAc5J,YAAY9N,EAAK1C,eAC/Boa,EAActO,gBACZ,EAAKA,gBAAgBoD,sBAAsBxM,EAAKf,aAElDyY,EAAcpM,iBAAmBtL,EACjC0X,EAAclF,UAAU,EAAKA,WAE7B,EAAKrS,MAAMpM,KAAK2jB,GAChB,EAAKzX,QAAQyX,EAAc/kB,MAAQ+kB,GArMvB,KAwMdC,oBAAsB,SAAAxY,GACpB,IAAMyY,EAAgB,IAAI5E,EAuB1B,GAtBA4E,EAAcjlB,GAAGwM,EAAK6C,sBACtB4V,EAAc9J,YAAY3O,EAAK7B,eAEP,cAApB6B,EAAK4C,WACP6V,EAAcxO,gBACZ,EAAKA,gBAAgBkD,sBAAsBnN,EAAK4C,aAGlD6V,EAAcxO,gBACZ,EAAKA,gBAAgBkD,sBAAsBnN,EAAK8C,cAGpD2V,EAAcpF,UAAU,EAAKA,WAG7BoF,EAAcC,cACZ,EAAK5X,QAAQd,EAAK6E,SAAShC,uBAE7B4V,EAAcE,cACZ,EAAK7X,QAAQd,EAAK2D,SAASd,uBAI3B,EAAK/B,QAAQd,EAAK6E,SAAShC,wBAC3B,EAAK/B,QAAQd,EAAK2D,SAASd,sBAC3B,CACA4V,EAAcG,gBAAgB,QAC9B,IAAMle,EAAO,EAAKoG,QAAQd,EAAK6E,SAAShC,sBACxCnI,EAAKkN,cAAclN,EAAKkN,gBAAkB,GAE5C,EAAKzG,MAAMvM,KAAK6jB,GAChB,EAAKvX,QAAQuX,EAAcjlB,MAAQilB,GAzOvB,KA4OdI,qBAAuB,SAAA7Y,GACrB,GAA4B,SAAxBA,EAAK0H,eAAT,CAGA,IAAMzQ,EAAM+I,EAAK2P,WACXpQ,EAAMS,EAAK4P,WAIbkJ,GAAc,EAClB7hB,EAAIyc,cAAcxc,SAAQ,SAAA6hB,GACG,SAAvBA,EAAIrR,gBAA6BqR,EAAIvlB,OAASwM,EAAKxM,MAGnDulB,EAAInJ,WAAWpc,OAAS+L,EAAI/L,OAC9BslB,GAAc,MAIlBvZ,EAAImU,cAAcxc,SAAQ,SAAA6hB,GACG,SAAvBA,EAAIrR,gBAA6BqR,EAAIvlB,OAASwM,EAAKxM,MAGnDulB,EAAInJ,WAAWpc,OAASyD,EAAIzD,OAC9BslB,GAAc,MAGdA,GACF9Y,EAAK4Y,gBAAgB,cAIiC,IAApD5Y,EAAKiK,kBAAkBsB,QAAQgE,kBACjCvP,EAAK4Y,gBAAgB,gBA7QX,KAiRdI,wBAA0B,WAExB,EAAKC,mCACL,EAAKC,mCAGD,EAAK3B,mBACP,EAAKA,mBAAmB4B,kBAAkB,GAE1CtmB,QAAQC,IAAI,yDAGV,EAAKsmB,cACP,EAAKA,cAAcC,yBAEnBxmB,QAAQC,IAAI,qDAhSF,KAoSdomB,iCAAmC,WACjC,IAAMI,EAAgBxO,SAAU,IAAM,EAAKkM,QAAU,UAC/CnI,EAAoB/D,SAAU,IAAM,EAAKkM,QAAU,eACnDlI,EAAiBhE,SAAU,IAAM,EAAKkM,QAAU,WAEtD,EAAK3B,cAAgB,EAAKkE,0BACxBD,EACA,EAAKnY,MACL,YAMF,EAAKkU,cAAcmE,MAAK,SAAS9e,GAC3BA,EAAK0Y,UACP1Y,EAAKiZ,OAAO7I,SAAU7X,MAAO4b,EAAmBC,GAEhDhE,SAAU7X,MAAMmf,aAtTR,KA2Td6G,iCAAmC,WACjC,IAAMQ,EAAgB3O,SAAU,IAAM,EAAKkM,QAAU,UACrD,EAAK5B,cAAgB,EAAKmE,0BACxBE,EACA,EAAKzY,MACL,YAIF,EAAKoU,cAAcoE,MAAK,SAAS9e,GAC3BA,EAAK0Y,UACP1Y,EAAKiZ,OAAO7I,SAAU7X,OAEtB6X,SAAU7X,MAAMmf,aAvUpBnf,KAAKymB,WAAa,0BAElBzmB,KAAKgG,MAAQ,KACbhG,KAAKmmB,cAAgB,KACrBnmB,KAAKgX,gBAAkB,KACvBhX,KAAKskB,mBAAqB,KAC1BtkB,KAAKogB,UAAY,KAEjBpgB,KAAK+N,MAAQ,GACb/N,KAAKkO,MAAQ,GAEblO,KAAK6N,QAAU,GACf7N,KAAKiO,QAAU,GAEfjO,KAAK+jB,QAAU,KACf/jB,KAAKkjB,QAAU,KACfljB,KAAK0kB,UAAY,KAGjB1kB,KAAKklB,YAAc,CAAC,SAAU,QAAS,aAAc,S,sEA8BhDllB,KAAKgG,OACRpG,QAAQoB,MAAM,mBAEXhB,KAAKgX,kBAERpX,QAAQ8mB,KACN,wEAEF1mB,KAAKgX,gBAAkB,IAAIiK,IAExBjhB,KAAKogB,YAERxgB,QAAQ8mB,KACN,kEAEF1mB,KAAKogB,UAAY,IAAI1I,EAAU1X,OAG5BA,KAAKmmB,gBAERvmB,QAAQ8mB,KACN,2FAEF1mB,KAAKmmB,cAAgB,IAAItE,GAAY7hB,S,gDAoQfsd,EAAWpJ,EAAMyS,GACzC,OAAOrJ,EACJqH,UAAU,IAAMgC,GAChBzS,KAAKA,GACL0S,QACAhO,OAAO,KACPiO,QAAQF,GAAW,GACnBlT,KAAK,MAAM,SAAS/O,GACnB,OAAOA,EAAEnE,Y,KC1VIumB,GACnB,WAAYnP,GAAQ,IAAD,gCAQnBoP,uBAAyB,WACvB,GAAK,EAAKC,YAAV,CAKA,IAAMC,EAAO,EAGb,EAAKC,KAAOrP,WACTqP,OACAC,SAAS,KACTC,YAAY,CAAC,IAAM,IACnBzD,GAAG,OAAQ,EAAK0D,QAChB1D,GAAG,aAAa,WACX9L,QAASyP,aAAezP,QAASyP,YAAYC,SAA4C,IAAjC1P,QAASyP,YAAYC,SAC/EN,EAAKD,YAAY9D,QAAQjM,MAAM,SAAU,iBAG5C0M,GAAG,WAAW,WACbsD,EAAKD,YAAY9D,QAAQjM,MAAM,SAAU,WAG7C,EAAK+P,YAAY9D,QAAQsE,KAAK,EAAKN,MACnC,EAAKA,KAAO,EAAKA,KAAKE,YAAY,CAAC,IAAM,IACrC,EAAKJ,YAAYtC,WACnB,EAAKwC,KAAKO,MAAM,EAAKT,YAAYtC,gBAxBjC9kB,QAAQoB,MAAM,0BAVC,KAsCnBqmB,OAAS,WACP,IAAMJ,EAAO,EAEPS,EADQ,EAAKV,YACUtC,UACzBiD,GAAoB,EAMxB,GALI9P,QAASyP,aACPzP,QAASyP,YAAYM,SACvBD,GAAoB,IAGE,IAAtBA,EAA6B,CAC/B,IAAgC,IAA5B,EAAKE,mBACP,OAKF,OAHA,EAAKC,WAAajQ,QAAST,MAC3B,EAAK2Q,iBAAmBlQ,QAASmQ,eACjCN,EAAejU,KAAK,YAAa,aAAe,EAAKsU,iBAAmB,UAAY,EAAKD,WAAa,KAIxG,EAAKA,WAAajQ,QAAST,MAC3B,EAAK2Q,iBAAmBlQ,QAASmQ,UACjCN,EACGO,aACAC,MAAM,kBAAkB,WACvB,OAAO,WAELjB,EAAKY,oBAAqB,EAC1B,IAAMM,EAAKtQ,YAAa6P,EAAejU,KAAK,cAC5CwT,EAAKc,iBAAiB,GAAKI,EAAGH,UAAU,GACxCf,EAAKc,iBAAiB,GAAKI,EAAGH,UAAU,GACxCf,EAAKa,WAAaK,EAAG/Q,MAAM,OAG9BmP,KAAK,OAAO,WACXU,EAAKY,oBAAqB,KAE3BpU,KAAK,YAAa,aAAewT,EAAKc,iBAAmB,UAAYd,EAAKa,WAAa,KACvFM,KAAK,UACLjB,SAAS,MA5EZnnB,KAAKgnB,YAAcrP,EACnB3X,KAAKknB,UAAO7jB,EACZrD,KAAK+nB,iBAAmB,CAAC,EAAG,GAC5B/nB,KAAK8nB,WAAa,EAClB9nB,KAAK6nB,oBAAqB,GCNTQ,G,WACnB,WAAY1Q,GAAQ,IAAD,gCAQnB2Q,sBAAwB,WACtB,GAAK,EAAKtB,YAAV,CAOA,EAAKuB,cAAgB1Q,WAClB2Q,OACAC,QAAO,SAAS/jB,GACf,OAAOA,KAERif,GAAG,YAAa,EAAK+E,WACrB/E,GAAG,OAAQ,EAAK6E,MAChB7E,GAAG,UAAW,EAAKgF,SAGtB,IAAM1B,EAAO,EACb,EAAK2B,eAAiB,SAASlkB,GACzBuiB,EAAK4B,eACPnkB,EAAEif,GAAG,YAAasD,EAAK6B,aACvBpkB,EAAEif,GAAG,WAAYsD,EAAK8B,gBAK1B,EAAKC,eAAiB,SAAStkB,GACzBuiB,EAAKgC,cACPvkB,EAAEif,GAAG,QAASsD,EAAKiC,YAGvB,EAAKC,oBAAsB,SAASzkB,GAC9BuiB,EAAKmC,mBACP1kB,EAAEif,GAAG,QAASsD,EAAKoC,kBAKvB,IAAMtb,EAAQ,EAAKiZ,YAAYjZ,MAC3BA,EAAMlL,OAAS,GACjBkL,EAAM9J,SAAQ,SAAAyK,GACRA,EAAEqO,YACJrO,EAAEqO,UAAUyK,KAAK,EAAKe,eACtB7Z,EAAEqO,UAAUyK,KAAK,EAAKoB,gBACtBla,EAAEqO,UAAUyK,KAAK,EAAKwB,gBACtBta,EAAEqO,UAAUyK,KAAK,EAAK2B,8BA5C1BvpB,QAAQoB,MAAM,0BAVC,KAqFnB0nB,UAAY,SAAAhkB,GACVmT,QAASyP,YAAYgC,kBACrB5kB,EAAE6kB,OAAQ,EACV7kB,EAAEqY,UAAU9F,MAAM,SAAU,YAxFX,KA2FnBuR,KAAO,SAAA9jB,GACLmT,QAASyP,YAAYgC,kBACrB5kB,EAAEuY,YAAYpF,QAASxD,EAAGwD,QAASvD,GACnC5P,EAAE8kB,GAAK3R,QAASxD,EAChB3P,EAAE+kB,GAAK5R,QAASvD,EAChB5P,EAAEyP,0BAEEzP,EAAE2e,wBAA0B3e,EAAE2e,uBAAuBhB,OACvD3d,EAAE2e,uBAAuBpB,eAnGV,KAuGnB0G,QAAU,SAAAjkB,GACRA,EAAE6kB,OAAQ,EACV7kB,EAAEqY,UAAU9F,MAAM,SAAU,SAxG5BjX,KAAKgnB,YAAcrP,EACnB3X,KAAKuoB,cAAgB,KACrBvoB,KAAKipB,cAAe,EACpBjpB,KAAKopB,mBAAoB,EACzBppB,KAAK6oB,cAAe,E,wDA2DVnkB,GACIA,EAAEuP,eACVgD,MAAM,OAAQ,W,mCAGTvS,GACGA,EAAEuP,eACVgD,MAAM,OAAQvS,EAAEsS,kBAAkBC,MAAMgE,W,sCAGhCvW,GAEdmT,QAASyR,kBACTzR,QAAS6R,iBACThlB,EAAE2e,uBAAuBsG,gB,gCAEjBjlB,Q,KCjFSklB,G,WACnB,WAAYjS,GAAQ,IAAD,gCASnBkS,sBAAwB,WACtB,GAAK,EAAK7C,YAAV,CAMA,EAAKuB,cAAgB1Q,WAClB2Q,OACAC,QAAO,SAAS/jB,GACf,OAAOA,KAERif,GAAG,YAAa,EAAK+E,WACrB/E,GAAG,OAAQ,EAAK6E,MAChB7E,GAAG,UAAW,EAAKgF,SAGtB,IAAM1B,EAAO,EACb,EAAK2B,eAAiB,SAASlkB,GACzBuiB,EAAK6C,eACPplB,EAAEif,GAAG,YAAasD,EAAK8C,aACvBrlB,EAAEif,GAAG,WAAYsD,EAAK+C,gBAG1B,EAAKC,uBAAyB,SAASvlB,GACjCuiB,EAAKiD,mBACPxlB,EAAEif,GAAG,YAAasD,EAAKkD,iBACvBzlB,EAAEif,GAAG,WAAYsD,EAAKmD,oBAiB1B,IAAMlc,EAAQ,EAAK8Y,YAAY9Y,MAC3BA,EAAMrL,OAAS,GACjBqL,EAAMjK,SAAQ,SAAA4K,GACZ,GAAIA,EAAEkO,YACJlO,EAAEkO,UAAUyK,KAAK,EAAKoB,gBAElB/Z,EAAEoF,gBAAgB,CACpB,IAAMyK,EAAa7P,EAAEoF,eAAerG,OAAO8Q,WAC3C,GAAIA,EAAY,CACd,IAAM2L,EAAYxS,SAAU6G,GACxB2L,IACFA,EAAU7C,KAAK,EAAKyC,wBACpBI,EAAU7C,KAAK,EAAKe,0BAtD9B3oB,QAAQoB,MAAM,0BAXC,KAwFnBmpB,gBAAkB,SAAAzlB,GACFA,EAAEoY,IAAI7I,eACdgD,MAAM,OAAQ,QAEG,IAAnBvS,EAAE4lB,eAGN5lB,EAAE4lB,cAAe,EACjB5lB,EAAE6lB,eAAgB,EAEd7lB,EAAE8lB,mBACJ9lB,EAAE6lB,eAAgB,EAClB7lB,EAAE8lB,kBAAmB,KApGN,KAkJnB9B,UAAY,SAAAhkB,GACVmT,QAASyP,YAAYgC,kBACrB5kB,EAAE6kB,OAAQ,EACV7kB,EAAEqY,UAAU9F,MAAM,SAAU,YArJX,KAwJnBuR,KAAO,SAAA9jB,GACLmT,QAASyP,YAAYgC,kBACrB5kB,EAAEuY,YAAYpF,QAASxD,EAAGwD,QAASvD,GACnC5P,EAAE8kB,GAAK3R,QAASxD,EAChB3P,EAAE+kB,GAAK5R,QAASvD,EAChB5P,EAAEoY,IAAI3I,0BACFzP,EAAE2e,wBAA0B3e,EAAE2e,uBAAuBhB,OACvD3d,EAAE2e,uBAAuBpB,eA/JV,KAmKnB0G,QAAU,SAAAjkB,GACRA,EAAE6kB,OAAQ,EACV7kB,EAAEqY,UAAU9F,MAAM,SAAU,SApK5BjX,KAAKgnB,YAAcrP,EACnB3X,KAAKuoB,cAAgB,KACrBvoB,KAAKipB,cAAe,EACpBjpB,KAAKopB,mBAAoB,EACzBppB,KAAK8pB,cAAe,EACpB9pB,KAAKkqB,kBAAmB,E,wDAwEdxlB,GACIA,EAAEoX,cACV7E,MAAM,SAAU,S,mCAGXvS,GACGA,EAAEoX,cACV7E,MAAM,SAAUvS,EAAEsS,kBAAkBC,MAAMlK,KAAK2U,a,uCA4CtChd,GACDA,EAAEoY,IAAI7I,eACdgD,MAAM,OAAQvS,EAAEoY,IAAI9F,kBAAkBC,MAAMqD,aAAaW,SAClC,cAAzBvW,EAAEoY,IAAIrI,gBACRoD,YAAa,yBAAyBsH,SAExCza,EAAE4lB,cAAe,I,sCAGH5lB,M,gCAGNA,Q,KC5IS+lB,G,WACnB,aAAe,oBACbzqB,KAAK0qB,kBAAoB,KACzB1qB,KAAK2qB,iBAAmB,KACxB3qB,KAAK4qB,iBAAmB,K,8DAGRjT,GAEX3X,KAAK0qB,oBACR9qB,QAAQ8mB,KAAK,gEACb1mB,KAAK0qB,kBAAoB,IAAI5D,GAAkBnP,IAEjD3X,KAAK0qB,kBAAkB3D,yBAGlB/mB,KAAK2qB,mBACR/qB,QAAQ8mB,KAAK,+DACb1mB,KAAK2qB,iBAAmB,IAAItC,GAAiB1Q,IAE/C3X,KAAK2qB,iBAAiBrC,wBAGjBtoB,KAAK4qB,mBACRhrB,QAAQ8mB,KAAK,+DACb1mB,KAAK4qB,iBAAmB,IAAIhB,GAAiBjS,IAE/C3X,KAAK4qB,iBAAiBf,4B,KC7BLgB,G,kDACnB,aAAe,IAAD,8BACZ,gBACKpE,WAAa,sBAElB,EAAKN,cAAgB,KACrB,EAAKnP,gBAAkB,KACvB,EAAKsN,mBAAqB,IAAImG,GANlB,E,sEAWa,IAAD,OACxB,gFAEAzqB,KAAKgG,MAAM+H,MAAM9J,SAAQ,SAAA2J,GACvB,EAAKyX,oBAAoBzX,MAI3B5N,KAAK+N,MAAM,GAAGkP,YAAY,GAAI,KAC9Bjd,KAAK+N,MAAM,GAAGkP,YAAY,IAAK,KAE/Bjd,KAAKgG,MAAMkI,MAAMjK,SAAQ,SAAA8I,GACvB,EAAKwY,oBAAoBxY,MAG3B,IAAIjK,EAAI,EACR9C,KAAKkO,MAAMjK,SAAQ,SAAA8I,GACjB,EAAK6Y,qBAAqB7Y,GAC1BA,EAAKkQ,YAAY,IAAS,GAAJna,GACtBA,W,GA/BoC8gB,ICFrB3C,GACnB,aAAe,IAAD,gCAoQd7G,sBAAwB,SAAAna,GACtB,OAAK,EAAKihB,sBAAsBnT,MAAMhK,eAAe9D,GAI9C,EAAKihB,sBAAsBnT,MAAM9N,IAHtCL,QAAQC,IAAI,+BAAiCI,GACtC,EAAKkhB,iBAvQF,KA4QdjH,sBAAwB,SAAAja,GAEtB,OAAK,EAAKihB,sBAAsBhT,MAAMnK,eAAe9D,GAK9C,EAAKihB,sBAAsBhT,MAAMjO,IAJtCL,QAAQC,IAAI,+BAAiCI,GAEtC,EAAKmhB,iBAhRdphB,KAAKkhB,sBAAwB,CAC3BnT,MAAO,CACL,YAAa,CACXkJ,MAAO,CACLC,cAAe,SACf+D,QAAS,UACToG,eAAe,EACflD,YAAa,MACbE,YAAa,QACbH,YAAa,OACb1I,OAAQ,GACR6B,MAAO,IACPC,OAAQ,IAEVkB,UAAW,CACTsG,WAAY,6BACZC,UAAW,OACXtF,SAAU,QAGZnB,QAAS,CACPH,iBAAiB,EACjBc,sBAAsB,EACtBJ,cAAc,EACdF,wBAAwB,EACxB2I,qBAAqB,EACrBC,gBAAiB,EACjB9G,cAAe,SACfF,cAAe,WAInBuQ,QAAS,CACP7T,MAAO,CACLC,cAAe,OACf+D,QAAS,UACToG,eAAe,EACflD,YAAa,MACbE,YAAa,QACbH,YAAa,OACb1I,OAAQ,GACR6B,MAAO,IACPC,OAAQ,IAEVkB,UAAW,CACTsG,WAAY,6BACZC,UAAW,OACXtF,SAAU,QAGZnB,QAAS,CACPH,iBAAiB,EACjBc,sBAAsB,EACtBJ,cAAc,EACdF,wBAAwB,EACxB2I,qBAAqB,EACrBC,gBAAiB,EACjB9G,cAAe,SACfF,cAAe,YAIrBrM,MAAO,CACL,uBAAwB,CACtB+I,MAAO,CACLlK,KAAM,CACJyU,UAAW,QACXC,UAAW,MACXC,UAAW,WAEbxF,UAAW,CACThF,cAAe,WACfuG,YAAa,EACbU,YAAa,MACbE,YAAa,QACbH,YAAa,UACbE,UAAW,WAGb9D,aAAc,CACZrD,MAAO,CACLC,cAAe,OACf+D,QAAS,UACTG,cAAe,MACfuG,4BAA6B,OAC7BC,gBAAiB,IACjBP,cAAe,QACf7L,OAAQ,GACR6B,MAAO,IACPC,OAAQ,IAEVkB,UAAW,CACTsG,WAAY,6BACZC,UAAW,UACXtF,SAAU,QAEZnB,QAAS,CACPH,iBAAiB,EACjBU,cAAc,EACdF,wBAAwB,EACxB2I,qBAAqB,EACrBC,gBAAiB,EACjB9G,cAAe,SACfF,cAAe,YAIrBjC,QAAS,CACPgE,kBAAkB,EAClBN,eAAe,EACfG,eAAe,EACf2E,mBAAoB,SAIxB,qBAAsB,CACpB7J,MAAO,CACLlK,KAAM,CACJyU,UAAW,QACXC,UAAW,MACXC,UAAW,WAEbxF,UAAW,CACThF,cAAe,WACfuG,YAAa,EACbU,YAAa,MACbE,YAAa,QACbH,YAAa,UACbE,UAAW,WAGb9D,aAAc,CACZrD,MAAO,CACLC,cAAe,OACf+D,QAAS,UACTG,cAAe,MACfuG,4BAA6B,OAC7BC,gBAAiB,IACjBP,cAAe,QACf7L,OAAQ,GACR6B,MAAO,IACPC,OAAQ,IAEVkB,UAAW,CACTsG,WAAY,6BACZC,UAAW,UACXtF,SAAU,QAEZnB,QAAS,CACPH,iBAAiB,EACjBU,cAAc,EACdF,wBAAwB,EACxB2I,qBAAqB,EACrBC,gBAAiB,EACjB9G,cAAe,SACfF,cAAe,YAIrBjC,QAAS,CACPgE,kBAAkB,EAClBN,eAAe,EACfG,eAAe,EACf2E,mBAAoB,WAM5B9gB,KAAKmhB,eAAiB,CACpBlK,MAAO,CACLC,cAAe,OACf+D,QAAS,UACToG,eAAe,EACflD,YAAa,MACbE,YAAa,QACbH,YAAa,OACb1I,OAAQ,GACR6B,MAAO,IACPC,OAAQ,GACR8D,cAAe,SAEjB5C,UAAW,CACTsG,WAAY,6BACZC,UAAW,OACXtF,SAAU,QAGZnB,QAAS,CACPH,iBAAiB,EACjBc,sBAAsB,EACtBJ,cAAc,EACdF,wBAAwB,EACxB2I,qBAAqB,EACrBC,gBAAiB,EACjB9G,cAAe,SACfF,cAAe,WAInBva,KAAKohB,eAAiB,CACpBnK,MAAO,CACLlK,KAAM,CACJyU,UAAW,SACXC,UAAW,MACXC,UAAW,WAEbxF,UAAW,CACThF,cAAe,WACfuG,YAAa,EACbU,YAAa,MACbE,YAAa,QACbH,YAAa,UACbE,UAAW,WAEb/B,UAAW,CACTnF,cAAe,UACfuG,YAAa,EACbU,YAAa,MACbE,YAAa,QACbH,YAAa,UACbE,UAAW,WAEb9D,aAAc,CACZrD,MAAO,CACLC,cAAe,OACf+D,QAAS,UACTG,cAAe,MACfuG,4BAA6B,OAC7BC,gBAAiB,IACjBP,cAAe,QACf7L,OAAQ,GACR6B,MAAO,IACPC,OAAQ,IAEVkB,UAAW,CACTsG,WAAY,6BACZC,UAAW,UACXtF,SAAU,QAEZnB,QAAS,CACPH,iBAAiB,EACjBU,cAAc,EACdF,wBAAwB,EACxB2I,qBAAqB,EACrBC,gBAAiB,EACjB9G,cAAe,SACfF,cAAe,YAIrBjC,QAAS,CACPgE,kBAAkB,EAClBN,eAAe,EACfG,eAAe,EACf2E,mBAAoB,UCjQPG,GACnB,aAAe,IAAD,gCAiXd7G,sBAAwB,SAAAna,GACtB,OAAK,EAAKihB,sBAAsBnd,eAAe9D,GAIxC,EAAKihB,sBAAsBjhB,IAHhCL,QAAQC,IAAI,+BAAiCI,GACtC,EAAKkhB,iBApXF,KAyXdjH,sBAAwB,SAAAja,GACtB,OAAK,EAAKihB,sBAAsBnd,eAAe9D,GAKxC,EAAKihB,sBAAsBjhB,IAJhCL,QAAQC,IAAI,+BAAiCI,GAEtC,EAAKmhB,iBA5XdphB,KAAKkhB,sBAAwB,CAC3B,YAAa,CACXjK,MAAO,CACLC,cAAe,SACf+D,QAAS,UACToG,eAAe,EACflD,YAAa,MACbE,YAAa,SACbH,YAAa,OACb1I,OAAQ,GACR6B,MAAO,IACPC,OAAQ,IAEVkB,UAAW,CACTsG,WAAY,6BACZC,UAAW,OACXtF,SAAU,QAGZnB,QAAS,CACPH,iBAAiB,EACjBc,sBAAsB,EACtBJ,cAAc,EACdF,wBAAwB,EACxB2I,qBAAqB,EACrBC,gBAAiB,EACjB9G,cAAe,SACfF,cAAe,WAInB,YAAa,CACXtD,MAAO,CACLC,cAAe,SACf+D,QAAS,UACToG,eAAe,EACflD,YAAa,MACbE,YAAa,QACbH,YAAa,OACb1I,OAAQ,GACR6B,MAAO,IACPC,OAAQ,IAEVkB,UAAW,CACTsG,WAAY,6BACZC,UAAW,OACXtF,SAAU,QAGZnB,QAAS,CACPH,iBAAiB,EACjBc,sBAAsB,EACtBJ,cAAc,EACdF,wBAAwB,EACxB2I,qBAAqB,EACrBC,gBAAiB,EACjB9G,cAAe,SACfF,cAAe,WAInB,sBAAuB,CACrBtD,MAAO,CACLC,cAAe,SACf+D,QAAS,UACToG,eAAe,EACflD,YAAa,MACbE,YAAa,SACbH,YAAa,OACb1I,OAAQ,GACR6B,MAAO,IACPC,OAAQ,GACRyT,eAAe,GAEjBvS,UAAW,CACTsG,WAAY,6BACZC,UAAW,OACXtF,SAAU,QAGZnB,QAAS,CACPH,iBAAiB,EACjBc,sBAAsB,EACtBJ,cAAc,EACdF,wBAAwB,EACxB2I,qBAAqB,EACrBC,gBAAiB,EACjB9G,cAAe,SACfF,cAAe,WAInB,eAAgB,CACdtD,MAAO,CACLC,cAAe,OACf+D,QAAS,UACToG,eAAe,EACflD,YAAa,MACbE,YAAa,SACbH,YAAa,OACb1I,OAAQ,GACR6B,MAAO,GACPC,OAAQ,IAEVkB,UAAW,CACTsG,WAAY,6BACZC,UAAW,OACXtF,SAAU,QAGZnB,QAAS,CACPH,iBAAiB,EACjBc,sBAAsB,EACtBJ,cAAc,EACdF,wBAAwB,EACxB2I,qBAAqB,EACrBC,gBAAiB,EACjB9G,cAAe,SACfF,cAAe,WAInB,uBAAwB,CACtBtD,MAAO,CACLlK,KAAM,CACJyU,UAAW,QACXC,UAAW,MACXC,UAAW,WAEbxF,UAAW,CACThF,cAAe,WACfuG,YAAa,EACbU,YAAa,MACbE,YAAa,QACbH,YAAa,UACbE,UAAW,WAGb9D,aAAc,CACZrD,MAAO,CACLC,cAAe,OACf+D,QAAS,UACTG,cAAe,MACfuG,4BAA6B,OAC7BC,gBAAiB,IACjBP,cAAe,QACf7L,OAAQ,GACR6B,MAAO,IACPC,OAAQ,IAEVkB,UAAW,CACTsG,WAAY,6BACZC,UAAW,UACXtF,SAAU,QAEZnB,QAAS,CACPH,iBAAiB,EACjBU,cAAc,EACdF,wBAAwB,EACxB2I,qBAAqB,EACrBC,gBAAiB,EACjB9G,cAAe,SACfF,cAAe,YAIrBjC,QAAS,CACPgE,kBAAkB,EAClBN,eAAe,EACfG,eAAe,EACf2E,mBAAoB,SAIxB,kBAAmB,CACjB7J,MAAO,CACLlK,KAAM,CACJyU,UAAW,SACXC,UAAW,MACXC,UAAW,WAEbxF,UAAW,CACThF,cAAe,WACfuG,YAAa,EACbU,YAAa,MACbE,YAAa,QACbH,YAAa,UACbE,UAAW,WAGb9D,aAAc,CACZrD,MAAO,CACLC,cAAe,OACf+D,QAAS,UACTG,cAAe,MACfuG,4BAA6B,OAC7BC,gBAAiB,IACjBP,cAAe,QACf7L,OAAQ,GACR6B,MAAO,IACPC,OAAQ,IAEVkB,UAAW,CACTsG,WAAY,6BACZC,UAAW,UACXtF,SAAU,QAEZnB,QAAS,CACPH,iBAAiB,EACjBU,cAAc,EACdF,wBAAwB,EACxB2I,qBAAqB,EACrBC,gBAAiB,EACjB9G,cAAe,SACfF,cAAe,YAIrBjC,QAAS,CACPgE,kBAAkB,EAClBN,eAAe,EACfG,eAAe,EACf2E,mBAAoB,SAIxB,qBAAsB,CACpB7J,MAAO,CACLlK,KAAM,CACJyU,UAAW,QACXC,UAAW,MACXC,UAAW,WAEbxF,UAAW,CACThF,cAAe,WACfuG,YAAa,EACbU,YAAa,MACbE,YAAa,QACbH,YAAa,UACbE,UAAW,WAGb9D,aAAc,CACZrD,MAAO,CACLC,cAAe,OACf+D,QAAS,UACTG,cAAe,MACfuG,4BAA6B,OAC7BC,gBAAiB,IACjBP,cAAe,QACf7L,OAAQ,GACR6B,MAAO,IACPC,OAAQ,IAEVkB,UAAW,CACTsG,WAAY,6BACZC,UAAW,UACXtF,SAAU,QAEZnB,QAAS,CACPH,iBAAiB,EACjBU,cAAc,EACdF,wBAAwB,EACxB2I,qBAAqB,EACrBC,gBAAiB,EACjB9G,cAAe,SACfF,cAAe,YAIrBjC,QAAS,CACPgE,kBAAkB,EAClBN,eAAe,EACfG,eAAe,EACf2E,mBAAoB,WAK1B9gB,KAAKmhB,eAAiB,CACpBlK,MAAO,CACLC,cAAe,SACf+D,QAAS,UACToG,eAAe,EACflD,YAAa,MACbE,YAAa,QACbH,YAAa,OACb1I,OAAQ,GACR6B,MAAO,IACPC,OAAQ,IAEVkB,UAAW,CACTsG,WAAY,6BACZC,UAAW,UACXtF,SAAU,QAGZnB,QAAS,CACPH,iBAAiB,EACjBc,sBAAsB,EACtBJ,cAAc,EACdF,wBAAwB,EACxB2I,qBAAqB,EACrBC,gBAAiB,EACjB9G,cAAe,SACfF,cAAe,WAInBva,KAAKohB,eAAiB,CACpBnK,MAAO,CACLlK,KAAM,CACJyU,UAAW,SACXC,UAAW,MACXC,UAAW,WAEbxF,UAAW,CACThF,cAAe,WACfuG,YAAa,EACbU,YAAa,MACbE,YAAa,QACbH,YAAa,UACbE,UAAW,WAEb/B,UAAW,CACTnF,cAAe,UACfuG,YAAa,EACbU,YAAa,MACbE,YAAa,QACbH,YAAa,UACbE,UAAW,WAEb9D,aAAc,CACZrD,MAAO,CACLC,cAAe,OACf+D,QAAS,UACTG,cAAe,MACfuG,4BAA6B,OAC7BC,gBAAiB,IACjBP,cAAe,QACf7L,OAAQ,GACR6B,MAAO,IACPC,OAAQ,IAEVkB,UAAW,CACTsG,WAAY,6BACZC,UAAW,UACXtF,SAAU,QAEZnB,QAAS,CACPH,iBAAiB,EACjBU,cAAc,EACdF,wBAAwB,EACxB2I,qBAAqB,EACrBC,gBAAiB,EACjB9G,cAAe,SACfF,cAAe,YAIrBjC,QAAS,CACPgE,kBAAkB,EAClBN,eAAe,EACfG,eAAe,EACf2E,mBAAoB,UC9WPG,GACnB,aAAe,IAAD,gCA2hBd7G,sBAAwB,SAAAna,GACtB,OAAK,EAAKihB,sBAAsBnT,MAAMhK,eAAe9D,GAI9C,EAAKihB,sBAAsBnT,MAAM9N,IAHtCL,QAAQC,IAAI,+BAAiCI,GACtC,EAAKkhB,iBA9hBF,KAmiBdjH,sBAAwB,SAAAja,GACtB,OAAK,EAAKihB,sBAAsBhT,MAAMnK,eAAe9D,GAK9C,EAAKihB,sBAAsBhT,MAAMjO,IAJtCL,QAAQC,IAAI,+BAAiCI,GAEtC,EAAKmhB,iBAtiBdphB,KAAKkhB,sBAAwB,CAC3BnT,MAAO,CACL,YAAa,CACXkJ,MAAO,CACLC,cAAe,SACf+D,QAAS,UACToG,eAAe,EACflD,YAAa,MACbE,YAAa,SACbH,YAAa,OACb1I,OAAQ,GACR6B,MAAO,IACPC,OAAQ,IAEVkB,UAAW,CACTsG,WAAY,6BACZC,UAAW,OACXtF,SAAU,QAGZnB,QAAS,CACPH,iBAAiB,EACjBc,sBAAsB,EACtBJ,cAAc,EACdF,wBAAwB,EACxB2I,qBAAqB,EACrBC,gBAAiB,EACjB9G,cAAe,SACfF,cAAe,WAInB,YAAa,CACXtD,MAAO,CACLC,cAAe,SACf+D,QAAS,UACToG,eAAe,EACflD,YAAa,MACbE,YAAa,QACbH,YAAa,OACb1I,OAAQ,GACR6B,MAAO,IACPC,OAAQ,IAEVkB,UAAW,CACTsG,WAAY,6BACZC,UAAW,OACXtF,SAAU,QAGZnB,QAAS,CACPH,iBAAiB,EACjBc,sBAAsB,EACtBJ,cAAc,EACdF,wBAAwB,EACxB2I,qBAAqB,EACrBC,gBAAiB,EACjB9G,cAAe,SACfF,cAAe,WAInByQ,yBAA0B,CACxB/T,MAAO,CACLC,cAAe,OACf+D,QAAS,UACToG,eAAe,EACflD,YAAa,MACbE,YAAa,QACbH,YAAa,OACb1I,OAAQ,GACR6B,MAAO,IACPC,OAAQ,GACR8D,cAAe,UAEjB5C,UAAW,CACTsG,WAAY,6BACZC,UAAW,OACXtF,SAAU,QAGZnB,QAAS,CACPH,iBAAiB,EACjBc,sBAAsB,EACtBJ,cAAc,EACdF,wBAAwB,EACxB2I,qBAAqB,EACrBC,gBAAiB,EACjB9G,cAAe,SACfF,cAAe,WAInB0Q,uBAAwB,CACtBhU,MAAO,CACLC,cAAe,OACf+D,QAAS,UACToG,eAAe,EACflD,YAAa,MACbE,YAAa,QACbH,YAAa,OACb1I,OAAQ,GACR6B,MAAO,IACPC,OAAQ,GACR8D,cAAe,UAEjB5C,UAAW,CACTsG,WAAY,6BACZC,UAAW,OACXtF,SAAU,QAGZnB,QAAS,CACPH,iBAAiB,EACjBc,sBAAsB,EACtBJ,cAAc,EACdF,wBAAwB,EACxB2I,qBAAqB,EACrBC,gBAAiB,EACjB9G,cAAe,SACfF,cAAe,WAInB,sBAAuB,CACrBtD,MAAO,CACLC,cAAe,SACf+D,QAAS,UACToG,eAAe,EACflD,YAAa,MACbE,YAAa,SACbH,YAAa,OACb1I,OAAQ,GACR6B,MAAO,IACPC,OAAQ,GACRyT,eAAe,GAEjBvS,UAAW,CACTsG,WAAY,6BACZC,UAAW,OACXtF,SAAU,QAGZnB,QAAS,CACPH,iBAAiB,EACjBc,sBAAsB,EACtBJ,cAAc,EACdF,wBAAwB,EACxB2I,qBAAqB,EACrBC,gBAAiB,EACjB9G,cAAe,SACfF,cAAe,WAInB,eAAgB,CACdtD,MAAO,CACLC,cAAe,OACf+D,QAAS,UACToG,eAAe,EACflD,YAAa,MACbE,YAAa,SACbH,YAAa,OACb1I,OAAQ,GACR6B,MAAO,GACPC,OAAQ,IAEVkB,UAAW,CACTsG,WAAY,6BACZC,UAAW,OACXtF,SAAU,QAGZnB,QAAS,CACPH,iBAAiB,EACjBc,sBAAsB,EACtBJ,cAAc,EACdF,wBAAwB,EACxB2I,qBAAqB,EACrBC,gBAAiB,EACjB9G,cAAe,SACfF,cAAe,YAIrBrM,MAAO,CACLgd,QAAS,CACPjU,MAAO,CACLlK,KAAM,CACJyU,UAAW,QACXC,UAAW,MACXC,UAAW,WAEbxF,UAAW,CACThF,cAAe,WACfuG,YAAa,EACbU,YAAa,MACbE,YAAa,QACbH,YAAa,UACbE,UAAW,WAGb9D,aAAc,CACZrD,MAAO,CACLC,cAAe,OACf+D,QAAS,UAET0G,4BAA6B,OAC7BC,gBAAiB,IACjBP,eAAe,EACflD,YAAa,MACbE,YAAa,SACb7I,OAAQ,GACR6B,MAAO,IACPC,OAAQ,GACR8D,cAAe,UAEjB5C,UAAW,CACTsG,WAAY,6BACZC,UAAW,UACXtF,SAAU,QAEZnB,QAAS,CACPH,iBAAiB,EACjBU,cAAc,EACdF,wBAAwB,EACxB2I,qBAAqB,EACrBC,gBAAiB,EACjB9G,cAAe,SACfF,cAAe,YAIrBjC,QAAS,CACPgE,kBAAkB,EAClBN,eAAe,EACfG,eAAe,EACf2E,mBAAoB,SAGxB,uBAAwB,CACtB7J,MAAO,CACLlK,KAAM,CACJyU,UAAW,QACXC,UAAW,MACXC,UAAW,WAEbxF,UAAW,CACThF,cAAe,WACfuG,YAAa,EACbU,YAAa,MACbE,YAAa,QACbH,YAAa,UACbE,UAAW,WAGb9D,aAAc,CACZrD,MAAO,CACLC,cAAe,OACf+D,QAAS,UACTG,cAAe,MACfuG,4BAA6B,OAC7BC,gBAAiB,IACjBP,cAAe,QACf7L,OAAQ,GACR6B,MAAO,IACPC,OAAQ,IAEVkB,UAAW,CACTsG,WAAY,6BACZC,UAAW,UACXtF,SAAU,QAEZnB,QAAS,CACPH,iBAAiB,EACjBU,cAAc,EACdF,wBAAwB,EACxB2I,qBAAqB,EACrBC,gBAAiB,EACjB9G,cAAe,SACfF,cAAe,YAIrBjC,QAAS,CACPgE,kBAAkB,EAClBN,eAAe,EACfG,eAAe,EACf2E,mBAAoB,SAGxB,sBAAuB,CACrB7J,MAAO,CACLlK,KAAM,CACJyU,UAAW,SACXC,UAAW,MACXC,UAAW,WAEbxF,UAAW,CACThF,cAAe,WACfuG,YAAa,IACbU,YAAa,MACbE,YAAa,QACbH,YAAa,UACbE,UAAW,WAGb9D,aAAc,CACZrD,MAAO,CACLC,cAAe,OACf+D,QAAS,UACTG,cAAe,MACfuG,4BAA6B,OAC7BC,gBAAiB,IACjBP,cAAe,QACf7L,OAAQ,GACR6B,MAAO,IACPC,OAAQ,IAEVkB,UAAW,CACTsG,WAAY,6BACZC,UAAW,UACXtF,SAAU,QAEZnB,QAAS,CACPH,iBAAiB,EACjBU,cAAc,EACdF,wBAAwB,EACxB2I,qBAAqB,EACrBC,gBAAiB,EACjB9G,cAAe,SACfF,cAAe,YAIrBjC,QAAS,CACPgE,kBAAkB,EAClBN,eAAe,EACfG,eAAe,EACf2E,mBAAoB,SAIxB,kBAAmB,CACjB7J,MAAO,CACLlK,KAAM,CACJyU,UAAW,SACXC,UAAW,MACXC,UAAW,WAEbxF,UAAW,CACThF,cAAe,WACfuG,YAAa,EACbU,YAAa,MACbE,YAAa,QACbH,YAAa,UACbE,UAAW,WAGb9D,aAAc,CACZrD,MAAO,CACLC,cAAe,OACf+D,QAAS,UACTG,cAAe,MACfuG,4BAA6B,OAC7BC,gBAAiB,IACjBP,cAAe,QACf7L,OAAQ,GACR6B,MAAO,IACPC,OAAQ,IAEVkB,UAAW,CACTsG,WAAY,6BACZC,UAAW,UACXtF,SAAU,QAEZnB,QAAS,CACPH,iBAAiB,EACjBU,cAAc,EACdF,wBAAwB,EACxB2I,qBAAqB,EACrBC,gBAAiB,EACjB9G,cAAe,SACfF,cAAe,YAIrBjC,QAAS,CACPgE,kBAAkB,EAClBN,eAAe,EACfG,eAAe,EACf2E,mBAAoB,SAIxB,qBAAsB,CACpB7J,MAAO,CACLlK,KAAM,CACJyU,UAAW,QACXC,UAAW,MACXC,UAAW,WAEbxF,UAAW,CACThF,cAAe,WACfuG,YAAa,EACbU,YAAa,MACbE,YAAa,QACbH,YAAa,UACbE,UAAW,WAGb9D,aAAc,CACZrD,MAAO,CACLC,cAAe,OACf+D,QAAS,UACTG,cAAe,MACfuG,4BAA6B,OAC7BC,gBAAiB,IACjBP,cAAe,QACf7L,OAAQ,GACR6B,MAAO,IACPC,OAAQ,IAEVkB,UAAW,CACTsG,WAAY,6BACZC,UAAW,UACXtF,SAAU,QAEZnB,QAAS,CACPH,iBAAiB,EACjBU,cAAc,EACdF,wBAAwB,EACxB2I,qBAAqB,EACrBC,gBAAiB,EACjB9G,cAAe,SACfF,cAAe,YAIrBjC,QAAS,CACPgE,kBAAkB,EAClBN,eAAe,EACfG,eAAe,EACf2E,mBAAoB,YAM5B9gB,KAAKmhB,eAAiB,CACpBlK,MAAO,CACLC,cAAe,SACf+D,QAAS,UACToG,eAAe,EACflD,YAAa,MACbE,YAAa,QACbH,YAAa,OACb1I,OAAQ,GACR6B,MAAO,IACPC,OAAQ,IAEVkB,UAAW,CACTsG,WAAY,6BACZC,UAAW,UACXtF,SAAU,QAGZnB,QAAS,CACPH,iBAAiB,EACjBc,sBAAsB,EACtBJ,cAAc,EACdF,wBAAwB,EACxB2I,qBAAqB,EACrBC,gBAAiB,EACjB9G,cAAe,SACfF,cAAe,WAInBva,KAAKohB,eAAiB,CACpBnK,MAAO,CACLlK,KAAM,CACJyU,UAAW,SACXC,UAAW,MACXC,UAAW,WAEbxF,UAAW,CACThF,cAAe,WACfuG,YAAa,EACbU,YAAa,MACbE,YAAa,QACbH,YAAa,UACbE,UAAW,WAEb/B,UAAW,CACTnF,cAAe,UACfuG,YAAa,EACbU,YAAa,MACbE,YAAa,QACbH,YAAa,UACbE,UAAW,WAEb9D,aAAc,CACZrD,MAAO,CACLC,cAAe,OACf+D,QAAS,UACTG,cAAe,MACfuG,4BAA6B,OAC7BC,gBAAiB,IACjBP,cAAe,QACf7L,OAAQ,GACR6B,MAAO,IACPC,OAAQ,IAEVkB,UAAW,CACTsG,WAAY,6BACZC,UAAW,UACXtF,SAAU,QAEZnB,QAAS,CACPH,iBAAiB,EACjBU,cAAc,EACdF,wBAAwB,EACxB2I,qBAAqB,EACrBC,gBAAiB,EACjB9G,cAAe,SACfF,cAAe,YAIrBjC,QAAS,CACPgE,kBAAkB,EAClBN,eAAe,EACfG,eAAe,EACf2E,mBAAoB,UCvTbqK,G,kDAjMb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAeRC,gBAhBmB,sBAgBD,oCAAA1rB,EAAA,6DAEV2rB,EAAS,IAAIzmB,EACb0mB,EAAW,IAAIC,EACfC,EAAW,IAAIC,EACfC,EAAkB,IAAId,GAEtBe,EAA4B,IAAIC,GAGtCF,EAAgBxH,mBAAmByH,GAKnCN,EAAO9rB,aAAassB,GAfJ,SAgBVR,EAAO5rB,UAhBG,cAmBhB6rB,EAAS/rB,aAAa8rB,EAAOhsB,aAnBb,UAoBVisB,EAAS7rB,UApBC,eAsBhB+rB,EAASjsB,aAAa+rB,EAASjsB,aAtBf,UAuBVmsB,EAAS/rB,UAvBC,QA0BhBisB,EAAgB9H,sBAAsB,sBACtC8H,EAAgBzH,SAASuH,EAASnsB,YAAYwH,eAAexH,aAE7DqsB,EAAgBpH,+BAChBoH,EAAgBI,0BAChBJ,EAAgB5F,0BA/BA,4CAhBC,EAmDnBiG,cAnDmB,sBAmDH,sCAAArsB,EAAA,6DAER2rB,EAAS,IAAIW,EACbV,EAAW,IAAIW,EACfT,EAAW,IAAIU,EACfR,EAAkB,IAAId,GACtBuB,EAA4B,IAAIC,GAGtCV,EAAgBxH,mBAAmBiI,GAK7BE,EAAWxM,KAAKC,MAAMD,KAAKE,UAAUuM,IAC3CjB,EAAO9rB,aAAa8sB,GAfN,UAiBRhB,EAAO5rB,UAjBC,eAoBd6rB,EAAS/rB,aAAa8rB,EAAOhsB,aApBf,UAqBRisB,EAAS7rB,UArBD,eAuBd+rB,EAASjsB,aAAa+rB,EAASjsB,aAvBjB,UAwBRmsB,EAAS/rB,UAxBD,QA2BdisB,EAAgB9H,sBAAsB,qBACtC8H,EAAgBzH,SAASuH,EAASnsB,YAAYwH,eAAexH,aAE7DqsB,EAAgBpH,+BAChBoH,EAAgBI,0BAChBJ,EAAgB5F,0BAhCF,4CAnDG,EAuFnByG,mBAvFmB,sBAuFE,sCAAA7sB,EAAA,6DAEb2rB,EAAS,IAAIW,EACbV,EAAW,IAAIW,EACfT,EAAW,IAAIgB,EACfd,EAAkB,IAAId,GAEtB6B,EAAiC,IAAIC,GAG3ChB,EAAgBxH,mBAAmBuI,GAK7BJ,EAAWxM,KAAKC,MAAMD,KAAKE,UAAUuM,IAC3CjB,EAAO9rB,aAAa8sB,GAhBD,UAiBbhB,EAAO5rB,UAjBM,eAoBnB6rB,EAAS/rB,aAAa8rB,EAAOhsB,aApBV,UAqBbisB,EAAS7rB,UArBI,eAuBnB+rB,EAASjsB,aAAa+rB,EAASjsB,aAvBZ,UAwBbmsB,EAAS/rB,UAxBI,QA2BnBisB,EAAgB9H,sBAAsB,sBACtC8H,EAAgBzH,SAASuH,EAASnsB,YAAYwH,eAAexH,aAE7DqsB,EAAgBpH,+BAChBoH,EAAgBI,0BAChBJ,EAAgB5F,0BAhCG,4CArFnB,EAAK6G,MAAQ,CACXC,wBAAwB,GAHT,E,gEAOE,IAAD,OAClB7sB,KAAKgsB,gBAAgBc,MAAK,WACxB,EAAKN,qBAAqBM,MAAK,WAC7B,EAAKzB,kBAAkByB,e,+BAiH3B,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAAlB,qBAEA,0BAAMA,UAAU,cAChB,6BACE,yBAAK/oB,IAAKgpB,IAAoB3V,MAAM,MAAM4V,IAAI,YAIhD,4BAAQF,UAAU,cAAlB,yCAEE,yBACExsB,GAAG,oBACH0W,MAAO,CACLI,MAAO,MACPC,OAAQ,QACR4V,gBAAiB,OACjBC,OAAQ,OACRC,WAAY,QAIlB,0BAAML,UAAU,cACd,6BACE,yBAAK/oB,IAAKqpB,IAAmBhW,MAAM,OAAO4V,IAAI,WAGlD,4BAAQF,UAAU,cAAlB,2EAGE,yBACExsB,GAAG,qBACH0W,MAAO,CACLI,MAAO,MACPC,OAAQ,QACR4V,gBAAiB,OACjBC,OAAQ,OACRC,WAAY,QAIlB,0BAAML,UAAU,cACd,6BACE,yBAAK/oB,IAAKspB,IAAkBjW,MAAM,OAAO4V,IAAI,WAGjD,4BAAQF,UAAU,cAAlB,2DAEE,yBACExsB,GAAG,qBACH0W,MAAO,CACLI,MAAO,MACPC,OAAQ,QACR4V,gBAAiB,OACjBC,OAAQ,OACRC,WAAY,QAIlB,0BAAML,UAAU,cACd,6BACE,yBAAK/oB,IAAKupB,IAAqBlW,MAAM,OAAO4V,IAAI,gB,GA1L1CO,aCnBEC,QACW,cAA7BnU,OAAOoU,SAASC,UAEe,UAA7BrU,OAAOoU,SAASC,UAEhBrU,OAAOoU,SAASC,SAASC,MACvB,2DCZNC,IAASnN,OACP,kBAAC,IAAMoN,WAAP,KACE,kBAAC,GAAD,OAEF9O,SAASC,eAAe,SDyHpB,kBAAmB8O,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAptB,GACLpB,QAAQoB,MAAMA,EAAMqtB,c","file":"static/js/main.bbdd3626.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Code_VowlPipe.a51c21db.png\";","module.exports = __webpack_public_path__ + \"static/media/Code_SPARQLPipeline.e74f3cfd.png\";","module.exports = __webpack_public_path__ + \"static/media/Code_RDFStyledPipeline.2b17f903.png\";","module.exports = __webpack_public_path__ + \"static/media/NodeLinkPipeline.be64a666.png\";","import * as $CONST from \"./BaseComponentConstants\";\n\nexport default class BaseComponent {\n  constructor() {\n    this.type = $CONST.TYPE_ABSTRACT_BASE_COMPONENT;\n    this.inputDataAsJsonObject = null;\n    this.resultObject = {};\n  }\n\n  /** -------------- EXPOSED FUNCTIONS -------------- DO NOT OVERWRITE **/\n  getResult = () => {\n    return this.resultObject;\n  };\n\n  setInputData = inputDataAsJsonObject => {\n    this.inputDataAsJsonObject = inputDataAsJsonObject;\n  };\n\n  execute = async () => {\n    if (!this.inputDataAsJsonObject) {\n      console.log(\"No JSON object given as data input \");\n      return;\n    }\n\n    await this.__run__();\n    this._postRun_();\n  };\n\n  /** -------------- Must OVERWRITE FUNCTIONS --------------**/\n  __run__ = () => {};\n\n  /** -------------- INTERNAL FUNCTIONS -------------- **/\n  _postRun_ = () => {\n    // Options do define post execution functions,\n  };\n}\n","export const TYPE_ABSTRACT_BASE_COMPONENT = \"TYPE_ABSTRACT_BASE_COMPONENT\";\n\nexport const TYPE_VOWL_PARSER = \"TYPE_VOWL_PARSER\";\nexport const TYPE_SPARQL_PARSER = \"TYPE_SPARQL_PARSER\";\n\n// MODEL MODELS\nexport const TYPE_ABSTRACT_MODEL = \"TYPE_ABSTRACT_MODEL\";\nexport const TYPE_RESOURCE_RELATION_MODEL = \"TYPE_RESOURCE_RELATION_MODEL\";\nexport const TYPE_VERTEX_EDGE_MODEL = \"TYPE_VERTEX_EDGE_MODEL\";\nexport const TYPE_NODE_LINK_MODEL = \"TYPE_NODE_LINK_MODEL\";\n\n// // MAPPERS\nexport const TYPE_VERTEX_EDGE_MAPPER = \"TYPE_VERTEX_EDGE_MAPPER\";\nexport const TYPE_NODE_LINK_MAPPER = \"TYPE_NODE_LINK_MAPPER\";\n\n// export const TYPE_VOWL_VE2NL_MAPPER = \"TYPE_VOWL_VE2NL_MAPPER\";\n","// data handler is a base class;\n\nimport * as $CONST from \"./BaseComponentConstants\";\n\nexport default class BaseModel {\n  constructor() {\n    this.type = $CONST.TYPE_ABSTRACT_MODEL; // default type;\n    this.modelAsJsonObject = null;\n    this.__resourceIdentifier = \"baseModelResourceIdentifier\"; //MUST CHANGE in derived models\n  }\n\n  /** -------------- EXPOSED FUNCTIONS -------------- DO NOT OVERWRITE **/\n  getResult = () => {\n    return this.modelAsJsonObject;\n  };\n\n  getResourceIdentifier = () => {\n    return this.__resourceIdentifier;\n  };\n\n  setResourceIdentifier = id => {\n    // this specifies the property name in the object  to which we look up in the map ;\n    this.__resourceIdentifier = id;\n  };\n\n  /** -------------- Must OVERWRITE FUNCTIONS --------------**/\n  __isInMap__ = (map, identifier) => {\n    return true; // if is in map (per default this blocks to add items to model)!\n  };\n\n  __resourceIdentifier__ = resourceObject => {\n    // returns a string for resourceIdentifier, should be unique;\n  };\n\n  __isEqual__ = (a, b) => {\n    // input a and b are objects with properties where some are maybe equal\n    return false;\n  };\n}\n","import * as $CONST from \"../Base/BaseComponentConstants\";\nimport BaseModel from \"../Base/BaseModel\";\n\nexport default class ResourceRelationModel extends BaseModel {\n  constructor() {\n    super();\n\n    this.type = $CONST.TYPE_RESOURCE_RELATION_MODEL; // default type;\n\n    // initialize the model with array of resources and relations;\n    this.modelAsJsonObject = { resources: [], relations: [] };\n\n    // create mappers for resources and relations;\n    this.resourceMap = {};\n    this.relationMap = {};\n\n    this.__resourceIdentifier = \"__resourceIdentifier\"; // default, assume forced ids from outside;\n  }\n\n  /** -------------- Must OVERWRITE FUNCTIONS --------------**/\n  __isInMap__ = (map, identifier) => {\n    if (!identifier) {\n      console.error(\n        \"No Identifier Found in resource! give it unique ids as properties and set the resourceIdentifier name (setResourceIdentifier('ID'))\"\n      );\n    } else {\n      return !!map[identifier];\n    }\n\n    return true; // if is in map (per default this blocks to add items to model)!\n  };\n\n  __isEqual__ = (a, b) => {\n    // input a and b are objects with properties where some are maybe equal\n    return false;\n  };\n\n  __resourceIdentifier__ = resourceObject => {\n    return resourceObject[this.__resourceIdentifier];\n  };\n\n  /** -------------- Exposed Functions --------------**/\n\n  addResource = resource => {\n    if (\n      !this.__isInMap__(this.resourceMap, this.__resourceIdentifier__(resource))\n    ) {\n      this.__integrateResourceItem(\n        this.modelAsJsonObject.resources,\n        this.resourceMap,\n        resource\n      );\n    } else {\n      // Has seen this resource >>> Merge <<<;\n      this.__mergeItem(\n        this.resourceMap[this.__resourceIdentifier__(resource)],\n        resource\n      );\n    }\n  };\n\n  __mergeItem = (r1, r2) => {\n    // r1 is our target resource where we append stuff to it\n    r1.integrateResource(r2);\n  };\n\n  __integrateResourceItem = (target, map, resource) => {\n    target.push(resource);\n    map[this.__resourceIdentifier__(resource)] = resource;\n  };\n\n  addRelation = relation => {\n    if (\n      !this.__isInMap__(this.relationMap, this.__resourceIdentifier__(relation))\n    ) {\n      this.__integrateResourceItem(\n        this.modelAsJsonObject.relations,\n        this.relationMap,\n        relation\n      );\n    } else {\n      // Has seen this relation >>> Merge <<<;\n      this.__mergeItem(\n        this.relationMap[this.__resourceIdentifier__(relation)],\n        relation\n      );\n    }\n  };\n}\n","export const validIRI = str => {\n  const urlregex = /^(https?|ftp):\\/\\/([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&%$-]+)*@)*((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}|([a-zA-Z0-9-]+\\.)*[a-zA-Z0-9-]+\\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(:[0-9]+)*(\\/($|[a-zA-Z0-9.,?'\\\\+&%$#=~_-]+))*$/;\n  return urlregex.test(str);\n};\n","import { validIRI } from \"../../Implementation/Base/globalHelper\";\n\nexport default class Resource {\n  constructor() {\n    this._resourceURI = undefined;\n    this._semanticType = [];\n    this._annotations = {};\n    this._axioms = {};\n    this.__resourceIdentifier = undefined;\n\n    this.prefixMapperL2S = {\n      \"http://www.w3.org/2000/01/rdf-schema#\": \"rdfs\"\n    };\n  }\n\n  resourceIdentifier(val) {\n    if (!arguments.length) {\n      return this.__resourceIdentifier;\n    }\n    this.__resourceIdentifier = val;\n  }\n\n  addSemanticType(t) {\n    if (this._semanticType.indexOf(t) === -1) {\n      this._semanticType.push(t);\n    }\n  }\n\n  addAnnotation = (name, value, lang) => {\n    // annotations are literals with optional language tags;\n\n    let inputName = name;\n    if (validIRI(name)) {\n      let suffix = name.split(\"#\")[1];\n      let pref = \"\";\n      if (!suffix) {\n        const tokens = name.split(\"/\");\n        suffix = tokens[tokens.length - 1];\n        for (let i = 0; i < tokens.length - 1; i++) {\n          pref += tokens[i];\n        }\n        pref += \"/\";\n      } else {\n        pref = name.split(\"#\")[0];\n        pref += \"#\";\n      }\n\n      const prName = this.prefixMapperL2S[pref];\n      if (prName) {\n        inputName = prName + \":\" + suffix;\n      }\n    }\n    if (!this._annotations[inputName]) {\n      this._annotations[inputName] = {};\n    }\n\n    let languageSelector = \"default\";\n    if (lang && lang !== \"undefined\") {\n      languageSelector = lang;\n    }\n    const tm = this._annotations[inputName];\n    if (!tm[languageSelector]) {\n      tm[languageSelector] = []; // array of strings for given language\n    }\n    tm[languageSelector].push(value);\n  };\n\n  addAxiom(subject, axiom, object) {\n    // subject for now ignored;\n    if (!this._axioms.hasOwnProperty(axiom)) {\n      this._axioms[axiom] = [];\n    }\n    this._axioms[axiom].push(object);\n  }\n\n  integrateResource(src) {\n    // adds stuff to this resource;\n    // semantic type?\n    src._semanticType.forEach(t => {\n      this.addSemanticType(t); // no need for checking, it is done in the function itself;\n    });\n    // axioms and annotaions need to check however;\n\n    // annotaions is an object;\n    for (const name in src._annotations) {\n      if (src._annotations.hasOwnProperty(name)) {\n        const annoType = src._annotations[name];\n        // check if this name exist in this ;\n        if (!this._annotations[name]) {\n          this._annotations[name] = {};\n        }\n        //\n        for (const langType in annoType) {\n          if (annoType.hasOwnProperty(langType)) {\n            // check if this object has it;\n            const value = annoType[langType]; // value is an array\n            const tm = this._annotations[name];\n            if (!tm[langType]) {\n              tm[langType] = []; // array of strings for given language\n            }\n            // TODO >> TEST THIS BASED ON VALUE IS ARRAY OR STRING?\n            value.forEach(str => {\n              if (tm[langType].indexOf(str) === -1) {\n                tm[langType].push(str);\n              }\n            });\n          }\n        }\n      }\n    }\n\n    // // check for axioms merging\n    for (const name in src._axioms) {\n      if (src._axioms.hasOwnProperty(name)) {\n        if (!this._axioms[name]) {\n          this._axioms[name] = [];\n        }\n\n        // get array of axioms holders;\n        const axAr = src._axioms[name];\n        axAr.forEach(ax => {\n          // check if exists;\n          if (this._axioms[name].indexOf(ax) === -1) {\n            this._axioms[name].push(ax);\n          }\n        });\n      }\n    }\n  }\n}\n","import Resource from './Resource';\n\nexport default class Relation extends Resource {\n  constructor() {\n    super();\n\n    this.domains = [];\n    this.ranges = [];\n  }\n\n  addRange(r) {\n    if (this.ranges.indexOf(r) === -1) {\n      this.ranges.push(r);\n    }\n  }\n\n  addDomain(d) {\n    this.domains.push(d);\n  }\n\n  integrateResource(src) {\n    // adds stuff to this resource;\n    super.integrateResource(src);\n\n    src.domains.forEach(dom => {\n      if (this.domains.indexOf(dom) === -1) {\n        this.domains.push(dom);\n      }\n    });\n    src.ranges.forEach(ran => {\n      if (this.ranges.indexOf(ran) === -1) {\n        this.ranges.push(ran);\n      }\n    });\n    // extend with domain and range stuff;\n  }\n}\n","import * as $CONST from \"../Base/BaseComponentConstants\";\nimport BaseComponent from \"../Base/BaseComponent\";\n\nimport ResourceRelationModel from \"../Models/ResourceRelationModel\";\nimport Resource from \"../Models/Resource\";\nimport Relation from \"../Models/Relation\";\n\nexport default class SparqlParser extends BaseComponent {\n  constructor() {\n    super();\n    this.type = $CONST.TYPE_SPARQL_PARSER;\n\n    this.definitionMap = {\n      // assertions\n      \"http://www.w3.org/1999/02/22-rdf-syntax-ns#type\": \"assertion\",\n      //axioms\n      \"http://www.w3.org/2000/01/rdf-schema#subClassOf\": \"axiom\",\n      \"http://www.w3.org/2000/01/rdf-schema#subPropertyOf\": \"axiom\",\n      \"http://www.w3.org/2002/07/owl#equivalentClass\": \"axiom\",\n\n      // annotations\n      \"http://www.w3.org/2000/01/rdf-schema#comment\": \"annotation\",\n      \"http://www.w3.org/2000/01/rdf-schema#label\": \"annotation\",\n      \"http://www.w3.org/2000/01/rdf-schema#isDefinedBy\": \"annotation\",\n\n      // relational assertions:\n      \"owl:ObjectProperty\": \"relationalAssertion\",\n      \"owl:DatatypeProperty\": \"relationalAssertion\"\n    };\n  }\n\n  /** -------------- Must OVERWRITE FUNCTIONS --------------**/\n  __run__ = async () => {\n    const m = new ResourceRelationModel();\n    const processedData = this._preProcess();\n    this._processData(m, processedData);\n  };\n\n  _processData(model, dataObject) {\n    dataObject.forEach(statement => {\n      const subject = statement.subject;\n      const predicate = statement.predicate;\n      const object = statement.object;\n\n      // needs to be processed as a whole triple\n      // subject resource\n      const subjectResource = new Resource();\n      const propertyRelation = new Relation();\n      const objectResource = new Resource();\n\n      // handling the identifier;\n      subjectResource.resourceIdentifier(subject.value);\n      if (this.validIRI(subject.value)) {\n        subjectResource._resourceURI = subject.value;\n      }\n\n      propertyRelation.resourceIdentifier(predicate.value);\n      if (this.validIRI(predicate.value)) {\n        propertyRelation._resourceURI = predicate.value;\n      }\n\n      objectResource.resourceIdentifier(object.value);\n      if (this.validIRI(object.value)) {\n        objectResource._resourceURI = object.value;\n      }\n\n      let ignoreSubjectResource = false;\n      let ignoreObjectResource = false;\n      let ignorePropertyRelation = false;\n\n      if (this.definitionMap[predicate.value] === \"assertion\") {\n        if (this.definitionMap[object.value] !== \"relationalAssertion\") {\n          subjectResource.addSemanticType(object.value);\n        } else {\n          //add this to the relation (TODO)\n          ignorePropertyRelation = false;\n        }\n        // there can not be more data fro this triple;\n        model.addResource(subjectResource);\n        return;\n      }\n\n      /** axioms **/\n      switch (this.definitionMap[predicate.value]) {\n        case \"axiom\":\n          subjectResource.addAxiom(\n            subject.value,\n            predicate.value,\n            object.value\n          );\n          ignoreObjectResource = true;\n          break;\n        case \"annotation\":\n          if (object[\"xml:lang\"]) {\n            subjectResource.addAnnotation(\n              predicate.value,\n              object.value,\n              object[\"xml:lang\"]\n            );\n          } else {\n            subjectResource.addAnnotation(predicate.value, object.value);\n          }\n\n          ignoreObjectResource = true;\n          ignorePropertyRelation = true;\n          break;\n        default:\n          // this is where we should add a relation ship\n          // subjectResource.addAnnotation(predicate.value, object);\n          // when using instance data there is no domain or range definition oO so we need to imply it;\n          propertyRelation.addDomain(subject.value);\n          propertyRelation.addRange(object.value);\n          ignoreObjectResource = true;\n          ignoreSubjectResource = true;\n      }\n\n      if (!ignoreSubjectResource) {\n        model.addResource(subjectResource);\n      }\n      if (!ignorePropertyRelation) {\n        model.addRelation(propertyRelation);\n      }\n      if (!ignoreObjectResource) {\n        model.addResource(objectResource);\n      }\n    });\n    this.resultObject.resultingModel = model;\n  }\n\n  /** -------------- INTERNAL FUNCTIONS -------------- **/\n\n  _preProcess = () => {\n    const output = []; // array holding the statements;\n    const input = this.inputDataAsJsonObject;\n    // assumptions;\n    // we always have a head and a results object\n\n    const binds = input.results.bindings;\n    const labels = input.head.vars;\n\n    binds.forEach(res => {\n      // create statements:\n      const aStatement = {};\n      // initialize attributes;\n      labels.forEach(label => {\n        aStatement[label] = res[label];\n      });\n\n      output.push(aStatement);\n    });\n\n    this.allStatements = [].concat(this.allStatements, output);\n    return output; // this can be useful for batch processing;\n  };\n\n  validIRI(str) {\n    const urlregex = /^(https?|ftp):\\/\\/([a-zA-Z0-9.-]+(:[a-zA-Z0-9.&%$-]+)*@)*((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]?)(\\.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])){3}|([a-zA-Z0-9-]+\\.)*[a-zA-Z0-9-]+\\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(:[0-9]+)*(\\/($|[a-zA-Z0-9.,?'\\\\+&%$#=~_-]+))*$/;\n    return urlregex.test(str);\n  }\n}\n","import * as $CONST from \"../Base/BaseComponentConstants\";\nimport BaseComponent from \"../Base/BaseComponent\";\n\nimport ResourceRelationModel from \"../Models/ResourceRelationModel\";\nimport Resource from \"../Models/Resource\";\nimport Relation from \"../Models/Relation\";\n\nexport default class VOWLParser extends BaseComponent {\n  constructor() {\n    super();\n    this.type = $CONST.TYPE_VOWL_PARSER;\n    this.resultingModelObject = null;\n  }\n\n  /** -------------- Must OVERWRITE FUNCTIONS --------------**/\n  __run__ = async () => {\n    const m = new ResourceRelationModel();\n    const processedData = this._preProcess();\n    this._processData(m, processedData);\n  };\n\n  _processData(model, dataObject) {\n    this.__processResources(model, dataObject);\n    this.__processRelations(model, dataObject);\n    this.resultObject.resultingModel = model;\n  }\n\n  /** -------------- INTERNAL FUNCTIONS -------------- **/\n  __processLabels(resource, modelResource) {\n    // unroll the labels as rdfs:labels;\n    if (resource.label) {\n      // label can be an object or a string?\n      if (typeof resource.label === \"string\") {\n        modelResource.addAnnotation(\"rdfs:label\", resource.label);\n      } else {\n        for (const name in resource.label) {\n          if (resource.label.hasOwnProperty(name)) {\n            if (name !== \"IRI-based\") {\n              modelResource.addAnnotation(\n                \"rdfs:label\",\n                resource.label[name],\n                name\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  __processComments(resource, modelResource) {\n    if (resource.comment) {\n      // label can be an object or a string?\n      if (typeof resource.comment === \"string\") {\n        modelResource.addAnnotation(\"rdfs:comment\", resource.comment);\n      } else {\n        for (const name in resource.comment) {\n          if (resource.comment.hasOwnProperty(name)) {\n            if (name !== \"IRI-based\") {\n              modelResource.addAnnotation(\n                \"rdfs:comment\",\n                resource.comment[name],\n                name\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  __processResourceAxioms(resource, modelResource) {\n    if (resource.equivalent) {\n      resource.equivalent.forEach(eq => {\n        modelResource.addAxiom(modelResource, \"owl:equivalentClass\", eq);\n      });\n    }\n    if (resource.superClasses) {\n      resource.superClasses.forEach(sc => {\n        modelResource.addAxiom(modelResource, \"rdfs:subClassOf\", sc);\n      });\n    }\n  }\n\n  __processRelationAxioms(relation, modelResource) {\n    //  ignore for now;\n  }\n\n  __processRelationAttributes(relation, modelRelation) {\n    // vowl has max one domain and one range ( if not given it will be owl:THING in VOWL\n    if (relation.domain) {\n      modelRelation.addDomain(relation.domain);\n    }\n    if (relation.range) {\n      modelRelation.addRange(relation.range);\n    }\n  }\n\n  __processResources(model, dataObject) {\n    dataObject.resources.forEach(resource => {\n      // if there is no IRI FOR THIS ONE check the type of VOWL;\n      if (!resource.iri) {\n        resource.__resourceIdentifier = resource.type; // kindOF processing type as IRI (e.g. OWL:THING or so)\n      } else {\n        resource.__resourceIdentifier = resource.iri;\n      }\n\n      const modelResource = new Resource();\n      // fetch info from it;\n      modelResource.resourceIdentifier(resource.__resourceIdentifier);\n      modelResource._resourceURI = resource.iri;\n      modelResource.addSemanticType(resource.type);\n\n      this.__processLabels(resource, modelResource);\n      this.__processComments(resource, modelResource);\n      this.__processResourceAxioms(resource, modelResource);\n      model.addResource(modelResource);\n    });\n  }\n\n  __processRelations(model, dataObject) {\n    dataObject.relations.forEach(relation => {\n      if (!relation.iri) {\n        relation.__resourceIdentifier = relation.type; // kindOF processing type as IRI (e.g. OWL:THING or so)\n      } else {\n        relation.__resourceIdentifier = relation.iri;\n      }\n\n      // VOWL provides axioms directly as relations, here ignore.\n      if (relation.type === \"rdfs:SubClassOf\") {\n        return;\n      }\n\n      const modelRelation = new Relation();\n      // fetch info from it;\n      modelRelation.resourceIdentifier(relation.__resourceIdentifier);\n      modelRelation._resourceURI = relation.iri;\n      modelRelation.addSemanticType(relation.type);\n\n      this.__processLabels(relation, modelRelation);\n      this.__processComments(relation, modelRelation);\n      this.__processRelationAxioms(relation, modelRelation);\n      this.__processRelationAttributes(relation, modelRelation);\n\n      model.addRelation(modelRelation);\n    });\n  }\n  _preProcess = () => {\n    // we merge the vowl json data ;\n    const classArray = this.inputDataAsJsonObject.class;\n    const propArray = this.inputDataAsJsonObject.property;\n\n    // how to merge that;\n    let resourceMap = new Map(classArray.map(d => [d.id, d]));\n    let relationMap = new Map(propArray.map(d => [d.id, d]));\n\n    const cAttr = this.inputDataAsJsonObject.classAttribute;\n    const pAttr = this.inputDataAsJsonObject.propertyAttribute;\n\n    cAttr.forEach(item => {\n      item.type = resourceMap.get(item.id).type;\n    });\n\n    // now use the new attributes array as map input\n    resourceMap = new Map(cAttr.map(d => [d.id, d]));\n\n    cAttr.forEach(item => {\n      if (item.superClasses) {\n        for (let i = 0; i < item.superClasses.length; i++) {\n          item.superClasses[i] = resourceMap.get(item.superClasses[i]).iri;\n        }\n      }\n      if (item.equivalent) {\n        for (let i = 0; i < item.equivalent.length; i++) {\n          item.equivalent[i] = resourceMap.get(item.equivalent[i]).iri;\n        }\n      }\n    });\n\n    pAttr.forEach(item => {\n      item.type = relationMap.get(item.id).type;\n      if (item.domain) {\n        // overwrite it to be an uri;\n        item.domain = resourceMap.get(item.domain).iri;\n      }\n      if (item.range) {\n        // overwrite it to be an uri;\n        item.range = resourceMap.get(item.range).iri;\n      }\n    });\n\n    // now use the new attributes array as map input\n    relationMap = new Map(pAttr.map(d => [d.id, d]));\n    pAttr.forEach(item => {\n      if (item.subproperty) {\n        for (let i = 0; i < item.subproperty.length; i++) {\n          item.subproperty[i] = relationMap.get(item.subproperty[i]).iri;\n        }\n      }\n      if (item.equivalent) {\n        for (let i = 0; i < item.equivalent.length; i++) {\n          item.equivalent[i] = relationMap.get(item.equivalent[i]).iri;\n        }\n      }\n      if (item.inverse) {\n        item.inverse = relationMap.get(item.inverse).iri;\n      }\n    });\n    return { resources: cAttr, relations: pAttr };\n  };\n}\n","// data handler is a base class;\n\nimport * as $CONST from \"../Base/BaseComponentConstants\";\nimport BaseModel from \"../Base/BaseModel\";\n\nexport default class VertexEdgeModel extends BaseModel {\n  constructor() {\n    super();\n    this.type = $CONST.TYPE_VERTEX_EDGE_MODEL; // default type;\n\n    // initialize the model with array of resources and relations;\n    this.modelAsJsonObject = { vertices: [], edges: [] };\n\n    // create mappers for resources and relations;\n    this.vertexeMap = {};\n    this.edgeMap = {};\n\n    this.__resourceIdentifier = \"__vertexEdgeIdentifier\"; // default, assume forced ids from outside;\n  }\n\n  vertexInMap(name) {\n    // this is for axioms checking;\n    return this.__isInMap__(this.vertexeMap, name);\n  }\n\n  getVertexFromName(name) {\n    return this.vertexeMap[name];\n  }\n\n  /** -------------- Must OVERWRITE FUNCTIONS --------------**/\n  __isInMap__ = (map, identifier) => {\n    if (!identifier) {\n      console.error(\n        \"No Identifier Found in resource! give it unique ids as properties and set the resourceIdentifier name (setResourceIdentifier('ID'))\"\n      );\n    } else {\n      return !!map[identifier];\n    }\n\n    return true; // if is in map (per default this blocks to add items to model)!\n  };\n\n  __resourceIdentifier__ = resourceObject => {\n    return resourceObject[this.__resourceIdentifier];\n  };\n\n  /** -------------- Exposed Functions --------------**/\n\n  addVertex = vertex => {\n    if (\n      !this.__isInMap__(this.vertexeMap, this.__resourceIdentifier__(vertex))\n    ) {\n      this.__integrateVertexEdgeItem(\n        this.modelAsJsonObject.vertices,\n        this.vertexeMap,\n        vertex\n      );\n    }\n  };\n\n  addEdge = edge => {\n    if (!this.__isInMap__(this.edgeMap, this.__resourceIdentifier__(edge))) {\n      this.__integrateVertexEdgeItem(\n        this.modelAsJsonObject.edges,\n        this.edgeMap,\n        edge\n      );\n    }\n  };\n\n  __integrateVertexEdgeItem = (target, map, resource) => {\n    target.push(resource);\n    map[this.__resourceIdentifier__(resource)] = resource;\n  };\n}\n","export default class Vertex {\n  constructor() {\n    this.resourceReference = null;\n    this.__outgoingEdges = [];\n    this.__incomingEdges = [];\n  }\n\n  addOutgoingEdge(edge) {\n    this.__outgoingEdges.push(edge);\n  }\n\n  addIncomingEdge(edge) {\n    this.__incomingEdges.push(edge);\n  }\n}\n","export default class Edge {\n  constructor() {\n    this.resourceReference = null;\n  }\n}\n","// data handler is a base class;\n\nimport * as $CONST from \"../Base/BaseComponentConstants\";\nimport BaseComponent from \"../Base/BaseComponent\";\nimport VertexEdgeModel from \"../Models/VertexEdgeModel\";\nimport Vertex from \"../Models/Vertex\";\nimport Edge from \"../Models/Edge\";\nimport { validIRI } from \"../Base/globalHelper\";\nexport default class VertexEdgeMapper extends BaseComponent {\n  constructor() {\n    super();\n    this.type = $CONST.TYPE_VERTEX_EDGE_MAPPER; // default type;\n\n    this.requestedInputType = $CONST.TYPE_RESOURCE_RELATION_MODEL;\n    this.hasCompatibleInput = false;\n\n    this.definitionMap = {\n      // mapping definitions; // defines the mapping from resource to vertex\n      vertexMapper: {\n        __vertexType: \"_semanticType\", // how do we handle multiple vertex type? << we dont node link model does!\n        __vertexEdgeIdentifier: \"__resourceIdentifier\",\n        __displayName: \"_annotations.rdfs:label\" // will fetch the full object with language defs! node link model gets prefLanguage tag\n      },\n\n      edgeMapper: {\n        __edgeType: \"_semanticType\", // how do we handle multiple vertex type? << we dont node link model does!\n        __vertexEdgeIdentifier: \"__resourceIdentifier\",\n        __displayName: \"_annotations.rdfs:label\", // will fetch the full object with language defs! node link model gets prefLanguage tag\n        __sources: \"domains\", // just renaming it\n        __targets: \"ranges\" // just renaming it\n      }\n    };\n  }\n\n  /** -------------- EXPOSED FUNCTIONS -------------- DO NOT OVERWRITE **/\n  setInputData = inputDataAsJsonObject => {\n    this.inputDataAsJsonObject = inputDataAsJsonObject;\n\n    // check if type is compatible;\n    if (this.requestedInputType === inputDataAsJsonObject.resultingModel.type) {\n      this.hasCompatibleInput = true;\n    } else {\n      console.error(\n        \"INPUT MODEL IS OF TYPE \" +\n          inputDataAsJsonObject.resultingModel.type +\n          \"EXPECTED: \" +\n          this.requestedInputType\n      );\n    }\n  };\n\n  /** -------------- Must OVERWRITE FUNCTIONS --------------**/\n  __run__ = () => {\n    if (this.hasCompatibleInput) {\n      this.__mapInputModel();\n    } else {\n      console.error(\"CANCELLED!\");\n      this.resultObject.resultingModel = null;\n    }\n  };\n\n  __mapInputModel = () => {\n    // obtain the data items;\n    const model = this.inputDataAsJsonObject.resultingModel;\n    const modelData = model.getResult();\n\n    const veModel = new VertexEdgeModel();\n    veModel.setResourceIdentifier(\"__vertexEdgeIdentifier\"); // lookup name\n\n    this.__mapResourcesToVertex(veModel, modelData.resources);\n    this.__mapRelationsToEdge(veModel, modelData.relations);\n    this.resultObject.resultingModel = veModel;\n  };\n\n  __mapResourcesToVertex(model, dataArray) {\n    // note no arrow function, otherwise model will not be updated(call by ref)\n    dataArray.forEach(item => {\n      const mappedVertex = this._createVertexFromResource(item);\n      model.addVertex(mappedVertex);\n    });\n\n    // ------------------------AXIOMS HANDLING -----------------------\"\n\n    // get model Vertices;\n    const vertexList = model.modelAsJsonObject.vertices;\n\n    vertexList.forEach(vertex => {\n      // check if vertex._annotations exists;\n      if (\n        vertex.resourceReference._axioms &&\n        Object.keys(vertex.resourceReference._axioms).length > 0\n      ) {\n        const axiomsArray = vertex.resourceReference._axioms;\n\n        for (const name in axiomsArray) {\n          if (axiomsArray.hasOwnProperty(name)) {\n            // this a particular axiom;\n            const pAx = axiomsArray[name];\n            pAx.forEach(axiom => {\n              if (!model.vertexInMap(axiom)) {\n                console.error(\n                  \"VERTEX DOES NOT EXIST IN THE MAP: TODO CREATE ONE! \"\n                );\n              }\n              const targetVertex = model.getVertexFromName(axiom);\n              const axiomEdge = this.__createAxiomEdge(\n                vertex,\n                name,\n                targetVertex\n              );\n              model.addEdge(axiomEdge);\n            });\n          }\n        }\n      }\n    });\n  }\n\n  __createAxiomEdge(srcVertex, axiomName, targetVertex) {\n    const anEdge = new Edge();\n    anEdge.resourceReference = axiomName;\n    anEdge.__edgeType = \"axiomEdge\";\n    anEdge.__edgeAxiom = axiomName;\n    anEdge.__vertexEdgeIdentifier =\n      srcVertex.__vertexEdgeIdentifier +\n      \"$$\" +\n      axiomName +\n      \"$$\" +\n      targetVertex.__vertexEdgeIdentifier;\n    anEdge.__displayName = axiomName;\n    anEdge.__sources = [srcVertex];\n    anEdge.__targets = [targetVertex];\n\n    srcVertex.addOutgoingEdge(anEdge);\n    targetVertex.addIncomingEdge(anEdge);\n\n    return anEdge;\n  }\n\n  _createVertexFromResource = item => {\n    const aVertex = new Vertex();\n    aVertex.resourceReference = item;\n\n    // create the mappings;\n    const vMapper = this.definitionMap.vertexMapper;\n    for (const name in vMapper) {\n      if (vMapper.hasOwnProperty(name)) {\n        // fetch data;\n        const dataPath = vMapper[name];\n        if (dataPath.indexOf(\".\") !== -1) {\n          // need to perform nested getter;\n          const tokens = dataPath.split(\".\");\n          let dataItem = item;\n          for (let i = 0; i < tokens.length; i++) {\n            dataItem = dataItem[tokens[i]];\n          }\n          aVertex[name] = dataItem;\n        } else {\n          // single data access in item\n          aVertex[name] = item[dataPath];\n        }\n      }\n    }\n    return aVertex;\n  };\n\n  __mapRelationsToEdge(model, dataArray) {\n    // note no arrow function, otherwise model will not be updated(call by ref)\n    dataArray.forEach(item => {\n      const mappedEdge = this._createEdgeFromRelation(item);\n      // add some magic;\n      for (let i = 0; i < mappedEdge.__sources.length; i++) {\n        const src = mappedEdge.__sources[i];\n        const vertex = model.getVertexFromName(src);\n\n        if (vertex) {\n          mappedEdge.__sources[i] = vertex;\n          vertex.addOutgoingEdge(mappedEdge);\n        }\n      }\n      for (let i = 0; i < mappedEdge.__targets.length; i++) {\n        const tar = mappedEdge.__targets[i];\n        const vertex = model.getVertexFromName(tar);\n\n        if (vertex) {\n          mappedEdge.__targets[i] = vertex;\n          vertex.addIncomingEdge(mappedEdge);\n        } else {\n          if (\n            model.getVertexFromName(\n              mappedEdge.__vertexEdgeIdentifier + \"$$\" + tar\n            )\n          ) {\n            const tempVertex = model.getVertexFromName(\n              mappedEdge.__vertexEdgeIdentifier + \"$$\" + tar\n            );\n            mappedEdge.__targets[i] = tempVertex;\n            tempVertex.addIncomingEdge(mappedEdge);\n          } else {\n            console.error(\"NO VERTEX FOUND FOR NAME \" + tar);\n            // create one !\n            const aVertex = new Vertex();\n            aVertex.resourceReference = tar;\n            if (validIRI(tar)) {\n              // create the id for this vertex;\n              aVertex.__vertexEdgeIdentifier = tar;\n            } else {\n              aVertex.__vertexType = \"Literal\";\n              // its id is the full tripple;\n              aVertex.__vertexEdgeIdentifier =\n                mappedEdge.__vertexEdgeIdentifier + \"$$\" + tar;\n              aVertex.__displayName = tar; // this is the literal value of something we have not identified\n            }\n            // we assume that all resources are created (the ones which could be created)\n            // otherwise we point on a literal or a resource that has not been created>> means external resource or\n            // not jet read any information about that;\n            aVertex.addIncomingEdge(mappedEdge);\n            model.addVertex(aVertex);\n            mappedEdge.__targets[i] = aVertex;\n          }\n        }\n      }\n      model.addEdge(mappedEdge);\n    });\n  }\n\n  _createEdgeFromRelation = item => {\n    const anEdge = new Edge();\n    anEdge.resourceReference = item;\n\n    // create based on the mapping def;\n    const eMapper = this.definitionMap.edgeMapper;\n    for (const name in eMapper) {\n      if (eMapper.hasOwnProperty(name)) {\n        // fetch data;\n        const dataPath = eMapper[name];\n        if (dataPath.indexOf(\".\") !== -1) {\n          // need to perform nested getter;\n          const tokens = dataPath.split(\".\");\n          let dataItem = item;\n          for (let i = 0; i < tokens.length; i++) {\n            dataItem = dataItem[tokens[i]];\n          }\n          anEdge[name] = dataItem;\n        } else {\n          // single data access in item\n          anEdge[name] = item[dataPath];\n        }\n      }\n    }\n    return anEdge;\n  };\n}\n","// data handler is a base class;\n\nimport * as $CONST from \"../Base/BaseComponentConstants\";\nimport BaseComponent from \"../Base/BaseComponent\";\nimport VertexEdgeModel from \"../Models/VertexEdgeModel\";\nimport Vertex from \"../Models/Vertex\";\nimport Edge from \"../Models/Edge\";\nimport { validIRI } from \"../Base/globalHelper\";\nexport default class VertexEdgeMapper extends BaseComponent {\n  constructor() {\n    super();\n    this.type = $CONST.TYPE_VERTEX_EDGE_MAPPER; // default type;\n\n    this.requestedInputType = $CONST.TYPE_RESOURCE_RELATION_MODEL;\n    this.hasCompatibleInput = false;\n\n    this.definitionMap = {\n      // mapping definitions; // defines the mapping from resource to vertex\n      vertexMapper: {\n        __vertexType: \"_semanticType\", // how do we handle multiple vertex type? << we dont node link model does!\n        __vertexEdgeIdentifier: \"__resourceIdentifier\",\n        __displayName: \"_annotations.rdfs:label\" // will fetch the full object with language defs! node link model gets prefLanguage tag\n      },\n\n      edgeMapper: {\n        __edgeType: \"_semanticType\", // how do we handle multiple vertex type? << we dont node link model does!\n        __vertexEdgeIdentifier: \"__resourceIdentifier\",\n        __displayName: \"__resourceIdentifier\", // will fetch the full object with language defs! node link model gets prefLanguage tag\n        __sources: \"domains\", // just renaming it\n        __targets: \"ranges\" // just renaming it\n      }\n    };\n  }\n\n  /** -------------- EXPOSED FUNCTIONS -------------- DO NOT OVERWRITE **/\n  setInputData = inputDataAsJsonObject => {\n    this.inputDataAsJsonObject = inputDataAsJsonObject;\n\n    // check if type is compatible;\n    if (this.requestedInputType === inputDataAsJsonObject.resultingModel.type) {\n      this.hasCompatibleInput = true;\n    } else {\n      console.error(\n        \"INPUT MODEL IS OF TYPE \" +\n          inputDataAsJsonObject.resultingModel.type +\n          \"EXPECTED: \" +\n          this.requestedInputType\n      );\n    }\n  };\n\n  /** -------------- Must OVERWRITE FUNCTIONS --------------**/\n  __run__ = () => {\n    if (this.hasCompatibleInput) {\n      this.__mapInputModel();\n    } else {\n      console.error(\"CANCELLED!\");\n      this.resultObject.resultingModel = null;\n    }\n  };\n\n  __mapInputModel = () => {\n    // obtain the data items;\n    const model = this.inputDataAsJsonObject.resultingModel;\n    const modelData = model.getResult();\n\n    const veModel = new VertexEdgeModel();\n    veModel.setResourceIdentifier(\"__vertexEdgeIdentifier\"); // lookup name\n\n    this.__mapResourcesToVertex(veModel, modelData.resources);\n    this.__mapRelationsToEdge(veModel, modelData.relations);\n    this.resultObject.resultingModel = veModel;\n  };\n\n  __mapResourcesToVertex(model, dataArray) {\n    // note no arrow function, otherwise model will not be updated(call by ref)\n    dataArray.forEach(item => {\n      const mappedVertex = this._createVertexFromResource(item);\n      model.addVertex(mappedVertex);\n    });\n\n    // ------------------------AXIOMS HANDLING -----------------------\"\n\n    // get model Vertices;\n    const vertexList = model.modelAsJsonObject.vertices;\n\n    vertexList.forEach(vertex => {\n      // check if vertex._annotations exists;\n      if (\n        vertex.resourceReference._axioms &&\n        Object.keys(vertex.resourceReference._axioms).length > 0\n      ) {\n        const axiomsArray = vertex.resourceReference._axioms;\n\n        for (const name in axiomsArray) {\n          if (axiomsArray.hasOwnProperty(name)) {\n            // this a particular axiom;\n            const pAx = axiomsArray[name];\n            pAx.forEach(axiom => {\n              if (!model.vertexInMap(axiom)) {\n                console.error(\n                  \"VERTEX DOES NOT EXIST IN THE MAP: TODO CREATE ONE! \"\n                );\n              }\n              const targetVertex = model.getVertexFromName(axiom);\n              const axiomEdge = this.__createAxiomEdge(\n                vertex,\n                name,\n                targetVertex\n              );\n              model.addEdge(axiomEdge);\n            });\n          }\n        }\n      }\n    });\n  }\n\n  __createAxiomEdge(srcVertex, axiomName, targetVertex) {\n    const anEdge = new Edge();\n    anEdge.resourceReference = axiomName;\n    anEdge.__edgeType = \"axiomEdge\";\n    anEdge.__edgeAxiom = axiomName;\n    anEdge.__vertexEdgeIdentifier =\n      srcVertex.__vertexEdgeIdentifier +\n      \"$$\" +\n      axiomName +\n      \"$$\" +\n      targetVertex.__vertexEdgeIdentifier;\n    anEdge.__displayName = axiomName;\n    anEdge.__sources = [srcVertex];\n    anEdge.__targets = [targetVertex];\n\n    srcVertex.addOutgoingEdge(anEdge);\n    targetVertex.addIncomingEdge(anEdge);\n\n    return anEdge;\n  }\n\n  _createVertexFromResource = item => {\n    const aVertex = new Vertex();\n    aVertex.resourceReference = item;\n\n    // create the mappings;\n    const vMapper = this.definitionMap.vertexMapper;\n    for (const name in vMapper) {\n      if (vMapper.hasOwnProperty(name)) {\n        // fetch data;\n        const dataPath = vMapper[name];\n        if (dataPath.indexOf(\".\") !== -1) {\n          // need to perform nested getter;\n          const tokens = dataPath.split(\".\");\n          let dataItem = item;\n          for (let i = 0; i < tokens.length; i++) {\n            dataItem = dataItem[tokens[i]];\n          }\n          aVertex[name] = dataItem;\n        } else {\n          // single data access in item\n          aVertex[name] = item[dataPath];\n        }\n      }\n    }\n    return aVertex;\n  };\n\n  __mapRelationsToEdge(model, dataArray) {\n    // note no arrow function, otherwise model will not be updated(call by ref)\n    dataArray.forEach(item => {\n      const mappedEdge = this._createEdgeFromRelation(item);\n      // add some magic;\n      for (let i = 0; i < mappedEdge.__sources.length; i++) {\n        const src = mappedEdge.__sources[i];\n        const vertex = model.getVertexFromName(src);\n\n        if (vertex) {\n          mappedEdge.__sources[i] = vertex;\n          vertex.addOutgoingEdge(mappedEdge);\n        }\n      }\n      for (let i = 0; i < mappedEdge.__targets.length; i++) {\n        const tar = mappedEdge.__targets[i];\n        const vertex = model.getVertexFromName(tar);\n\n        if (vertex) {\n          mappedEdge.__targets[i] = vertex;\n          vertex.addIncomingEdge(mappedEdge);\n        } else {\n          if (\n            model.getVertexFromName(\n              mappedEdge.__vertexEdgeIdentifier + \"$$\" + tar\n            )\n          ) {\n            const tempVertex = model.getVertexFromName(\n              mappedEdge.__vertexEdgeIdentifier + \"$$\" + tar\n            );\n            mappedEdge.__targets[i] = tempVertex;\n            tempVertex.addIncomingEdge(mappedEdge);\n          } else {\n            console.error(\"NO VERTEX FOUND FOR NAME \" + tar);\n            // create one !\n            const aVertex = new Vertex();\n            aVertex.resourceReference = tar;\n            if (validIRI(tar)) {\n              // create the id for this vertex;\n              aVertex.__vertexEdgeIdentifier = tar;\n            } else {\n              aVertex.__vertexType = \"Literal\";\n              // its id is the full tripple;\n              aVertex.__vertexEdgeIdentifier =\n                mappedEdge.__vertexEdgeIdentifier + \"$$\" + tar;\n              aVertex.__displayName = tar; // this is the literal value of something we have not identified\n            }\n            // we assume that all resources are created (the ones which could be created)\n            // otherwise we point on a literal or a resource that has not been created>> means external resource or\n            // not jet read any information about that;\n            aVertex.addIncomingEdge(mappedEdge);\n            model.addVertex(aVertex);\n            mappedEdge.__targets[i] = aVertex;\n          }\n        }\n      }\n      model.addEdge(mappedEdge);\n      // duplicate for multiple domain and ranges; // needed for sparql stuff;\n\n      if (\n        mappedEdge.__sources.length === 1 &&\n        mappedEdge.__targets.length > 1\n      ) {\n        // clone the edge and set the target to the new element;\n        for (let i = 1; i < mappedEdge.__targets.length; i++) {\n          const clonedEdge = new Edge();\n          for (const name in mappedEdge) {\n            if (mappedEdge.hasOwnProperty(name)) {\n              clonedEdge[name] = mappedEdge[name];\n            }\n          }\n\n          const newTarget = clonedEdge.__targets[i];\n          clonedEdge.__targets = [newTarget];\n          clonedEdge.__vertexEdgeIdentifier += \"$$ClonedEdge\" + i;\n          newTarget.addIncomingEdge(clonedEdge);\n          model.addEdge(clonedEdge);\n        }\n      }\n    });\n  }\n\n  _createEdgeFromRelation = item => {\n    const anEdge = new Edge();\n    anEdge.resourceReference = item;\n\n    // create based on the mapping def;\n    const eMapper = this.definitionMap.edgeMapper;\n    for (const name in eMapper) {\n      if (eMapper.hasOwnProperty(name)) {\n        // fetch data;\n        const dataPath = eMapper[name];\n        if (dataPath.indexOf(\".\") !== -1) {\n          // need to perform nested getter;\n          const tokens = dataPath.split(\".\");\n          let dataItem = item;\n          for (let i = 0; i < tokens.length; i++) {\n            dataItem = dataItem[tokens[i]];\n          }\n          anEdge[name] = dataItem;\n        } else {\n          // single data access in item\n          anEdge[name] = item[dataPath];\n        }\n      }\n    }\n    return anEdge;\n  };\n}\n","export default class Node {\n  constructor() {\n    this.resourceReference = null;\n    this.__outgoingLinks = [];\n    this.__incomingLinks = [];\n    this.__nodeType = [];\n    this.__aggregatedLink = [];\n  }\n\n  addAggregatedLink(link) {\n    this.__aggregatedLink.push(link);\n  }\n\n  addOutgoingLink(link) {\n    this.__outgoingLinks.push(link);\n  }\n\n  addIncomingLink(link) {\n    this.__incomingLinks.push(link);\n  }\n\n  isNodeOfType(type) {\n    for (let i = 0; i < this.__nodeType.length; i++) {\n      if (this.__nodeType[i] === type) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n","export default class Link {\n  constructor() {\n    this.resourceReference = null;\n  }\n}\n","import validURL, { validIRI } from \"./globalHelper\";\nexport default class LanguageTools {\n  static textInLanguage = (textObject, preferredLanguage) => {\n    if (typeof textObject === \"undefined\") {\n      return undefined;\n    }\n\n    if (typeof textObject === \"string\") {\n      if (validIRI(textObject)) {\n        let suffix = textObject.split(\"#\")[1];\n        if (!suffix) {\n          const tokens = textObject.split(\"/\");\n          suffix = tokens[tokens.length - 1];\n        }\n        return suffix;\n      }\n      return textObject;\n    }\n\n    if (preferredLanguage && textObject.hasOwnProperty(preferredLanguage)) {\n      return textObject[preferredLanguage][0];\n    }\n\n    let textForLanguage = this.searchLanguage(textObject, \"en\");\n    if (textForLanguage) {\n      return textForLanguage[0];\n    }\n    textForLanguage = this.searchLanguage(textObject, \"default\");\n    if (textForLanguage) {\n      return textForLanguage[0];\n    }\n    return null;\n  };\n\n  static IRI2Label(prefixMap, IRI) {\n    let suffix = IRI.split(\"#\")[1];\n    let pref = \"\";\n    if (!suffix) {\n      const tokens = IRI.split(\"/\");\n      suffix = tokens[tokens.length - 1];\n      for (let i = 0; i < tokens.length - 1; i++) {\n        pref += tokens[i];\n      }\n      pref += \"/\";\n    } else {\n      pref = IRI.split(\"#\")[0];\n      pref += \"#\";\n    }\n    let output = \"\";\n    const prName = prefixMap[pref];\n    if (prName) {\n      output = prName + \":\" + suffix;\n    } else {\n      output = suffix;\n    }\n    return output;\n  }\n\n  static searchLanguage = (textObject, preferredLanguage) => {\n    for (const language in textObject) {\n      if (\n        language === preferredLanguage &&\n        textObject.hasOwnProperty(language)\n      ) {\n        return textObject[language];\n      }\n    }\n  };\n}\n","// data handler is a base class;\n\nimport * as $CONST from \"../Base/BaseComponentConstants\";\nimport BaseModel from \"../Base/BaseModel\";\n\nexport default class NodeLinkModel extends BaseModel {\n  constructor() {\n    super();\n    this.type = $CONST.TYPE_NODE_LINK_MODEL; // default type;\n\n    // initialize the model with array of resources and relations;\n    this.modelAsJsonObject = { nodes: [], links: [] };\n\n    // create mappers for resources and relations;\n    this.nodeMap = {};\n    this.linkMap = {};\n\n    this.__resourceIdentifier = \"__nodeLinkIdentifier\"; // default, assume forced ids from outside;\n  }\n\n  // nodeInMap(name) {\n  //   // this is for axioms checking;\n  //   return this.__isInMap__(this.nodeMap, name);\n  // }\n\n  getNodeFromName(name) {\n    return this.nodeMap[name];\n  }\n\n  /** -------------- Must OVERWRITE FUNCTIONS --------------**/\n  __isInMap__ = (map, identifier) => {\n    if (!identifier) {\n      console.error(\n        \"No Identifier Found in resource! give it unique ids as properties and set the resourceIdentifier name (setResourceIdentifier('ID'))\"\n      );\n    } else {\n      return !!map[identifier];\n    }\n\n    return true; // if is in map (per default this blocks to add items to model)!\n  };\n\n  __isEqual__ = (a, b) => {\n    // input a and b are objects with properties where some are maybe equal\n    return false;\n  };\n\n  __resourceIdentifier__ = resourceObject => {\n    return resourceObject[this.__resourceIdentifier];\n  };\n\n  /** -------------- Exposed Functions --------------**/\n\n  addNode = node => {\n    if (!this.__isInMap__(this.nodeMap, this.__resourceIdentifier__(node))) {\n      this.__integrateNodeLinkItem(\n        this.modelAsJsonObject.nodes,\n        this.nodeMap,\n        node\n      );\n    }\n  };\n\n  addLink = link => {\n    if (!this.__isInMap__(this.linkMap, this.__resourceIdentifier__(link))) {\n      this.__integrateNodeLinkItem(\n        this.modelAsJsonObject.links,\n        this.linkMap,\n        link\n      );\n    }\n  };\n\n  mergeNodes(src, tar) {\n    tar.__SHADOWNODE = true;\n    src.__displayName += \", \" + tar.__displayName;\n    if (!src.__hasEquivalentClasses) {\n      src.__hasEquivalentClasses = [];\n    }\n    src.__hasEquivalentClasses.push(tar); // could be useful for later;\n    // get its links and move them to the src node;\n\n    tar.__incomingLinks.forEach(inLink => {\n      if (!inLink.__SHADOWLINK) {\n        console.error(\"TODO MERGE THE LINKS TO THE SRC NODE\");\n        console.log(inLink);\n      }\n    });\n\n    tar.__outgoingLinks.forEach(outLink => {\n      if (!outLink.__SHADOWLINK) {\n        console.error(\"TODO MERGE THE LINKS TO THE SRC NODE\");\n        console.log(outLink);\n      }\n    });\n  }\n\n  removeShadowsFromModel() {\n    const nodesToRemove = [];\n    const linksToRemove = [];\n    this.modelAsJsonObject.nodes.forEach(node => {\n      if (node.__SHADOWNODE) {\n        // remove from map;\n        nodesToRemove.push(node);\n        delete this.nodeMap[node[this.__resourceIdentifier]];\n      }\n    });\n    this.modelAsJsonObject.links.forEach(link => {\n      if (link.__SHADOWLINK) {\n        // remove from map;\n        linksToRemove.push(link);\n        delete this.linkMap[link[this.__resourceIdentifier]];\n      }\n    });\n\n    // remove them from array of vertices;\n    nodesToRemove.forEach(n => {\n      const idToRemove = this.modelAsJsonObject.nodes.indexOf(n);\n      this.modelAsJsonObject.nodes.splice(idToRemove, 1);\n    });\n\n    linksToRemove.forEach(l => {\n      const idToRemove = this.modelAsJsonObject.links.indexOf(l);\n      this.modelAsJsonObject.links.splice(idToRemove, 1);\n    });\n  }\n\n  __integrateNodeLinkItem = (target, map, resource) => {\n    target.push(resource);\n    map[this.__resourceIdentifier__(resource)] = resource;\n  };\n}\n","// data handler is a base class;\nimport BaseComponent from \"../Base/BaseComponent\";\nimport * as $CONST from \"../Base/BaseComponentConstants\";\n\nimport Node from \"../Models/Node\";\nimport Link from \"../Models/Link\";\nimport LanguageTools from \"../Base/LanguageTools\";\nimport { validIRI } from \"../Base/globalHelper\";\nimport NodeLinkModel from \"../Models/NodeLinkModel\";\nimport { node } from \"prop-types\";\n\nexport default class NodeLinkMapper extends BaseComponent {\n  constructor() {\n    super();\n    this.type = $CONST.TYPE_VERTEX_EDGE_MAPPER; // default type;\n\n    this.requestedInputType = $CONST.TYPE_VERTEX_EDGE_MODEL;\n    this.hasCompatibleInput = false;\n\n    this.prefixMapperL2S = {\n      \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\": \"rdf\",\n      \"http://www.w3.org/2000/01/rdf-schema#\": \"rdfs\",\n      \"http://www.w3.org/2002/07/owl#\": \"owl\",\n      \"http://www.w3.org/2001/XMLSchema#\": \"xsd\",\n      \"http://purl.org/dc/elements/1.1/\": \"dc\",\n      \"http://www.w3.org/XML/1998/namespace\": \"xml\",\n      \"http://xmlns.com/wot/0.1/\": \"wot\",\n      \"http://www.w3.org/2003/06/sw-vocab-status/ns#\": \"vs\",\n      \"http://xmlns.com/foaf/0.1/\": \"foaf\",\n      \"http://www.w3.org/2004/02/skos/core#\": \"skos\"\n    };\n\n    this.definitionMap = {\n      nodeMapper: {\n        __nodeType: \"__vertexType\",\n        __nodeLinkIdentifier: \"__vertexEdgeIdentifier\",\n        __displayName: \"__displayName\"\n      },\n      linkMapper: {\n        __linkType: \"__edgeType\",\n        __nodeLinkIdentifier: \"__vertexEdgeIdentifier\",\n        __displayName: \"__displayName\",\n        __linkAxiom: \"__edgeAxiom\"\n      },\n      nodeMerge: [\n        {\n          __linkType: \"axiomLink\",\n          __displayName: \"owl:equivalentClass\"\n        }\n      ],\n      nodeSplit: [\n        {\n          constraints: \"none\",\n          type: [\"rdfs:Literal\"]\n          // there could be more types like xsd:datatype or so\n        }\n      ],\n      auxiliaryNodes: [] // here empty\n    };\n  }\n\n  /** -------------- EXPOSED FUNCTIONS -------------- DO NOT OVERWRITE **/\n  setInputData = inputDataAsJsonObject => {\n    this.inputDataAsJsonObject = inputDataAsJsonObject;\n    // check if type is compatible;\n    if (this.requestedInputType === inputDataAsJsonObject.resultingModel.type) {\n      this.hasCompatibleInput = true;\n    } else {\n      console.error(\n        \"INPUT MODEL IS OF TYPE \" +\n          inputDataAsJsonObject.resultingModel.type +\n          \"EXPECTED: \" +\n          this.requestedInputType\n      );\n    }\n  };\n\n  /** -------------- Must OVERWRITE FUNCTIONS --------------**/\n  __run__ = () => {\n    if (this.hasCompatibleInput) {\n      this.__mapInputModel();\n    } else {\n      console.error(\"CANCELLED!\");\n      this.resultObject.resultingModel = null;\n    }\n  };\n\n  __mapInputModel = () => {\n    // obtain the data items;\n    const model = this.inputDataAsJsonObject.resultingModel;\n    const modelData = model.getResult();\n    const resourceIdentifier = model.getResourceIdentifier();\n\n    const nlModel = new NodeLinkModel();\n    nlModel.setResourceIdentifier(\"__nodeLinkIdentifier\"); // lookup name\n\n    this.__mapVerticesToNodes(nlModel, modelData.vertices);\n    this._mapEdgesToLinks(nlModel, modelData.edges);\n\n    this._mergeAndSplitNodes(nlModel);\n\n    this.resultObject.resultingModel = nlModel;\n  };\n\n  _mergeAndSplitNodes(model) {\n    this._mergeNodes(model);\n    model.removeShadowsFromModel();\n\n    this._splitNodes(model); // this creates clones ad redirects the links;\n    model.removeShadowsFromModel();\n  }\n\n  _splitNodes(model) {\n    const links = model.modelAsJsonObject.links;\n    const splitDefs = this.definitionMap.nodeSplit;\n\n    const linksToSplit = [];\n    links.forEach(link => {\n      const splitAppliesTarget = this._splitAppliesOnTarget(link, splitDefs);\n      if (splitAppliesTarget) {\n        linksToSplit.push(link);\n      }\n    });\n    let cloneIterator = 0;\n    linksToSplit.forEach(link => {\n      // what we do is we clone the target node and adjust the link;\n      const nodeToClone = link.__target;\n      nodeToClone.__SHADOWNODE = true; // will be removed\n      const newNode = new Node();\n      for (const name in nodeToClone) {\n        if (nodeToClone.hasOwnProperty(name)) {\n          if (name !== \"__outgoingLinks\" && name !== \"__incomingLinks\") {\n            newNode[name] = nodeToClone[name];\n          }\n        }\n      }\n\n      newNode.__nodeLinkIdentifier =\n        newNode.__nodeLinkIdentifier + \"$$Clone\" + cloneIterator;\n      newNode.__SHADOWNODE = false;\n      model.addNode(newNode);\n      link.__target = newNode;\n      cloneIterator++;\n    });\n  }\n\n  _mergeNodes(model) {\n    // we merge nodes based on the links they have;\n\n    const links = model.modelAsJsonObject.links;\n    const mergeDefs = this.definitionMap.nodeMerge;\n\n    const linksToMerge = [];\n    links.forEach(link => {\n      const mergeApplies = this._mergeApplies(link, mergeDefs);\n      if (mergeApplies) {\n        link.__SHADOWLINK = true;\n        linksToMerge.push(link);\n      }\n    });\n    linksToMerge.forEach(link => {\n      const tokens = link.__nodeLinkIdentifier.split(\"$$\");\n      const srcNode = model.getNodeFromName(tokens[0]);\n      const tarNode = model.getNodeFromName(tokens[2]);\n      // merge the nodes;\n      model.mergeNodes(srcNode, tarNode);\n    });\n  }\n\n  _mergeApplies(link, constraints) {\n    let compares = 0;\n    let validCompares = 0;\n    let applies = false;\n    constraints.forEach(cons => {\n      for (const name in cons) {\n        if (cons.hasOwnProperty(name)) {\n          //name is the datatype value\n          const linkData = link[name];\n          const compareValue = cons[name];\n          compares++;\n          if (linkData === compareValue) {\n            validCompares++;\n          }\n        }\n      }\n      // found at least one definition that requests this merge;\n      if (validCompares === compares) {\n        applies = true;\n        return applies;\n      }\n    });\n    return applies;\n  }\n  _splitAppliesOnTarget(link, constraints) {\n    let compares = 0;\n    let validCompares = 0;\n    let applies = false;\n    constraints.forEach(cons => {\n      for (const name in cons) {\n        if (cons.hasOwnProperty(name)) {\n          //name is the datatype value\n\n          if (name === \"constraints\" && cons[name] === \"none\") {\n            // do nothing but tell that the validation suits the constraints;\n            compares++;\n            validCompares++;\n          } else {\n            // check for validation\n            if (name === \"type\") {\n              // check for type of the target node;\n              //compare against an array of types\n\n              const nodeTypesToApply = cons[name];\n              nodeTypesToApply.forEach(t => {\n                if (link.__target.isNodeOfType(t)) {\n                  validCompares++;\n                }\n              });\n              compares++;\n            }\n          }\n        }\n      }\n      // found at least one definition that requests this merge;\n      if (validCompares === compares) {\n        applies = true;\n        return applies;\n      }\n    });\n    return applies;\n  }\n\n  __mapVerticesToNodes(model, dataArray) {\n    // note no arrow function, otherwise model will not be updated(call by ref)\n\n    dataArray.forEach(item => {\n      const aNode = this._createNodeFromVertex(item);\n      // set displayName to be a string! ;\n      let langRep = LanguageTools.textInLanguage(aNode.__displayName);\n      if (langRep === null || langRep === undefined) {\n        if (validIRI(item.__vertexEdgeIdentifier)) {\n          langRep = LanguageTools.IRI2Label(\n            this.prefixMapperL2S,\n            item.__vertexEdgeIdentifier\n          );\n        } else {\n          console.error(\n            \"COULD NOT FIND A LABEL FOR VERTEX: \" + item.__vertexEdgeIdentifier\n          );\n        }\n      }\n      aNode.__displayName = langRep;\n      model.addNode(aNode);\n    });\n\n    // process Axioms;\n  }\n\n  _createNodeFromVertex = item => {\n    const aNode = new Node();\n    aNode.resourceReference = item;\n\n    // create the mappings;\n    const nMapper = this.definitionMap.nodeMapper;\n    for (const name in nMapper) {\n      if (nMapper.hasOwnProperty(name)) {\n        // fetch data;\n        const dataPath = nMapper[name];\n        if (dataPath.indexOf(\".\") !== -1) {\n          // need to perform nested getter;\n          const tokens = dataPath.split(\".\");\n          let dataItem = item;\n          for (let i = 0; i < tokens.length; i++) {\n            dataItem = dataItem[tokens[i]];\n          }\n          aNode[name] = dataItem;\n        } else {\n          // single data access in item\n          aNode[name] = item[dataPath];\n        }\n      }\n    }\n\n    return aNode;\n  };\n\n  _createLinkFromEdge = item => {\n    const aLink = new Link();\n    aLink.resourceReference = item;\n\n    // create the mappings;\n    const mapper = this.definitionMap.linkMapper;\n    for (const name in mapper) {\n      if (mapper.hasOwnProperty(name) && name !== \"mapAxiom\") {\n        // fetch data;\n        const dataPath = mapper[name];\n        if (dataPath.indexOf(\".\") !== -1) {\n          // need to perform nested getter;\n          const tokens = dataPath.split(\".\");\n          let dataItem = item;\n          for (let i = 0; i < tokens.length; i++) {\n            dataItem = dataItem[tokens[i]];\n          }\n          aLink[name] = dataItem;\n        } else {\n          // single data access in item\n          aLink[name] = item[dataPath];\n        }\n      }\n    }\n\n    // adjust display name\n    // adjust link type if it is derived from axiomEdge\n    if (aLink.__linkType === \"axiomEdge\") {\n      aLink.__linkType = \"axiomLink\";\n    }\n    aLink.__displayName = LanguageTools.textInLanguage(aLink.__displayName);\n\n    return aLink;\n  };\n\n  _mapEdgesToLinks(model, dataArray) {\n    // note no arrow function, otherwise model will not be updated(call by ref)\n\n    dataArray.forEach(item => {\n      // check for axioms;\n\n      const link = this._createLinkFromEdge(item);\n      // provide src and tar;\n      item.__sources.forEach(src => {\n        // find node in model;\n        const node = model.getNodeFromName(src.__vertexEdgeIdentifier);\n        if (!link.__source) {\n          link.__source = node;\n        }\n        node.addOutgoingLink(link);\n      });\n      item.__targets.forEach(src => {\n        // find node in model;\n        const node = model.getNodeFromName(src.__vertexEdgeIdentifier);\n        if (!link.__target) {\n          link.__target = node;\n        }\n        // link.__targets.push(node);\n        node.addOutgoingLink(link);\n      });\n      model.addLink(link);\n    });\n  }\n}\n","// data handler is a base class;\nimport BaseComponent from \"../Base/BaseComponent\";\nimport * as $CONST from \"../Base/BaseComponentConstants\";\n\nimport Node from \"../Models/Node\";\nimport Link from \"../Models/Link\";\nimport LanguageTools from \"../Base/LanguageTools\";\nimport { validIRI } from \"../Base/globalHelper\";\nimport NodeLinkModel from \"../Models/NodeLinkModel\";\nimport { node } from \"prop-types\";\n\nexport default class NodeLinkMapper extends BaseComponent {\n  constructor() {\n    super();\n    this.type = $CONST.TYPE_VERTEX_EDGE_MAPPER; // default type;\n\n    this.requestedInputType = $CONST.TYPE_VERTEX_EDGE_MODEL;\n    this.hasCompatibleInput = false;\n\n    this.prefixMapperL2S = {\n      \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\": \"rdf\",\n      \"http://www.w3.org/2000/01/rdf-schema#\": \"rdfs\",\n      \"http://www.w3.org/2002/07/owl#\": \"owl\",\n      \"http://www.w3.org/2001/XMLSchema#\": \"xsd\",\n      \"http://purl.org/dc/elements/1.1/\": \"dc\",\n      \"http://www.w3.org/XML/1998/namespace\": \"xml\",\n      \"http://xmlns.com/wot/0.1/\": \"wot\",\n      \"http://www.w3.org/2003/06/sw-vocab-status/ns#\": \"vs\",\n      \"http://xmlns.com/foaf/0.1/\": \"foaf\",\n      \"http://www.w3.org/2004/02/skos/core#\": \"skos\"\n    };\n\n    this.definitionMap = {\n      nodeMapper: {\n        __nodeType: \"__vertexType\",\n        __nodeLinkIdentifier: \"__vertexEdgeIdentifier\",\n        __displayName: \"__displayName\"\n      },\n      linkMapper: {\n        __linkType: \"__edgeType\",\n        __nodeLinkIdentifier: \"__vertexEdgeIdentifier\",\n        __displayName: \"__displayName\",\n        __linkAxiom: \"__edgeAxiom\"\n      },\n      nodeMerge: [\n        // {\n        //   __linkType: \"axiomLink\",\n        //   __displayName: \"owl:equivalentClass\"\n        // }\n      ],\n      nodeSplit: [\n        // {\n        //   constraints: \"none\",\n        //   type: [\"rdfs:Literal\"]\n        //   // there could be more types like xsd:datatype or so\n        // }\n      ],\n      auxiliaryNodes: [\n        {\n          edgeType: [\"owl:ObjectProperty\"], // constraint\n          auxiliaryLinks: {\n            source: [\"domain\", \"auxLink\"],\n            target: [\"range\", \"auxLink\"]\n          }, // what to do whit the link >> split domain range links << this sets the displayName and edge type\n          auxiliaryNode: [\"__displayName\", \"auxForObjectProperties\"] // will fetch the prop name for display name and set the type to auxiliary\n        },\n        {\n          edgeType: [\"owl:DatatypeProperty\"], // constraint\n          auxiliaryLinks: {\n            source: [\"domain\", \"auxLink\"],\n            target: [\"range\", \"auxLink\"]\n          }, // what to do whit the link >> split domain range links << this sets the displayName and edge type\n          auxiliaryNode: [\"__displayName\", \"auxForDataTypeProperties\"] // will fetch the prop name for display name and set the type to auxiliary\n        }\n      ]\n    };\n  }\n\n  /** -------------- EXPOSED FUNCTIONS -------------- DO NOT OVERWRITE **/\n  setInputData = inputDataAsJsonObject => {\n    this.inputDataAsJsonObject = inputDataAsJsonObject;\n    // check if type is compatible;\n    if (this.requestedInputType === inputDataAsJsonObject.resultingModel.type) {\n      this.hasCompatibleInput = true;\n    } else {\n      console.error(\n        \"INPUT MODEL IS OF TYPE \" +\n          inputDataAsJsonObject.resultingModel.type +\n          \"EXPECTED: \" +\n          this.requestedInputType\n      );\n    }\n  };\n\n  /** -------------- Must OVERWRITE FUNCTIONS --------------**/\n  __run__ = () => {\n    if (this.hasCompatibleInput) {\n      this.__mapInputModel();\n    } else {\n      console.error(\"CANCELLED!\");\n      this.resultObject.resultingModel = null;\n    }\n  };\n\n  __mapInputModel = () => {\n    // obtain the data items;\n    const model = this.inputDataAsJsonObject.resultingModel;\n\n    const modelData = model.getResult();\n    const resourceIdentifier = model.getResourceIdentifier();\n\n    const nlModel = new NodeLinkModel();\n    nlModel.setResourceIdentifier(\"__nodeLinkIdentifier\"); // lookup name\n\n    this.__mapVerticesToNodes(nlModel, modelData.vertices);\n    this._mapEdgesToLinks(nlModel, modelData.edges);\n\n    this._mergeAndSplitNodes(nlModel);\n    this._introduceAuxiliaryNode(nlModel);\n\n    this.resultObject.resultingModel = nlModel;\n  };\n\n  _introduceAuxiliaryNode(model) {\n    if (this.definitionMap.auxiliaryNodes) {\n      const def = this.definitionMap.auxiliaryNodes;\n      const links = model.modelAsJsonObject.links;\n\n      links.forEach(link => {\n        const auxDef = this._auxApplies(link, def);\n        if (auxDef !== false) {\n          link.__SHADOWLINK = true;\n\n          // create a link for the property using the auxDef.auxiliaryNodeDefinition;\n          const auxNode = new Node();\n          if (auxDef.auxNode[0] === \"__displayName\") {\n            auxNode.__displayName = link.__displayName;\n          } else {\n            auxNode.__displayName = auxDef.auxNode[0];\n          }\n          auxNode.__nodeType = [auxDef.auxNode[1]];\n          auxNode.resourceReference = link;\n          // create the links;\n\n          const auxLink1 = new Link();\n          const link1Def = auxDef.auxLinks.source;\n          auxLink1.__displayName = link1Def[0];\n          auxLink1.__linkType = link1Def[1];\n          auxLink1.__source = auxNode;\n          auxLink1.__target = link.__source;\n\n          const auxLink2 = new Link();\n          const link2Def = auxDef.auxLinks.target;\n          auxLink2.__displayName = link2Def[0];\n          auxLink2.__linkType = link2Def[1];\n          auxLink2.__source = auxNode;\n          auxLink2.__target = link.__target;\n\n          // todo, adjust ids;\n          auxNode.__nodeLinkIdentifier =\n            link.__source.__nodeLinkIdentifier +\n            \"$$\" +\n            link.__nodeLinkIdentifier +\n            \"$$\" +\n            link.__target.__nodeLinkIdentifier +\n            \"$$_AUXNODE\";\n\n          auxLink1.__nodeLinkIdentifier =\n            link.__source.__nodeLinkIdentifier +\n            \"$$\" +\n            link.__nodeLinkIdentifier +\n            \"$$\" +\n            link.__target.__nodeLinkIdentifier +\n            \"$$_AUXLINK1\";\n\n          auxLink2.__nodeLinkIdentifier =\n            link.__source.__nodeLinkIdentifier +\n            \"$$\" +\n            link.__nodeLinkIdentifier +\n            \"$$\" +\n            link.__target.__nodeLinkIdentifier +\n            \"$$_AUXLINK2\";\n\n          model.addNode(auxNode);\n          model.addLink(auxLink1);\n          model.addLink(auxLink2);\n        }\n      });\n    }\n    model.removeShadowsFromModel();\n  }\n\n  _mergeAndSplitNodes(model) {\n    this._mergeNodes(model);\n    model.removeShadowsFromModel();\n\n    this._splitNodes(model); // this creates clones ad redirects the links;\n    model.removeShadowsFromModel();\n  }\n\n  _splitNodes(model) {\n    const links = model.modelAsJsonObject.links;\n    const splitDefs = this.definitionMap.nodeSplit;\n\n    const linksToSplit = [];\n    links.forEach(link => {\n      const splitAppliesTarget = this._splitAppliesOnTarget(link, splitDefs);\n      if (splitAppliesTarget) {\n        linksToSplit.push(link);\n      }\n    });\n    let cloneIterator = 0;\n    linksToSplit.forEach(link => {\n      // what we do is we clone the target node and adjust the link;\n      const nodeToClone = link.__target;\n      nodeToClone.__SHADOWNODE = true; // will be removed\n      const newNode = new Node();\n      for (const name in nodeToClone) {\n        if (nodeToClone.hasOwnProperty(name)) {\n          if (name !== \"__outgoingLinks\" && name !== \"__incomingLinks\") {\n            newNode[name] = nodeToClone[name];\n          }\n        }\n      }\n\n      newNode.__nodeLinkIdentifier =\n        newNode.__nodeLinkIdentifier + \"$$Clone\" + cloneIterator;\n      newNode.__SHADOWNODE = false;\n      model.addNode(newNode);\n      link.__target = newNode;\n      cloneIterator++;\n    });\n  }\n\n  _mergeNodes(model) {\n    // we merge nodes based on the links they have;\n\n    const links = model.modelAsJsonObject.links;\n    const mergeDefs = this.definitionMap.nodeMerge;\n\n    const linksToMerge = [];\n    links.forEach(link => {\n      const mergeApplies = this._mergeApplies(link, mergeDefs);\n      if (mergeApplies) {\n        link.__SHADOWLINK = true;\n        linksToMerge.push(link);\n      }\n    });\n    linksToMerge.forEach(link => {\n      const tokens = link.__nodeLinkIdentifier.split(\"$$\");\n      const srcNode = model.getNodeFromName(tokens[0]);\n      const tarNode = model.getNodeFromName(tokens[2]);\n      // merge the nodes;\n      model.mergeNodes(srcNode, tarNode);\n    });\n  }\n\n  _mergeApplies(link, constraints) {\n    let compares = 0;\n    let validCompares = 0;\n    let applies = false;\n    constraints.forEach(cons => {\n      for (const name in cons) {\n        if (cons.hasOwnProperty(name)) {\n          //name is the datatype value\n          const linkData = link[name];\n          const compareValue = cons[name];\n          compares++;\n          if (linkData === compareValue) {\n            validCompares++;\n          }\n        }\n      }\n      // found at least one definition that requests this merge;\n      if (validCompares === compares) {\n        applies = true;\n        return applies;\n      }\n    });\n    return applies;\n  }\n\n  _auxApplies(link, constraints) {\n    for (let i = 0; i < constraints.length; i++) {\n      for (const name in constraints[i]) {\n        if (constraints[i].hasOwnProperty(name)) {\n          //name is the datatype value\n\n          if (name === \"edgeType\") {\n            const lT = link.__linkType;\n            const cT = constraints[i][name];\n\n            if (typeof lT === \"string\") {\n              for (let j = 0; j < cT.length; j++) {\n                if (lT.toLowerCase() === cT[j].toLowerCase()) {\n                  return {\n                    auxLinks: constraints[i][\"auxiliaryLinks\"],\n                    auxNode: constraints[i][\"auxiliaryNode\"]\n                  };\n                }\n              }\n            } else {\n              for (let k = 0; k < lT.length; k++) {\n                for (let j = 0; j < cT.length; j++) {\n                  if (lT[k].toLowerCase() === cT[j].toLowerCase()) {\n                    return {\n                      auxLinks: constraints[i][\"auxiliaryLinks\"],\n                      auxNode: constraints[i][\"auxiliaryNode\"]\n                    };\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  _splitAppliesOnTarget(link, constraints) {\n    let compares = 0;\n    let validCompares = 0;\n    let applies = false;\n    constraints.forEach(cons => {\n      for (const name in cons) {\n        if (cons.hasOwnProperty(name)) {\n          //name is the datatype value\n\n          if (name === \"constraints\" && cons[name] === \"none\") {\n            // do nothing but tell that the validation suits the constraints;\n            compares++;\n            validCompares++;\n          } else {\n            // check for validation\n            if (name === \"type\") {\n              // check for type of the target node;\n              //compare against an array of types\n\n              const nodeTypesToApply = cons[name];\n              nodeTypesToApply.forEach(t => {\n                if (link.__target.isNodeOfType(t)) {\n                  validCompares++;\n                }\n              });\n              compares++;\n            }\n          }\n        }\n      }\n      // found at least one definition that requests this merge;\n      if (validCompares === compares) {\n        applies = true;\n        return applies;\n      }\n    });\n    return applies;\n  }\n\n  __mapVerticesToNodes(model, dataArray) {\n    // note no arrow function, otherwise model will not be updated(call by ref)\n\n    dataArray.forEach(item => {\n      const aNode = this._createNodeFromVertex(item);\n      // set displayName to be a string! ;\n      let langRep = LanguageTools.textInLanguage(aNode.__displayName);\n      if (langRep === null || langRep === undefined) {\n        if (validIRI(item.__vertexEdgeIdentifier)) {\n          langRep = LanguageTools.IRI2Label(\n            this.prefixMapperL2S,\n            item.__vertexEdgeIdentifier\n          );\n        } else {\n          console.error(\n            \"COULD NOT FIND A LABEL FOR VERTEX: \" + item.__vertexEdgeIdentifier\n          );\n        }\n      }\n      aNode.__displayName = langRep;\n      model.addNode(aNode);\n    });\n\n    // process Axioms;\n  }\n\n  _createNodeFromVertex = item => {\n    const aNode = new Node();\n    aNode.resourceReference = item;\n\n    // create the mappings;\n    const nMapper = this.definitionMap.nodeMapper;\n    for (const name in nMapper) {\n      if (nMapper.hasOwnProperty(name)) {\n        // fetch data;\n        const dataPath = nMapper[name];\n        if (dataPath.indexOf(\".\") !== -1) {\n          // need to perform nested getter;\n          const tokens = dataPath.split(\".\");\n          let dataItem = item;\n          for (let i = 0; i < tokens.length; i++) {\n            dataItem = dataItem[tokens[i]];\n          }\n          aNode[name] = dataItem;\n        } else {\n          // single data access in item\n          aNode[name] = item[dataPath];\n        }\n      }\n    }\n\n    return aNode;\n  };\n\n  _createLinkFromEdge = item => {\n    const aLink = new Link();\n    aLink.resourceReference = item;\n\n    // create the mappings;\n    const mapper = this.definitionMap.linkMapper;\n    for (const name in mapper) {\n      if (mapper.hasOwnProperty(name) && name !== \"mapAxiom\") {\n        // fetch data;\n        const dataPath = mapper[name];\n        if (dataPath.indexOf(\".\") !== -1) {\n          // need to perform nested getter;\n          const tokens = dataPath.split(\".\");\n          let dataItem = item;\n          for (let i = 0; i < tokens.length; i++) {\n            dataItem = dataItem[tokens[i]];\n          }\n          aLink[name] = dataItem;\n        } else {\n          // single data access in item\n          aLink[name] = item[dataPath];\n        }\n      }\n    }\n\n    // adjust display name\n    // adjust link type if it is derived from axiomEdge\n    if (aLink.__linkType === \"axiomEdge\") {\n      aLink.__linkType = \"axiomLink\";\n    }\n    aLink.__displayName = LanguageTools.textInLanguage(aLink.__displayName);\n\n    return aLink;\n  };\n\n  _mapEdgesToLinks(model, dataArray) {\n    // note no arrow function, otherwise model will not be updated(call by ref)\n\n    dataArray.forEach(item => {\n      // check for axioms;\n\n      const link = this._createLinkFromEdge(item);\n      // provide src and tar;\n      item.__sources.forEach(src => {\n        // find node in model;\n        const node = model.getNodeFromName(src.__vertexEdgeIdentifier);\n        if (!link.__source) {\n          link.__source = node;\n        }\n        node.addOutgoingLink(link);\n      });\n      item.__targets.forEach(src => {\n        // find node in model;\n        const node = model.getNodeFromName(src.__vertexEdgeIdentifier);\n        if (!link.__target) {\n          link.__target = node;\n        }\n        node.addOutgoingLink(link);\n      });\n      model.addLink(link);\n    });\n  }\n}\n","// data handler is a base class;\nimport BaseComponent from \"../Base/BaseComponent\";\nimport * as $CONST from \"../Base/BaseComponentConstants\";\n\nimport Node from \"../Models/Node\";\nimport Link from \"../Models/Link\";\nimport LanguageTools from \"../Base/LanguageTools\";\nimport { validIRI } from \"../Base/globalHelper\";\nimport NodeLinkModel from \"../Models/NodeLinkModel\";\nimport { node } from \"prop-types\";\n\nexport default class NodeLinkMapper extends BaseComponent {\n  constructor() {\n    super();\n    this.type = $CONST.TYPE_VERTEX_EDGE_MAPPER; // default type;\n\n    this.requestedInputType = $CONST.TYPE_VERTEX_EDGE_MODEL;\n    this.hasCompatibleInput = false;\n\n    this.prefixMapperL2S = {\n      \"http://www.w3.org/1999/02/22-rdf-syntax-ns#\": \"rdf\",\n      \"http://www.w3.org/2000/01/rdf-schema#\": \"rdfs\",\n      \"http://www.w3.org/2002/07/owl#\": \"owl\",\n      \"http://www.w3.org/2001/XMLSchema#\": \"xsd\",\n      \"http://purl.org/dc/elements/1.1/\": \"dc\",\n      \"http://www.w3.org/XML/1998/namespace\": \"xml\",\n      \"http://xmlns.com/wot/0.1/\": \"wot\",\n      \"http://www.w3.org/2003/06/sw-vocab-status/ns#\": \"vs\",\n      \"http://xmlns.com/foaf/0.1/\": \"foaf\",\n      \"http://www.w3.org/2004/02/skos/core#\": \"skos\"\n    };\n\n    this.definitionMap = {\n      nodeMapper: {\n        __nodeType: \"__vertexType\",\n        __nodeLinkIdentifier: \"__vertexEdgeIdentifier\",\n        __displayName: \"__displayName\"\n      },\n      linkMapper: {\n        __linkType: \"__edgeType\",\n        __nodeLinkIdentifier: \"__vertexEdgeIdentifier\",\n        __displayName: \"__displayName\",\n        __linkAxiom: \"__edgeAxiom\"\n      },\n      nodeMerge: [\n        {\n          __linkType: \"axiomLink\",\n          __displayName: \"owl:equivalentClass\"\n        }\n      ],\n\n      aggregate: [\"owl:datatypeProperty\"],\n\n      nodeSplit: [\n        {\n          constraints: \"none\",\n          type: [\"rdfs:Literal\"]\n          // there could be more types like xsd:datatype or so\n        }\n      ],\n      auxiliaryNodes: [\n        // {\n        //   edgeType: [\"owl:ObjectProperty\"], // constraint\n        //   auxiliaryLinks: {\n        //     source: [\"domain\", \"auxLink\"],\n        //     target: [\"range\", \"auxLink\"]\n        //   }, // what to do whit the link >> split domain range links << this sets the displayName and edge type\n        //   auxiliaryNode: [\"__displayName\", \"auxForObjectProperties\"] // will fetch the prop name for display name and set the type to auxiliary\n        // },\n        // {\n        //   edgeType: [\"owl:DatatypeProperty\"], // constraint\n        //   auxiliaryLinks: {\n        //     source: [\"domain\", \"auxLink\"],\n        //     target: [\"range\", \"auxLink\"]\n        //   }, // what to do whit the link >> split domain range links << this sets the displayName and edge type\n        //   auxiliaryNode: [\"__displayName\", \"auxForDataTypeProperties\"] // will fetch the prop name for display name and set the type to auxiliary\n        // }\n      ] // here empty\n    };\n  }\n\n  /** -------------- EXPOSED FUNCTIONS -------------- DO NOT OVERWRITE **/\n  setInputData = inputDataAsJsonObject => {\n    this.inputDataAsJsonObject = inputDataAsJsonObject;\n    // check if type is compatible;\n    if (this.requestedInputType === inputDataAsJsonObject.resultingModel.type) {\n      this.hasCompatibleInput = true;\n    } else {\n      console.error(\n        \"INPUT MODEL IS OF TYPE \" +\n          inputDataAsJsonObject.resultingModel.type +\n          \"EXPECTED: \" +\n          this.requestedInputType\n      );\n    }\n  };\n\n  /** -------------- Must OVERWRITE FUNCTIONS --------------**/\n  __run__ = () => {\n    if (this.hasCompatibleInput) {\n      this.__mapInputModel();\n    } else {\n      console.error(\"CANCELLED!\");\n      this.resultObject.resultingModel = null;\n    }\n  };\n\n  __mapInputModel = () => {\n    // obtain the data items;\n    const model = this.inputDataAsJsonObject.resultingModel;\n    const modelData = model.getResult();\n    const resourceIdentifier = model.getResourceIdentifier();\n\n    const nlModel = new NodeLinkModel();\n    nlModel.setResourceIdentifier(\"__nodeLinkIdentifier\"); // lookup name\n\n    this.__mapVerticesToNodes(nlModel, modelData.vertices);\n    this._mapEdgesToLinks(nlModel, modelData.edges);\n\n    // auto assign link types;\n    this._autoAssignLinkTypesBasedOnTarget(nlModel.getResult().links);\n\n    // this._mergeAndSplitNodes(nlModel);\n    // this._introduceAuxiliaryNode(nlModel);\n\n    this.__aggregateLinks(nlModel);\n\n    this.resultObject.resultingModel = nlModel;\n  };\n\n  __aggregateLinks(model) {\n    const def = this.definitionMap.aggregate;\n    model.getResult().links.forEach(link => {\n      if (def.indexOf(link.__linkType) !== -1) {\n        link.__source.addAggregatedLink(link);\n        link.__target.__SHADOWNODE = true;\n        link.__SHADOWLINK = true;\n      }\n    });\n    model.removeShadowsFromModel();\n  }\n\n  _autoAssignLinkTypesBasedOnTarget(links) {\n    links.forEach(link => {\n      if (link.__target.__nodeType === \"Literal\") {\n        link.__linkType = \"owl:datatypeProperty\";\n      } else {\n        if (\n          !link.__linkAxiom &&\n          (!link.__linkType || link.__linkType.length === 0)\n        ) {\n          link.__linkType = \"owl:objectProperty\";\n        }\n      }\n    });\n  }\n\n  _introduceAuxiliaryNode(model) {\n    if (this.definitionMap.auxiliaryNodes) {\n      const def = this.definitionMap.auxiliaryNodes;\n      const links = model.modelAsJsonObject.links;\n\n      links.forEach(link => {\n        const auxDef = this._auxApplies(link, def);\n        if (auxDef !== false) {\n          link.__SHADOWLINK = true;\n\n          // create a link for the property using the auxDef.auxiliaryNodeDefinition;\n          const auxNode = new Node();\n          if (auxDef.auxNode[0] === \"__displayName\") {\n            auxNode.__displayName = link.__displayName;\n          } else {\n            auxNode.__displayName = auxDef.auxNode[0];\n          }\n          auxNode.__nodeType = [auxDef.auxNode[1]];\n          auxNode.resourceReference = link;\n          // create the links;\n\n          const auxLink1 = new Link();\n          const link1Def = auxDef.auxLinks.source;\n          auxLink1.__displayName = link1Def[0];\n          auxLink1.__linkType = link1Def[1];\n          auxLink1.__source = auxNode;\n          auxLink1.__target = link.__source;\n\n          const auxLink2 = new Link();\n          const link2Def = auxDef.auxLinks.target;\n          auxLink2.__displayName = link2Def[0];\n          auxLink2.__linkType = link2Def[1];\n          auxLink2.__source = auxNode;\n          auxLink2.__target = link.__target;\n\n          // todo, adjust ids;\n          auxNode.__nodeLinkIdentifier =\n            link.__source.__nodeLinkIdentifier +\n            \"$$\" +\n            link.__nodeLinkIdentifier +\n            \"$$\" +\n            link.__target.__nodeLinkIdentifier +\n            \"$$_AUXNODE\";\n\n          auxLink1.__nodeLinkIdentifier =\n            link.__source.__nodeLinkIdentifier +\n            \"$$\" +\n            link.__nodeLinkIdentifier +\n            \"$$\" +\n            link.__target.__nodeLinkIdentifier +\n            \"$$_AUXLINK1\";\n\n          auxLink2.__nodeLinkIdentifier =\n            link.__source.__nodeLinkIdentifier +\n            \"$$\" +\n            link.__nodeLinkIdentifier +\n            \"$$\" +\n            link.__target.__nodeLinkIdentifier +\n            \"$$_AUXLINK2\";\n\n          model.addNode(auxNode);\n          model.addLink(auxLink1);\n          model.addLink(auxLink2);\n        }\n      });\n    }\n    model.removeShadowsFromModel();\n  }\n\n  _mergeAndSplitNodes(model) {\n    this._mergeNodes(model);\n    model.removeShadowsFromModel();\n\n    this._splitNodes(model); // this creates clones ad redirects the links;\n    model.removeShadowsFromModel();\n  }\n\n  _splitNodes(model) {\n    const links = model.modelAsJsonObject.links;\n    const splitDefs = this.definitionMap.nodeSplit;\n\n    const linksToSplit = [];\n    links.forEach(link => {\n      const splitAppliesTarget = this._splitAppliesOnTarget(link, splitDefs);\n      if (splitAppliesTarget) {\n        linksToSplit.push(link);\n      }\n    });\n    let cloneIterator = 0;\n    linksToSplit.forEach(link => {\n      // what we do is we clone the target node and adjust the link;\n      const nodeToClone = link.__target;\n      nodeToClone.__SHADOWNODE = true; // will be removed\n      const newNode = new Node();\n      for (const name in nodeToClone) {\n        if (nodeToClone.hasOwnProperty(name)) {\n          if (name !== \"__outgoingLinks\" && name !== \"__incomingLinks\") {\n            newNode[name] = nodeToClone[name];\n          }\n        }\n      }\n\n      newNode.__nodeLinkIdentifier =\n        newNode.__nodeLinkIdentifier + \"$$Clone\" + cloneIterator;\n      newNode.__SHADOWNODE = false;\n      model.addNode(newNode);\n      link.__target = newNode;\n      cloneIterator++;\n    });\n  }\n\n  _mergeNodes(model) {\n    // we merge nodes based on the links they have;\n\n    const links = model.modelAsJsonObject.links;\n    const mergeDefs = this.definitionMap.nodeMerge;\n\n    const linksToMerge = [];\n    links.forEach(link => {\n      const mergeApplies = this._mergeApplies(link, mergeDefs);\n      if (mergeApplies) {\n        link.__SHADOWLINK = true;\n        linksToMerge.push(link);\n      }\n    });\n    linksToMerge.forEach(link => {\n      const tokens = link.__nodeLinkIdentifier.split(\"$$\");\n      const srcNode = model.getNodeFromName(tokens[0]);\n      const tarNode = model.getNodeFromName(tokens[2]);\n      // merge the nodes;\n      model.mergeNodes(srcNode, tarNode);\n    });\n  }\n\n  _mergeApplies(link, constraints) {\n    let compares = 0;\n    let validCompares = 0;\n    let applies = false;\n    constraints.forEach(cons => {\n      for (const name in cons) {\n        if (cons.hasOwnProperty(name)) {\n          //name is the datatype value\n          const linkData = link[name];\n          const compareValue = cons[name];\n          compares++;\n          if (linkData === compareValue) {\n            validCompares++;\n          }\n        }\n      }\n      // found at least one definition that requests this merge;\n      if (validCompares === compares) {\n        applies = true;\n        return applies;\n      }\n    });\n    return applies;\n  }\n\n  _auxApplies(link, constraints) {\n    for (let i = 0; i < constraints.length; i++) {\n      for (const name in constraints[i]) {\n        if (constraints[i].hasOwnProperty(name)) {\n          //name is the datatype value\n\n          if (name === \"edgeType\") {\n            const lT = link.__linkType;\n            const cT = constraints[i][name];\n            if (typeof lT === \"string\") {\n              for (let j = 0; j < cT.length; j++) {\n                if (lT.toLowerCase() === cT[j].toLowerCase()) {\n                  return {\n                    auxLinks: constraints[i][\"auxiliaryLinks\"],\n                    auxNode: constraints[i][\"auxiliaryNode\"]\n                  };\n                }\n              }\n            } else {\n              for (let k = 0; k < lT.length; k++) {\n                for (let j = 0; j < cT.length; j++) {\n                  if (lT[k].toLowerCase() === cT[j].toLowerCase()) {\n                    return {\n                      auxLinks: constraints[i][\"auxiliaryLinks\"],\n                      auxNode: constraints[i][\"auxiliaryNode\"]\n                    };\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  _splitAppliesOnTarget(link, constraints) {\n    let compares = 0;\n    let validCompares = 0;\n    let applies = false;\n    constraints.forEach(cons => {\n      for (const name in cons) {\n        if (cons.hasOwnProperty(name)) {\n          //name is the datatype value\n\n          if (name === \"constraints\" && cons[name] === \"none\") {\n            // do nothing but tell that the validation suits the constraints;\n            compares++;\n            validCompares++;\n          } else {\n            // check for validation\n            if (name === \"type\") {\n              // check for type of the target node;\n              //compare against an array of types\n\n              const nodeTypesToApply = cons[name];\n              nodeTypesToApply.forEach(t => {\n                if (link.__target.isNodeOfType(t)) {\n                  validCompares++;\n                }\n              });\n              compares++;\n            }\n          }\n        }\n      }\n      // found at least one definition that requests this merge;\n      if (validCompares === compares) {\n        applies = true;\n        return applies;\n      }\n    });\n    return applies;\n  }\n\n  __mapVerticesToNodes(model, dataArray) {\n    // note no arrow function, otherwise model will not be updated(call by ref)\n\n    dataArray.forEach(item => {\n      const aNode = this._createNodeFromVertex(item);\n      // set displayName to be a string! ;\n      let langRep = LanguageTools.textInLanguage(aNode.__displayName);\n      if (langRep === null || langRep === undefined) {\n        if (validIRI(item.__vertexEdgeIdentifier)) {\n          langRep = LanguageTools.IRI2Label(\n            this.prefixMapperL2S,\n            item.__vertexEdgeIdentifier\n          );\n        } else {\n          console.error(\n            \"COULD NOT FIND A LABEL FOR VERTEX: \" + item.__vertexEdgeIdentifier\n          );\n        }\n      }\n      aNode.__displayName = langRep;\n      model.addNode(aNode);\n    });\n\n    // process Axioms;\n  }\n\n  _createNodeFromVertex = item => {\n    const aNode = new Node();\n    aNode.resourceReference = item;\n\n    // create the mappings;\n    const nMapper = this.definitionMap.nodeMapper;\n    for (const name in nMapper) {\n      if (nMapper.hasOwnProperty(name)) {\n        // fetch data;\n        const dataPath = nMapper[name];\n        if (dataPath.indexOf(\".\") !== -1) {\n          // need to perform nested getter;\n          const tokens = dataPath.split(\".\");\n          let dataItem = item;\n          for (let i = 0; i < tokens.length; i++) {\n            dataItem = dataItem[tokens[i]];\n          }\n          aNode[name] = dataItem;\n        } else {\n          // single data access in item\n          aNode[name] = item[dataPath];\n        }\n      }\n    }\n\n    // force node type\n    if (aNode.__nodeType === undefined) {\n      aNode.__nodeType = \"default\";\n    }\n\n    return aNode;\n  };\n\n  _createLinkFromEdge = item => {\n    const aLink = new Link();\n    aLink.resourceReference = item;\n\n    // create the mappings;\n    const mapper = this.definitionMap.linkMapper;\n    for (const name in mapper) {\n      if (mapper.hasOwnProperty(name) && name !== \"mapAxiom\") {\n        // fetch data;\n        const dataPath = mapper[name];\n        if (dataPath.indexOf(\".\") !== -1) {\n          // need to perform nested getter;\n          const tokens = dataPath.split(\".\");\n          let dataItem = item;\n          for (let i = 0; i < tokens.length; i++) {\n            dataItem = dataItem[tokens[i]];\n          }\n          aLink[name] = dataItem;\n        } else {\n          // single data access in item\n          aLink[name] = item[dataPath];\n        }\n      }\n    }\n\n    // adjust display name\n    // adjust link type if it is derived from axiomEdge\n    if (aLink.__linkType === \"axiomEdge\") {\n      aLink.__linkType = \"axiomLink\";\n    }\n    aLink.__displayName = LanguageTools.textInLanguage(aLink.__displayName);\n    if (aLink.__linkType === undefined) {\n      aLink.__linkType = \"default\";\n    }\n    return aLink;\n  };\n\n  _mapEdgesToLinks(model, dataArray) {\n    // note no arrow function, otherwise model will not be updated(call by ref)\n\n    dataArray.forEach(item => {\n      // check for axioms;\n\n      const link = this._createLinkFromEdge(item);\n      // provide src and tar;\n      item.__sources.forEach(src => {\n        // find node in model;\n        const node = model.getNodeFromName(src.__vertexEdgeIdentifier);\n        if (!link.__source) {\n          link.__source = node;\n        }\n        node.addOutgoingLink(link);\n      });\n      item.__targets.forEach(src => {\n        // find node in model;\n        const node = model.getNodeFromName(src.__vertexEdgeIdentifier);\n        if (!link.__target) {\n          link.__target = node;\n        }\n        // link.__targets.push(node);\n        node.addOutgoingLink(link);\n      });\n      model.addLink(link);\n    });\n  }\n}\n","export default class ShapeTools {\n  constructor() {}\n\n  // we use the attributes of the shape to render it ;)\n  getShapeRadius = shape => {\n    // get the shape radius based on shape parameters;\n    return parseFloat(shape.attr(\"rx\"));\n  };\n\n  getShapeWidth = shape => {\n    // get the shape radius based on shape parameters;\n    return parseFloat(shape.attr(\"width\"));\n  };\n\n  getShapeHeight = shape => {\n    // get the shape radius based on shape parameters;\n    return parseFloat(shape.attr(\"height\"));\n  };\n}\n","import ShapeTools from \"./ShapeTools\";\n\nexport default class LineTools {\n  constructor() {\n    this.shapeTools = new ShapeTools();\n  }\n\n  computeCenterPoint(domain, range, offset) {\n    const cx = 0.5 * (range.x + domain.x) + offset;\n    const cy = 0.5 * (range.y + domain.y) + offset;\n    return { cx: cx, cy: cy };\n  }\n\n  computeIntersectionPointsWithProperty = (domain, range, link, offset) => {\n    let distOffset = 0;\n    if (offset) {\n      distOffset = offset;\n    }\n\n    const parentShape = link.renderingShape;\n    parentShape.data()[0].updateRenderingPosition();\n\n    const iP_Src = { x: domain.x, y: domain.y };\n    const iP_Prop = { x: parentShape.data()[0].x, y: parentShape.data()[0].y };\n    const iP_Tar = { x: range.x, y: range.y };\n\n    if (link.__internalType !== \"loop\") {\n      let offsetDirection = this.__computeNormalizedOffsetDirection(\n        iP_Src,\n        iP_Prop\n      );\n      this.__shapeBasedIntersection(\n        iP_Src,\n        domain,\n        offsetDirection,\n        distOffset\n      );\n\n      offsetDirection = this.__computeNormalizedOffsetDirection(\n        iP_Tar,\n        iP_Prop\n      );\n      this.__shapeBasedIntersection(iP_Tar, range, offsetDirection, distOffset);\n    } else {\n      let divisor = 2;\n      if (domain.numberOfLoops() > 0) {\n        divisor = domain.numberOfLoops();\n      }\n      const fairShareLoopAngle = 360 / divisor,\n        fairShareLoopAngleWithMargin = fairShareLoopAngle * 0.8,\n        loopAngle = Math.min(60, fairShareLoopAngleWithMargin);\n\n      const dx = iP_Prop.x - domain.x,\n        dy = iP_Prop.y - domain.y,\n        labelRadian = Math.atan2(dy, dx),\n        labelAngle = this.__calculateAngle(labelRadian);\n      const startAngle = labelAngle - loopAngle / 2;\n      const endAngle = labelAngle + loopAngle / 2;\n      const radius =\n        this.shapeTools.getShapeRadius(domain.renderingShape) + distOffset;\n      const arcFrom = this.__calculateRadian(startAngle),\n        arcTo = this.__calculateRadian(endAngle),\n        x1 = Math.cos(arcFrom) * radius,\n        y1 = Math.sin(arcFrom) * radius,\n        x2 = Math.cos(arcTo) * radius,\n        y2 = Math.sin(arcTo) * radius;\n\n      return [\n        [domain.x + x1, domain.y + y1],\n        [iP_Prop.x, iP_Prop.y],\n        [domain.x + x2, domain.y + y2]\n      ];\n    }\n    return [\n      [iP_Src.x, iP_Src.y],\n      [iP_Prop.x, iP_Prop.y],\n      [iP_Tar.x, iP_Tar.y]\n    ];\n  };\n\n  __calculateRadian(angle) {\n    angle = angle % 360;\n    if (angle < 0) {\n      angle = angle + 360;\n    }\n    return (Math.PI * angle) / 180;\n  }\n\n  __calculateAngle(radian) {\n    return radian * (180 / Math.PI);\n  }\n\n  computeIntersectionPoints = (domain, range, offset) => {\n    // get the shape parameter for domain;\n    let distOffset = 0;\n    if (offset) {\n      distOffset = offset;\n    }\n    const iP_Src = { x: domain.x, y: domain.y };\n    const iP_Tar = { x: range.x, y: range.y };\n    let offsetDirection = this.__computeNormalizedOffsetDirection(\n      domain,\n      range\n    );\n    this.__shapeBasedIntersection(iP_Src, domain, offsetDirection, distOffset);\n\n    offsetDirection = this.__computeNormalizedOffsetDirection(range, domain);\n    this.__shapeBasedIntersection(iP_Tar, range, offsetDirection, distOffset);\n    return [\n      [iP_Src.x, iP_Src.y],\n      [iP_Tar.x, iP_Tar.y]\n    ];\n  };\n\n  __computeNormalizedOffsetDirection(source, target) {\n    const x = target.x - source.x;\n    const y = target.y - source.y;\n\n    const len = Math.sqrt(x * x + y * y);\n    return { x: x / len, y: y / len };\n  }\n\n  __shapeBasedIntersection(IntPoint, node, offsetDirection, distOffset) {\n    const cfg = node.renderingConfig();\n    if (cfg.style.renderingType === \"circle\") {\n      const distanceToBorder =\n        this.shapeTools.getShapeRadius(node.renderingShape) + distOffset;\n\n      //   +distOffset;\n      // IntPoint.x = node.x;\n      // IntPoint.y = node.y;\n      IntPoint.x = node.x + distanceToBorder * offsetDirection.x;\n      IntPoint.y = node.y + distanceToBorder * offsetDirection.y;\n      // return;\n    } else if (cfg.style.renderingType === \"rect\") {\n      const width =\n        this.shapeTools.getShapeWidth(node.renderingShape) + distOffset;\n\n      const height =\n        this.shapeTools.getShapeHeight(node.renderingShape) + distOffset;\n\n      const distanceToBorderX = 0.5 * parseFloat(width);\n      const distanceToBorderY = 0.5 * parseFloat(height);\n      let scale;\n      if (Math.abs(offsetDirection.x) >= Math.abs(offsetDirection.y)) {\n        scale = 1.0 / Math.abs(offsetDirection.x);\n      } else {\n        scale = 1.0 / Math.abs(offsetDirection.y);\n      }\n      IntPoint.x = node.x + scale * distanceToBorderX * offsetDirection.x;\n      IntPoint.y = node.y + scale * distanceToBorderY * offsetDirection.y;\n      return IntPoint;\n    } else {\n      // default >> center of the node\n      IntPoint.x = node.x;\n      IntPoint.y = node.y;\n    }\n  }\n}\n","import * as d3 from \"d3\";\nimport LineTools from \"./LineTools\";\n\nexport default class DrawTools {\n  constructor(graph) {\n    // default one;\n    this.lineTools = new LineTools();\n    this.renderingConfigHandler = graph.getRenderingHandler();\n  }\n\n  renderShadowNode(groupContainer, renderingConfig, node) {\n    // node is used to get its data when we need to render it;\n    // the rendering order is the following\n    // 1) Shape\n    const renderingShape = groupContainer.append(\"rect\");\n    const shapeConfig = renderingConfig.style;\n    this.renderBaseShape(renderingShape, shapeConfig);\n    this.applyShapeStyle(renderingShape, shapeConfig);\n    const displayName = this.drawDisplayName(\n      groupContainer,\n      node.__displayName,\n      renderingConfig\n    );\n\n    this.applyAdditionalOptions(\n      groupContainer,\n      renderingShape,\n      displayName,\n      renderingConfig,\n      node\n    );\n    // handle options;\n    // 3 Additional Icons provided by extensions [TODO];\n    return { renderingShape: renderingShape, renderingText: displayName };\n  }\n\n  renderNode(groupContainer, renderingConfig, node) {\n    // node is used to get its data when we need to render it;\n    // the rendering order is the following\n    // 1) Shape\n    const renderingShape = groupContainer.append(\"rect\");\n    const shapeConfig = renderingConfig.style;\n    this.renderBaseShape(renderingShape, shapeConfig);\n    this.applyShapeStyle(renderingShape, shapeConfig);\n    const displayName = this.drawDisplayName(\n      groupContainer,\n      node.displayName(),\n      renderingConfig\n    );\n\n    this.applyAdditionalOptions(\n      groupContainer,\n      renderingShape,\n      displayName,\n      renderingConfig,\n      node\n    );\n    // handle options;\n    // 3 Additional Icons provided by extensions [TODO];\n    return { renderingShape: renderingShape, renderingText: displayName };\n  }\n\n  renderLink(\n    groupContainer,\n    propertyContainer,\n    arrowContainer,\n    renderingConfig,\n    link\n  ) {\n    const renderingLine = this.__createLinkLine(\n      groupContainer,\n      renderingConfig\n    );\n\n    let renderingShape = null;\n    let renderingText = null;\n    // we dont care about the arrows, they handle them selfs;\n    if (renderingConfig.options.drawArrowHead) {\n      this.__drawArrowHead(\n        groupContainer,\n        arrowContainer,\n        \"arrowHead_\" + link.id(),\n        renderingConfig.style.arrowHead\n      );\n    }\n    if (renderingConfig.options.drawArrowTail) {\n      this.__drawArrowTail(\n        groupContainer,\n        arrowContainer,\n        \"arrowTail_\" + link.id(),\n        renderingConfig.style.arrowTail\n      );\n    }\n    if (renderingConfig.options.drawPropertyNode) {\n      const groupContainer = null;\n      const renderingElements = this.__createRenderingShapeForPropertyNode(\n        propertyContainer,\n        groupContainer,\n        renderingConfig.style.propertyNode,\n        link\n      );\n      renderingShape = renderingElements.renderingShape;\n      renderingText = renderingElements.displayName;\n    }\n\n    return {\n      renderingLine: renderingLine,\n      renderingShape: renderingShape,\n      renderingText: renderingText\n    };\n  }\n\n  __createRenderingShapeForPropertyNode(\n    propertyContainer,\n    groupContainer,\n    cfg,\n    link\n  ) {\n    // create a group container for that thing\n    groupContainer = propertyContainer.append(\"g\");\n    const itemId =\n      \"PROPERTY_NODE_\" +\n      link.sourceNode.id() +\n      \"_\" +\n      link.id() +\n      \"_\" +\n      link.targetNode.id();\n    groupContainer.node().id = itemId;\n\n    // groupContainer.attr('id', 'PROPERTY_NODE_' + 0 + '_' + 1);\n    const dataObj = {\n      x: link.x,\n      y: link.y,\n      __id: itemId,\n      ref: link,\n      groupRoot: groupContainer\n    };\n    groupContainer.node().__data__ = dataObj;\n    dataObj.id = function() {\n      return this.__id;\n    };\n    dataObj.updateRenderingPosition = function() {\n      this.groupRoot.attr(\n        \"transform\",\n        \"translate(\" + this.x + \",\" + this.y + \")\"\n      );\n    };\n    dataObj.setPosition = function(x, y) {\n      this.x = x;\n      this.y = y;\n    };\n    const elements = this.renderNode(groupContainer, cfg, link); // just reuse of the node rendering function\n    return {\n      renderingShape: elements.renderingShape,\n      displayName: elements.displayName\n    };\n  }\n\n  __createLinkLine(group, config) {\n    const linkLine = group.append(\"path\"); // default if not found\n    this._addStrokeElements(linkLine, config.style.link, \"line\");\n    linkLine.style(\"fill\", \"none\");\n    return linkLine;\n  }\n\n  __drawArrowHead(parent, container, identifier, cfg) {\n    this.__drawArrowPrimitive(parent, container, identifier, cfg, \"marker-end\");\n  }\n  __drawArrowTail(parent, container, identifier, cfg) {\n    this.__drawArrowPrimitive(\n      parent,\n      container,\n      identifier,\n      cfg,\n      \"marker-start\"\n    );\n  }\n\n  __drawArrowPrimitive(parent, container, identifier, cfg, makerType) {\n    const scale = parseFloat(cfg.scaleFactor);\n    const v1 = scale * -14;\n    const v2 = scale * -10;\n    const v3 = scale * 28;\n    const v4 = scale * 20;\n\n    const vB_String = v1 + \" \" + v2 + \" \" + v3 + \" \" + v4;\n    const arrowHead = container\n      .append(\"marker\")\n      // .datum(property)\n      .attr(\"id\", identifier)\n      .attr(\"viewBox\", vB_String)\n      .attr(\"markerWidth\", scale * 10)\n      .attr(\"markerHeight\", scale * 10)\n      //.attr(\"markerUnits\", \"userSpaceOnUse\")\n      .attr(\"orient\", \"auto\");\n\n    parent.attr(makerType, \"url(#\" + identifier + \")\");\n    const renderingShape = arrowHead.append(\"path\");\n    if (cfg.renderingType === \"triangle\") {\n      const m1X = -12 * scale;\n      const m1Y = 8 * scale;\n      const m2X = -12 * scale;\n      const m2Y = -8 * scale;\n      renderingShape.attr(\n        \"d\",\n        \"M0,0L \" + m1X + \",\" + m1Y + \"L\" + m2X + \",\" + m2Y + \"L\" + 0 + \",\" + 0\n      );\n    }\n    if (cfg.renderingType === \"diamond\") {\n      const p0 = 0;\n      const p1 = -8 * scale;\n      const p2 = 8 * scale;\n      const pathString =\n        \"M\" +\n        p0 +\n        \",\" +\n        p1 +\n        \"L\" +\n        p2 +\n        \",\" +\n        p0 +\n        \"L\" +\n        p0 +\n        \",\" +\n        p2 +\n        \"L\" +\n        p1 +\n        \",\" +\n        p0 +\n        \"L\" +\n        p0 +\n        \",\" +\n        p1 +\n        \"L\" +\n        p2 +\n        \",\" +\n        p0 +\n        \"\";\n      renderingShape.attr(\"d\", pathString);\n    }\n\n    renderingShape.style(\"stroke\", cfg.strokeColor);\n    renderingShape.style(\"stroke-width\", cfg.strokeWidth);\n    renderingShape.style(\"fill\", cfg.fillColor);\n    if (cfg.strokeStyle !== \"solid\") {\n      if (cfg.strokeStyle === \"dashed\") {\n        renderingShape.style(\"stroke-dasharray\", 8);\n      }\n      if (cfg.strokeStyle === \"dotted\") {\n        renderingShape.style(\"stroke-dasharray\", 3);\n      }\n    }\n  }\n\n  updateLinePosition(link, line, src, tar, linkType, curve) {\n    // handling internal type overwrites;\n    if (linkType === \"loop\" || linkType === \"multiLink\") {\n      curve = true;\n    }\n\n    if (curve === false) {\n      const controlPoints = this.lineTools.computeIntersectionPoints(\n        src,\n        tar,\n        1\n      );\n      line.attr(\"d\", this.__directLineFunction(controlPoints));\n    } else {\n      const controlPoints = this.lineTools.computeIntersectionPointsWithProperty(\n        src,\n        tar,\n        link,\n        1\n      );\n      if (linkType === \"loop\") {\n        line.attr(\"d\", this.__loopLineFunction(controlPoints));\n      } else {\n        line.attr(\"d\", this.__curveLineFunction(controlPoints));\n      }\n    }\n  }\n\n  updatePropertyPosition(link, shape, src, tar, linkType, curve) {\n    if (linkType === \"loop\" || linkType === \"multiLink\") {\n      curve = true;\n    }\n    if (curve) {\n      return; // nothing to do here\n    }\n    if (shape) {\n      const parentGroup = shape.node().parentNode;\n      if (parentGroup) {\n        if (curve === false) {\n          const centerPoint = this.lineTools.computeCenterPoint(src, tar, 1);\n          d3.select(parentGroup)\n            .data()[0]\n            .setPosition(centerPoint.cx, centerPoint.cy);\n          d3.select(parentGroup)\n            .data()[0]\n            .updateRenderingPosition();\n        }\n      }\n    }\n  }\n\n  __directLineFunction = d3.svg.line();\n  __curveLineFunction = d3.svg.line().interpolate(\"cardinal\");\n  __loopLineFunction = d3.svg\n    .line()\n    .interpolate(\"cardinal\")\n    .tension(-1);\n\n  drawDisplayName = (group, text, cfg) => {\n    // 2) Label\n\n    if (cfg.options.drawDisplayName === true) {\n      return this._drawText(group, text, cfg.fontStyle);\n    }\n    // will return undefined when does not fit\n  };\n\n  applyAdditionalOptions = (group, shape, label, config, node) => {\n    const options = config.options;\n    if (options.addTitleForDisplayName) {\n      group.append(\"title\").text(label.text());\n    }\n\n    if (options.cropLongText) {\n      if (\n        label.node().getBoundingClientRect().width >\n        parseFloat(shape.attr(\"width\"))\n      ) {\n        // crop that thing;\n        const croppedText = this.cropText(\n          label.text(),\n          config.fontStyle,\n          parseFloat(shape.attr(\"width\"))\n        );\n\n        label.text(croppedText);\n      }\n    }\n\n    // apply position changes after the whole stuff;\n\n    if (\n      options.drawNestedAttributes === true &&\n      node.refereceResource.__aggregatedLink.length > 0\n    ) {\n      \n      // fetch aggregated links from resource;\n      const nestedLinks = node.refereceResource.__aggregatedLink;\n\n      const width = 220;\n      const height = parseFloat(shape.attr(\"height\")) + nestedLinks.length * 30;\n\n      shape.attr(\"x\", -0.5 * width);\n      shape.attr(\"y\", -0.5 * height);\n      shape.attr(\"width\", width);\n      shape.attr(\"height\", height);\n      // precompute the shapesize based on the types;\n\n      const labelBB = label.node().getBoundingClientRect();\n      // this is height align CENTER;\n      // it sets the center of the labelBB into the center (0,0) of the rendering group;\n      const offset = -0.5 * height + labelBB.height;\n      label.attr(\"dy\", offset + \"px\");\n\n      // draw headerline;\n      const line = group.append(\"line\");\n\n      const x = shape.attr(\"x\");\n      const y = shape.attr(\"y\");\n      const w = shape.attr(\"width\");\n\n      const fontSizeProperty = window\n        .getComputedStyle(label.node())\n        .getPropertyValue(\"font-size\");\n      const fontSize = parseFloat(fontSizeProperty);\n      const linePosY = parseFloat(y) + 8 + fontSize;\n      const linePosX = parseFloat(x) + parseFloat(w);\n      line\n        .attr(\"x1\", x)\n        .attr(\"y1\", linePosY)\n        .attr(\"x2\", linePosX)\n        .attr(\"y2\", linePosY);\n      line.style(\"stroke\", \"black\");\n      const nestedGroup = group.append(\"g\");\n      nestedGroup.attr(\"id\", \"NestedGroupForNode\" + node.id());\n\n      let offsetVal = 0;\n      nestedLinks.forEach(link => {\n        // do crop the text;\n        const subGroupProperty = nestedGroup.append(\"g\");\n        const subGroupNode = nestedGroup.append(\"g\");\n\n        // get the rendering config for the link property;\n        const linkCFG = this.renderingConfigHandler.getLinkConfigFromType(\n          link.__linkType\n        );\n\n        const nodeCFG = this.renderingConfigHandler.getNodeConfigFromType(\n          link.__target.__nodeType\n        );\n\n        this.renderShadowNode(\n          subGroupProperty,\n          linkCFG.style.propertyNode,\n          link\n        );\n\n        // shift to left side;\n        subGroupProperty.attr(\n          \"transform\",\n          \"translate(\" + -55 + \",\" + (-78 + offsetVal) + \")\"\n        );\n\n        this.renderShadowNode(subGroupNode, nodeCFG, link.__target);\n\n        subGroupNode.attr(\n          \"transform\",\n          \"translate(\" + 55 + \",\" + (-78 + offsetVal) + \")\"\n        );\n\n        offsetVal += 35;\n        // just reuse of the node rendering function\n\n        // link.__displayName = this.cropText(\n        //   link.__displayName,\n        //   config.fontStyle,\n        //   100\n        // );\n        // link.__target.__displayName = this.cropText(\n        //   link.__target.__displayName,\n        //   config.fontStyle,\n        //   100\n        // );\n        //computeWidth and Height\n      });\n\n      \n    }\n    if (\n      (!options.drawNestedAttributes ||\n        node.refereceResource.__aggregatedLink.length === 0) &&\n      options.fontPositionV &&\n      options.fontPositionV === \"center\"\n    ) {\n      this._text_vAlignCenter(label, shape);\n    }\n\n    if (options.fontPositionH && options.fontPositionH === \"center\") {\n      this._text_hAlignCenter(label, shape);\n    }\n  };\n\n  _text_vAlignCenter = (label, shape) => {\n    const labelBB = label.node().getBoundingClientRect();\n    // this is height align CENTER;\n    // it sets the center of the labelBB into the center (0,0) of the rendering group;\n    const offset = 0.25 * labelBB.height;\n    label.attr(\"dy\", offset + \"px\");\n  };\n\n  _text_hAlignCenter = (label, shape) => {\n    const labelBB = label.node().getBoundingClientRect();\n    const offset = -0.5 * labelBB.width;\n    label.attr(\"dx\", offset + \"px\");\n  };\n\n  _drawText(container, text, cfg) {\n    const renderingTextElement = container.append(\"text\").text(text);\n\n    // apply different styles that are provided by the config\n    renderingTextElement.style(\"font-family\", cfg.fontFamily);\n    renderingTextElement.style(\"font-size\", cfg.fontSize);\n    renderingTextElement.style(\"fill\", cfg.fontColor);\n    renderingTextElement.style(\"pointer-events\", \"none\");\n    return renderingTextElement;\n  }\n\n  _addStrokeElements = (element, cfg, selector) => {\n    const color = cfg[selector + \"Color\"];\n    const width = cfg[selector + \"Width\"];\n    const style = cfg[selector + \"Style\"];\n\n    element.style(\"stroke\", color);\n    element.style(\"stroke-width\", width);\n    if (style !== \"solid\") {\n      if (style === \"dashed\") {\n        element.style(\"stroke-dasharray\", 8);\n      }\n      if (style === \"dotted\") {\n        element.style(\"stroke-dasharray\", 3);\n      }\n    }\n  };\n\n  applyShapeStyle = (targetPrimitive, renderingConfig) => {\n    targetPrimitive.attr(\"fill\", renderingConfig.bgColor);\n    this._addStrokeElements(targetPrimitive, renderingConfig, \"stroke\");\n  };\n\n  renderBaseShape = (targetPrimitive, renderingConfig) => {\n    const radius = parseInt(renderingConfig.radius);\n    const width = parseInt(renderingConfig.width);\n    const height = parseInt(renderingConfig.height);\n\n    // check if is uml style << TODO;\n    /**  render a pure circle **/\n    if (renderingConfig.renderingType === \"circle\") {\n      targetPrimitive.attr(\"x\", -radius);\n      targetPrimitive.attr(\"y\", -radius);\n      targetPrimitive.attr(\"width\", 2 * radius);\n      targetPrimitive.attr(\"height\", 2 * radius);\n      targetPrimitive.attr(\"rx\", radius);\n      targetPrimitive.attr(\"ry\", radius);\n    }\n\n    /**  render a rectangle with possible rounded corners provided by config **/\n    if (renderingConfig.renderingType === \"rect\") {\n      targetPrimitive.attr(\"x\", -0.5 * width);\n      targetPrimitive.attr(\"y\", -0.5 * height);\n      targetPrimitive.attr(\"width\", width);\n      targetPrimitive.attr(\"height\", height);\n      if (renderingConfig.roundedCorner) {\n        const tok = renderingConfig.roundedCorner.split(\",\");\n        targetPrimitive.attr(\"rx\", parseFloat(tok[0]));\n        targetPrimitive.attr(\"ry\", parseFloat(tok[1]));\n      }\n    }\n\n    /**  render an ellipse **/\n    if (renderingConfig.renderingType === \"ellipse\") {\n      targetPrimitive.attr(\"x\", -0.5 * width);\n      targetPrimitive.attr(\"y\", -0.5 * height);\n      targetPrimitive.attr(\"width\", width);\n      targetPrimitive.attr(\"height\", height);\n      targetPrimitive.attr(\"rx\", width);\n      targetPrimitive.attr(\"ry\", height);\n    }\n  };\n\n  // crop functions;\n\n  measureTextWidth(text, fontFamily, fontSize) {\n    const d = d3.select(\"body\").append(\"text\");\n    d.attr(\"id\", \"width-test\");\n    d.attr(\n      \"style\",\n      \"position:absolute; float:left; white-space:nowrap; font-family:\" +\n        fontFamily +\n        \";font-size: \" +\n        fontSize\n    );\n\n    d.text(text);\n    const w = document.getElementById(\"width-test\").offsetWidth;\n    d.remove();\n    return w;\n  }\n\n  cropText(input, config, width) {\n    let truncatedText = input;\n    let textWidth;\n    let ratio;\n    let newTruncatedTextLength;\n    while (true) {\n      textWidth = this.measureTextWidth(\n        truncatedText,\n        config.fontFamily,\n        config.fontSize\n      );\n      if (textWidth <= width) {\n        break;\n      }\n      ratio = textWidth / width;\n      newTruncatedTextLength = Math.floor(truncatedText.length / ratio);\n      if (truncatedText.length === newTruncatedTextLength) {\n        break;\n      }\n      truncatedText = truncatedText.substring(0, newTruncatedTextLength);\n    }\n    if (input.length > truncatedText.length) {\n      return input.substring(0, truncatedText.length - 6) + \"...\";\n    }\n    return input;\n  }\n}\n","import DrawTool from \"../DrawTools.js\";\n\nexport default class BasePrimitive {\n  constructor() {\n    this.__id = undefined;\n    this.__displayName = undefined;\n    this.__renderingConfig = undefined;\n    this.__drawTools = undefined;\n\n    this.__visible = true;\n    \n\n    this.groupRoot = undefined;\n  }\n\n  visible(visible) {\n    if (!arguments.length) {\n      return this.__visible;\n    }\n    this.__visible = visible;\n  }\n\n  id(id) {\n    if (!arguments.length) {\n      return this.__id;\n    }\n    this.__id = id;\n  }\n\n  drawTools(drawTools) {\n    if (!arguments.length) {\n      return this.__drawTools;\n    }\n    this.__drawTools = drawTools;\n  }\n\n  displayName(nameStr) {\n    if (!arguments.length) {\n      return this.__displayName;\n    }\n    this.__displayName = nameStr;\n  }\n\n  renderingConfig = cfgObj => {\n    if (!cfgObj) {\n      return this.__renderingConfig;\n    }\n    // using deepCopy\n    this.__renderingConfig = JSON.parse(JSON.stringify(cfgObj));\n    // this will allow a primitive to overwrite the global definitions;\n  };\n\n  render() {\n    console.log(\"This is abstract function!\");\n  }\n}\n","import BasePrimitive from './BasePrimitive';\nimport DrawTools from '../DrawTools';\nexport default class NodePrimitive extends BasePrimitive {\n  constructor() {\n    super();\n    this.x = 0;\n    this.y = 0;\n\n    this.incomingLinks = [];\n    this.outgoingLinks = [];\n    this.__numberOfLoops = 0;\n  }\n\n  addIncomingLink = link => {\n    this.incomingLinks.push(link);\n  };\n  addOutgoingLink = link => {\n    this.outgoingLinks.push(link);\n  };\n\n  setPosition = (x, y) => {\n    this.x = x;\n    this.y = y;\n  };\n\n  numberOfLoops(val) {\n    if (!arguments.length) {\n      return this.__numberOfLoops;\n    }\n    this.__numberOfLoops = val;\n  }\n\n  updateRenderingPosition = () => {\n    if (this.groupRoot) {\n      this.groupRoot.attr('transform', 'translate(' + this.x + ',' + this.y + ')');\n    }\n    // update all related links; (using concat as temp object to merge the links)\n    this.incomingLinks.concat(this.outgoingLinks).forEach(l => {\n      l.updateRenderingPosition();\n    });\n  };\n\n  // this one will get the draw Functions replacement!\n  render = groupRoot => {\n    this.groupRoot = groupRoot;\n\n    // handle rendering based on the config;\n    const renderingElements = this.drawTools().renderNode(this.groupRoot, this.renderingConfig(), this);\n    this.renderingShape = renderingElements.renderingShape;\n    this.renderingText = renderingElements.renderingText;\n\n    //   this.renderingElement = DrawTools().drawElement(this.svgRoot, this.configObject, this);\n    //   this.renderingText = this.drawLabelText(this.svgRoot, this.label);\n    //   this.renderingElement.append('title').text(this.label);\n    //   this.updateTextPosition();\n    // }\n\n    this.updateRenderingPosition();\n  };\n}\n","import BasePrimitive from \"./BasePrimitive\";\n\nexport default class LinkPrimitive extends BasePrimitive {\n  constructor() {\n    super();\n    this.x = 0;\n    this.y = 0;\n    this.sourceNode = null;\n    this.targetNode = null;\n    this.__internalType = \"singleLink\";\n  }\n\n  setInternalType(type) {\n    this.__internalType = type;\n    // type can be loop, singleLink, multiLink ;\n  }\n\n  setTargetNode(node) {\n    this.targetNode = node;\n    node.addIncomingLink(this);\n  }\n  setSourceNode(node) {\n    this.sourceNode = node;\n    node.addOutgoingLink(this);\n  }\n\n  setPosition = (x, y) => {\n    this.x = x;\n    this.y = y;\n  };\n\n  getForceNode() {\n    if (this.__internalType === \"loop\" || this.__internalType === \"multiLink\") {\n      // get the data for the force node;\n      const nodeForForce = this.renderingShape.data();\n      return nodeForForce;\n    }\n    return []; // empty array\n  }\n\n  getForceLink() {\n    if (this.__internalType === \"loop\") {\n      return [\n        {\n          source: this.sourceNode,\n          target: this.renderingShape.data()[0],\n          type: \"loop\"\n        }\n      ];\n    }\n    if (this.__internalType === \"multiLink\") {\n      return [\n        {\n          source: this.sourceNode,\n          target: this.renderingShape.data()[0],\n          type: \"mlPart\"\n        },\n        {\n          source: this.renderingShape.data()[0],\n          target: this.targetNode,\n          type: \"mlPart\"\n        }\n      ];\n    }\n\n    return [\n      {\n        source: this.sourceNode,\n        target: this.targetNode,\n        type: \"direct\"\n      }\n    ];\n  }\n\n  updateRenderingPosition = () => {\n    // based on config; choose attribute selector;\n    if (this.renderingLine) {\n      // set its attributes based on the source and target nodes;\n      this.drawTools().updateLinePosition(\n        this,\n        this.renderingLine,\n        this.sourceNode,\n        this.targetNode,\n        this.__internalType,\n        this.renderingConfig().options.link_renderingType === \"curve\"\n      );\n\n      this.drawTools().updatePropertyPosition(\n        this,\n        this.renderingShape,\n        this.sourceNode,\n        this.targetNode,\n        this.__internalType,\n        this.renderingConfig().options.link_renderingType === \"curve\"\n      );\n    }\n  };\n\n  // this one will get the draw Functions replacement!\n  render = (groupRoot, propertyContainer, arrowContainer) => {\n    this.groupRoot = groupRoot;\n    this.propertyContainer = propertyContainer;\n    this.arrowContainer = arrowContainer;\n\n    // handle rendering based on the config;\n    const renderingElements = this.drawTools().renderLink(\n      this.groupRoot,\n      this.propertyContainer,\n      this.arrowContainer,\n      this.renderingConfig(),\n      this\n    );\n    this.renderingLine = renderingElements.renderingLine;\n    this.renderingShape = renderingElements.renderingShape;\n    this.renderingText = renderingElements.renderingText;\n    this.updateRenderingPosition();\n  };\n}\n","export default class DefaultRenderingHandler {\n  constructor() {\n    this.renderingConfigObject = {};\n\n    this.defaultNodeCFG = {\n      style: {\n        renderingType: \"circle\",\n        bgColor: \"#800080\",\n        strokeElement: true,\n        strokeWidth: \"1px\",\n        strokeStyle: \"solid\",\n        strokeColor: \"#000\",\n        radius: 50,\n        width: 100,\n        height: 50\n      },\n      fontStyle: {\n        fontFamily: \"Helvetica,Arial,sans-serif\",\n        fontColor: \"#4d88ad\",\n        fontSize: \"22px\"\n      },\n\n      options: {\n        drawDisplayName: true,\n        drawNestedAttributes: false,\n        cropLongText: true,\n        addTitleForDisplayName: true,\n        overwritesShapeSize: false,\n        overwriteOffset: 0,\n        fontPositionH: \"center\",\n        fontPositionV: \"center\"\n      }\n    };\n\n    this.defaultLinkCFG = {\n      style: {\n        link: {\n          lineStyle: \"dashed\",\n          lineWidth: \"2px\",\n          lineColor: \"#000000\"\n        },\n        arrowHead: {\n          renderingType: \"triangle\",\n          scaleFactor: 1,\n          strokeWidth: \"2px\",\n          strokeStyle: \"solid\",\n          strokeColor: \"#000000\",\n          fillColor: \"#45c3d6\"\n        },\n        arrowTail: {\n          renderingType: \"diamond\",\n          scaleFactor: 2,\n          strokeWidth: \"2px\",\n          strokeStyle: \"solid\",\n          strokeColor: \"#d58d88\",\n          fillColor: \"#d6d5d5\"\n        },\n        propertyNode: {\n          style: {\n            renderingType: \"rect\",\n            bgColor: \"#aaccff\",\n            roundedCorner: \"0,0\",\n            fontSizeOverWritesShapeSize: \"true\",\n            overWriteOffset: \"5\",\n            strokeElement: \"false\",\n            radius: 50,\n            width: 100,\n            height: 25\n          },\n          fontStyle: {\n            fontFamily: \"Helvetica,Arial,sans-serif\",\n            fontColor: \"#000000\",\n            fontSize: \"22px\"\n          },\n          options: {\n            drawDisplayName: true,\n            cropLongText: true,\n            addTitleForDisplayName: true,\n            overwritesShapeSize: false,\n            overwriteOffset: 0,\n            fontPositionH: \"center\",\n            fontPositionV: \"center\"\n          }\n        }\n      },\n      options: {\n        drawPropertyNode: true,\n        drawArrowHead: true,\n        drawArrowTail: false,\n        link_renderingType: \"line\" // line or curve\n      }\n    };\n  }\n  getNodeConfigFromType = type => {\n    if (!this.renderingConfigObject.hasOwnProperty(type)) {\n      console.log(\"NO DEFINITION FOR NODE TYPE:\" + type);\n      return this.defaultNodeCFG;\n    }\n    return this.renderingConfigObject[type];\n  };\n\n  getLinkConfigFromType = type => {\n    if (!this.renderingConfigObject.hasOwnProperty(type)) {\n      console.log(\"NO DEFINITION FOR LINK TYPE:\" + type);\n\n      return this.defaultLinkCFG;\n    }\n    return this.renderingConfigObject[type];\n  };\n}\n","import BaseLayoutComponent from \"./BaseLayoutComponent\";\nimport * as d3 from \"d3\";\n\nexport default class ForceLayout extends BaseLayoutComponent {\n  constructor(graph) {\n    super(graph);\n    this.force = undefined;\n    this.forceLinks = [];\n    this.forceNodes = [];\n    this.linkDistance = \"auto\";\n    this.distanceValue = 300;\n    this.layoutSize = [];\n  }\n\n  pauseForceLayoutAnimation = doPause => {\n    if (doPause) {\n      this.stopForce();\n    } else {\n      this.resumeForce();\n    }\n  };\n\n  setLinkDistance(value) {\n    this.distanceValue = value;\n    if (this.force) {\n      this.force.linkDistance(value);\n    }\n  }\n  resumeForce() {\n    if (this.force) {\n      this.force.resume();\n    }\n  }\n  stopForce() {\n    if (this.force) {\n      this.force.stop();\n    }\n  }\n  toggleForce() {\n    if (this.force) {\n      if (this.force.alpha() === 0) {\n        this.force.resume();\n      } else {\n        this.force.stop();\n      }\n    }\n  }\n\n  initializeLayoutEngine() {\n    this.updateLayoutSize();\n    this.renderedNodes = this.graph.nodes;\n    this.renderedLinks = this.graph.links;\n    if (this.force) {\n      this.force.stop();\n    }\n    this.createForceElements();\n    this.force.start();\n  }\n\n  updateLayoutSize() {\n    const bb = this.graph.svgRoot.node().getBoundingClientRect();\n    this.layoutSize[0] = bb.width;\n    this.layoutSize[1] = bb.height;\n  }\n\n  recalculatePositions = () => {\n    this.renderedNodes.forEach(node => {\n      node.updateRenderingPosition();\n    });\n    this.renderedLinks.forEach(link => {\n      link.updateRenderingPosition();\n    });\n  };\n\n  createForceElements() {\n    const that = this;\n    if (this.force === undefined) {\n      this.force = d3.layout.force();\n    }\n\n    this.forceLinks = [];\n    this.forceNodes = [];\n    let i;\n    // for (i = 0; i < graph.propNodes.length; i++) {\n    //   if (graph.propNodes[i].visible()) {\n    //     // this is done when the property node it self is a force node >> it will return 2 links\n    //     this.forceLinks = this.forceLinks.concat(\n    //       graph.propNodes[i].getForceLink()\n    //     );\n    //   }\n    // }\n\n    // update force nodes based on visible flag\n    for (i = 0; i < this.renderedNodes.length; i++) {\n      if (this.renderedNodes[i].visible()) {\n        this.forceNodes.push(this.renderedNodes[i]);\n      }\n    }\n\n    for (i = 0; i < this.renderedLinks.length; i++) {\n      if (this.renderedLinks[i].visible()) {\n        this.forceLinks = this.forceLinks.concat(\n          this.renderedLinks[i].getForceLink()\n        );\n        this.forceNodes = this.forceNodes.concat(\n          this.renderedLinks[i].getForceNode()\n        );\n      }\n    }\n\n    this.force.nodes(this.forceNodes);\n    this.force.links(this.forceLinks);\n\n    // add reference to the layouthandler itself;\n    this.forceNodes.forEach(node => {\n      node.layoutHandlerReference = this;\n    });\n\n    this.forceLinks.forEach(link => {\n      link.layoutHandlerReference = this;\n    });\n\n    this.distanceValue = 400;\n    // create forceLinks;\n    this.force\n      .charge(-700)\n      .linkDistance(this.computeLinkDistance) // just make sure that our links are not to long.\n      .linkStrength(1)\n      .size([that.layoutSize[0], that.layoutSize[1]])\n      .gravity(0.025);\n\n    this.force.on(\"tick\", this.recalculatePositions);\n  }\n\n  computeLinkDistance(link) {\n    if (link.type === \"direct\") {\n      return 400;\n    }\n    if (link.type === \"loop\") {\n      return 150;\n    }\n    if (link.type === \"mlPart\") {\n      return 100;\n    }\n  }\n} // end of class definition\n","export default class BaseLayoutComponent {\n  constructor(graph) {\n    this.graph = graph;\n\n    this.renderedNodes = graph.nodes;\n    this.renderedLinks = graph.links;\n  }\n}\n","import * as d3 from \"d3\";\nimport NodePrimitive from \"./renderingElements/NodePrimitive\";\nimport LinkPrimitive from \"./renderingElements/LinkPrimitive\";\nimport DefaultRenderingHandler from \"./renderingConfigs/defaultRenderingHandler\";\nimport DrawTools from \"./DrawTools\";\nimport ForceLayout from \"./Layout/ForceLayout\";\nexport default class GraphRenderer {\n  constructor() {\n    this.GRAPH_TYPE = \"ABSTRACT_RENDERING_TYPE\";\n\n    this.model = null;\n    this.layoutHandler = null;\n    this.renderingConfig = null;\n    this.interactionHandler = null;\n    this.drawTools = null;\n\n    this.nodes = [];\n    this.links = [];\n\n    this.nodeMap = {};\n    this.linkMap = {};\n\n    this.divRoot = null;\n    this.svgRoot = null;\n    this.graphRoot = null;\n\n    // this can be overwritten (but it gives a proper ordering of the layers)\n    this.layerObject = [\"arrows\", \"links\", \"properties\", \"nodes\"];\n  }\n\n  /** Exposed functions >> DO NOT OVERWRITE **/\n\n  setRenderingContainer = divId => {\n    this.divRoot = divId;\n  };\n\n  setDrawTools = tools => {\n    this.drawTools = tools;\n  };\n\n  setModel = model => {\n    this.model = model;\n  };\n\n  setRenderingConfig = config => {\n    this.renderingConfig = config;\n  };\n\n  getRenderingHandler = () => {\n    return this.renderingConfig;\n  };\n\n  setInteractionHandler = handler => {\n    this.interactionHandler = handler;\n  };\n\n  createRenderingElements() {\n    if (!this.model) {\n      console.error(\"NO MODEL SET ! \");\n    }\n    if (!this.renderingConfig) {\n      // create a default renderingConfigHandler;\n      console.warn(\n        \"NO RENDERING CONFIG HANDLER SET ! WILL CREATE A DEFAULT ONE FOR YOU!\"\n      );\n      this.renderingConfig = new DefaultRenderingHandler();\n    }\n    if (!this.drawTools) {\n      // create a default renderingConfigHandler;\n      console.warn(\n        \"NO DRAWTOOLS  HANDLER SET ! WILL CREATE A DEFAULT ONE FOR YOU!\"\n      );\n      this.drawTools = new DrawTools(this);\n    }\n\n    if (!this.layoutHandler) {\n      // create a default renderingConfigHandler;\n      console.warn(\n        \"NO LAYOUT  HANDLER SET ! WILL CREATE A DEFAULT ONE FOR YOU! << FORCE DIRECTED LAYOUT>>>\"\n      );\n      this.layoutHandler = new ForceLayout(this);\n    }\n  }\n\n  initializeRenderingContainer = () => {\n    if (!this.divRoot) {\n      console.error(\"No div found for the graph \");\n      return;\n    }\n    // clear rendering containers;\n    this._clearRenderingContainers();\n    // create the renderingContainers\n    this._createRenderingContainers();\n  };\n\n  _clearRenderingContainers = () => {\n    if (this.graphRoot) {\n      this.graphRoot.selectAll(\"defs\").remove();\n      this.graphRoot.selectAll(\"g\").remove();\n      this.graphRoot.remove();\n    }\n    if (this.svgRoot) {\n      this.svgRoot.remove();\n    }\n\n    if (d3.select(\"#\" + this.divRoot + \"_svgRoot\")) {\n      // we have on from some other initialization.. remove that\n      d3.select(\"#\" + this.divRoot + \"_svgRoot\").remove();\n    }\n  };\n\n  _createRenderingContainers = () => {\n    const divNode = d3.select(\"#\" + this.divRoot);\n    this.svgRoot = divNode.append(\"svg\");\n    this.svgRoot.node().id = this.divRoot + \"_svgRoot\";\n    this.svgRoot.style(\"background\", \"#ECF0F1\");\n\n    // adjust svgSize to the container size;\n    this._checkForPaddingInDivNode();\n    const divBoundingBox = divNode.node().getBoundingClientRect();\n    this.svgRoot.style(\"width\", divBoundingBox.width + \"px\");\n    this.svgRoot.style(\"height\", divBoundingBox.height + \"px\");\n\n    // createGraphGroup; // why you ask? so we can compute the bounding size of it later (zoom to graph Extent functions)\n\n    this.graphRoot = this.svgRoot.append(\"g\");\n    this.graphRoot.style(\"overflow\", \"hidden\");\n\n    this._createLayers();\n    // add Layers\n  };\n\n  _createLayers = () => {\n    const root = this.graphRoot;\n    const layerNamePrefix = this.divRoot;\n    this.layerObject.forEach(function(layer) {\n      if (layer === \"arrows\") {\n        const markerContainer = root.append(\"defs\");\n        markerContainer.node().id = layerNamePrefix + \"_\" + layer;\n      } else {\n        const renderingLayer = root.append(\"g\");\n        renderingLayer.node().id = layerNamePrefix + \"_\" + layer;\n      }\n    });\n  };\n\n  _checkForPaddingInDivNode = () => {\n    const divNode = d3.select(\"#\" + this.divRoot);\n    if (\n      divNode.style(\"padding-left\") ||\n      divNode.style(\"padding-right\") ||\n      divNode.style(\"padding-top\") ||\n      divNode.style(\"padding-bottom\")\n    ) {\n      let noError = 0;\n      if (\n        divNode.style(\"padding-left\") &&\n        (divNode.style(\"padding-left\") === \"0\" ||\n          divNode.style(\"padding-left\") === \"0px\")\n      ) {\n        noError++;\n      }\n      if (\n        divNode.style(\"padding-right\") &&\n        (divNode.style(\"padding-right\") === \"0\" ||\n          divNode.style(\"padding-right\") === \"0px\")\n      ) {\n        noError++;\n      }\n\n      if (\n        divNode.style(\"padding-top\") &&\n        (divNode.style(\"padding-top\") === \"0\" ||\n          divNode.style(\"padding-top\") === \"0px\")\n      ) {\n        noError++;\n      }\n      if (\n        divNode.style(\"padding-bottom\") &&\n        (divNode.style(\"padding-bottom\") === \"0\" ||\n          divNode.style(\"padding-bottom\") === \"0px\")\n      ) {\n        noError++;\n      }\n      if (noError !== 4) {\n        console.error(\n          \"DO NOT PUT PADDING INTO THE RENDERING DIV! \\n Will nevertheless try to render it \"\n        );\n      }\n    }\n  };\n\n  // SOME RENDERING STUFF\n  createNodePrimitive = node => {\n    const nodePrimitive = new NodePrimitive();\n    nodePrimitive.id(node.__nodeLinkIdentifier);\n    nodePrimitive.displayName(node.__displayName);\n    nodePrimitive.renderingConfig(\n      this.renderingConfig.getNodeConfigFromType(node.__nodeType)\n    );\n    nodePrimitive.refereceResource = node;\n    nodePrimitive.drawTools(this.drawTools);\n\n    this.nodes.push(nodePrimitive);\n    this.nodeMap[nodePrimitive.id()] = nodePrimitive;\n  };\n\n  createLinkPrimitive = link => {\n    const linkPrimitive = new LinkPrimitive();\n    linkPrimitive.id(link.__nodeLinkIdentifier);\n    linkPrimitive.displayName(link.__displayName);\n\n    if (link.__linkType !== \"axiomLink\") {\n      linkPrimitive.renderingConfig(\n        this.renderingConfig.getLinkConfigFromType(link.__linkType)\n      );\n    } else {\n      linkPrimitive.renderingConfig(\n        this.renderingConfig.getLinkConfigFromType(link.__linkAxiom)\n      );\n    }\n    linkPrimitive.drawTools(this.drawTools);\n\n    // fetch the source and target from the map;\n    linkPrimitive.setSourceNode(\n      this.nodeMap[link.__source.__nodeLinkIdentifier]\n    );\n    linkPrimitive.setTargetNode(\n      this.nodeMap[link.__target.__nodeLinkIdentifier]\n    );\n\n    if (\n      this.nodeMap[link.__source.__nodeLinkIdentifier] ===\n      this.nodeMap[link.__target.__nodeLinkIdentifier]\n    ) {\n      linkPrimitive.setInternalType(\"loop\");\n      const item = this.nodeMap[link.__source.__nodeLinkIdentifier];\n      item.numberOfLoops(item.numberOfLoops() + 1);\n    }\n    this.links.push(linkPrimitive);\n    this.linkMap[linkPrimitive.id()] = linkPrimitive;\n  };\n\n  updateMultiLinkTypes = link => {\n    if (link.__internalType === \"loop\") {\n      return;\n    }\n    const src = link.sourceNode;\n    const tar = link.targetNode;\n\n    // this is a pair;\n    // lets see if we have multi link;\n    let isMultiLink = false;\n    src.outgoingLinks.forEach(out => {\n      if (out.__internalType === \"loop\" || out.id() === link.id()) {\n        return;\n      }\n      if (out.targetNode.id() === tar.id()) {\n        isMultiLink = true;\n      }\n    });\n\n    tar.outgoingLinks.forEach(out => {\n      if (out.__internalType === \"loop\" || out.id() === link.id()) {\n        return;\n      }\n      if (out.targetNode.id() === src.id()) {\n        isMultiLink = true;\n      }\n    });\n    if (isMultiLink) {\n      link.setInternalType(\"multiLink\");\n    }\n\n    // kill multiLink if we have no label to draw!;\n    if (link.renderingConfig().options.drawPropertyNode === false) {\n      link.setInternalType(\"singleLink\");\n    }\n  };\n\n  drawRenderingPrimitives = () => {\n    // for each renderingNode, we need something that calls its draw function;\n    this._drawRenderingPrimitivesForNodes();\n    this._drawRenderingPrimitivesForLinks();\n\n    // applyInteractions\n    if (this.interactionHandler) {\n      this.interactionHandler.applyInteractions(this);\n    } else {\n      console.log(\"No Interaction Handler set, the graph will be static!\");\n    }\n\n    if (this.layoutHandler) {\n      this.layoutHandler.initializeLayoutEngine();\n    } else {\n      console.log(\"No Layout Handler set, the graph will be static!\");\n    }\n  };\n\n  _drawRenderingPrimitivesForLinks = () => {\n    const linkContainer = d3.select(\"#\" + this.divRoot + \"_links\");\n    const propertyContainer = d3.select(\"#\" + this.divRoot + \"_properties\");\n    const arrowContainer = d3.select(\"#\" + this.divRoot + \"_arrows\");\n\n    this.renderedLinks = this.createRenderingPrimitives(\n      linkContainer,\n      this.links,\n      \"LinkItem\"\n    );\n\n    \n\n    // execute the rendering function of the nodes;\n    this.renderedLinks.each(function(item) {\n      if (item.visible()) {\n        item.render(d3.select(this), propertyContainer, arrowContainer);\n      } else {\n        d3.select(this).remove();\n      }\n    });\n  };\n\n  _drawRenderingPrimitivesForNodes = () => {\n    const nodeContainer = d3.select(\"#\" + this.divRoot + \"_nodes\");\n    this.renderedNodes = this.createRenderingPrimitives(\n      nodeContainer,\n      this.nodes,\n      \"NodeItem\"\n    );\n\n    // execute the rendering function of the nodes;\n    this.renderedNodes.each(function(item) {\n      if (item.visible()) {\n        item.render(d3.select(this));\n      } else {\n        d3.select(this).remove();\n      }\n    });\n  };\n\n  createRenderingPrimitives(container, data, typeClass) {\n    return container\n      .selectAll(\".\" + typeClass)\n      .data(data)\n      .enter()\n      .append(\"g\")\n      .classed(typeClass, true)\n      .attr(\"id\", function(d) {\n        return d.id();\n      });\n  }\n}\n","import * as d3 from 'd3';\n\nexport default class GraphInteractions {\n  constructor(graph) {\n    this.graphObject = graph;\n    this.zoom = undefined;\n    this.graphTranslation = [0, 0];\n    this.zoomFactor = 1.0;\n    this.transformAnimation = false;\n  }\n\n  applyGraphInteractions = () => {\n    if (!this.graphObject) {\n      console.error('NO GRAPH OBJECT FOUND');\n      return;\n    }\n    // graph interactions are zoom and drag operations\n    const that = this;\n\n    // Apply the zooming factor.\n    this.zoom = d3.behavior\n      .zoom()\n      .duration(150)\n      .scaleExtent([0.02, 5])\n      .on('zoom', this.zoomed)\n      .on('zoomstart', function() {\n        if (d3.event.sourceEvent && d3.event.sourceEvent.buttons && d3.event.sourceEvent.buttons === 1) {\n          that.graphObject.svgRoot.style('cursor', 'all-scroll');\n        }\n      })\n      .on('zoomend', function() {\n        that.graphObject.svgRoot.style('cursor', 'auto');\n      });\n\n    this.graphObject.svgRoot.call(this.zoom);\n    this.zoom = this.zoom.scaleExtent([0.02, 5]);\n    if (this.graphObject.graphRoot) {\n      this.zoom.event(this.graphObject.graphRoot);\n    }\n  };\n\n  zoomed = () => {\n    const that = this;\n    const graph = this.graphObject;\n    const graphContainer = graph.graphRoot;\n    let zoomEventByMWheel = false;\n    if (d3.event.sourceEvent) {\n      if (d3.event.sourceEvent.deltaY) {\n        zoomEventByMWheel = true;\n      }\n    }\n    if (zoomEventByMWheel === false) {\n      if (this.transformAnimation === true) {\n        return;\n      }\n      this.zoomFactor = d3.event.scale;\n      this.graphTranslation = d3.event.translate;\n      graphContainer.attr('transform', 'translate(' + this.graphTranslation + ')scale(' + this.zoomFactor + ')');\n      return;\n    }\n    /** animate the transition **/\n    this.zoomFactor = d3.event.scale;\n    this.graphTranslation = d3.event.translate;\n    graphContainer\n      .transition()\n      .tween('attr.translate', function() {\n        return function() {\n          // need the that ptr to the object\n          that.transformAnimation = true;\n          const tr = d3.transform(graphContainer.attr('transform'));\n          that.graphTranslation[0] = tr.translate[0];\n          that.graphTranslation[1] = tr.translate[1];\n          that.zoomFactor = tr.scale[0];\n        };\n      })\n      .each('end', function() {\n        that.transformAnimation = false;\n      })\n      .attr('transform', 'translate(' + that.graphTranslation + ')scale(' + that.zoomFactor + ')')\n      .ease('linear')\n      .duration(250);\n  };\n}\n","import * as d3 from \"d3\";\n\nexport default class NodeInteractions {\n  constructor(graph) {\n    this.graphObject = graph;\n    this.dragBehaviour = null;\n    this.hasNodeClick = false;\n    this.hasNodeDobleClick = false;\n    this.hasNodeHover = true;\n  }\n\n  applyNodeInteractions = () => {\n    if (!this.graphObject) {\n      console.error(\"NO GRAPH OBJECT FOUND\");\n      return;\n    }\n\n    // Node Interactions are:\n    // Drag,\n    this.dragBehaviour = d3.behavior\n      .drag()\n      .origin(function(d) {\n        return d;\n      })\n      .on(\"dragstart\", this.dragStart)\n      .on(\"drag\", this.drag)\n      .on(\"dragend\", this.dragEnd);\n\n    /** DEFINING OWN INTERNAL HOVER BEHAVIOR -- DO NOT OVERWRITE **/\n    const that = this;\n    this.hoverBehaviour = function(d) {\n      if (that.hasNodeHover) {\n        d.on(\"mouseover\", that.nodeHoverIn);\n        d.on(\"mouseout\", that.nodeHoverOut);\n      }\n    };\n\n    /** DEFINING OWN INTERNAL CLICK BEHAVIOR -- DO NOT OVERWRITE **/\n    this.clickBehaviour = function(d) {\n      if (that.hasNodeClick) {\n        d.on(\"click\", that.nodeClick);\n      }\n    };\n    this.doubleClickBehavoir = function(d) {\n      if (that.hasNodeDobleClick) {\n        d.on(\"click\", that.nodeDoubleClick);\n      }\n    };\n\n    // apply the node behavoir on the nodes;\n    const nodes = this.graphObject.nodes;\n    if (nodes.length > 0) {\n      nodes.forEach(n => {\n        if (n.groupRoot) {\n          n.groupRoot.call(this.dragBehaviour);\n          n.groupRoot.call(this.hoverBehaviour);\n          n.groupRoot.call(this.clickBehaviour);\n          n.groupRoot.call(this.doubleClickBehavoir);\n        }\n      });\n    }\n\n    // Hover\n    // Click\n    // DoubleClick\n  };\n\n  nodeHoverIn(d) {\n    const shape = d.renderingShape;\n    shape.style(\"fill\", \"green\");\n  }\n\n  nodeHoverOut(d) {\n    const shape = d.renderingShape;\n    shape.style(\"fill\", d.renderingConfig().style.bgColor);\n  }\n\n  nodeDoubleClick(d) {\n    // add Handlers\n    d3.event.stopPropagation(); // Prevent panning\n    d3.event.preventDefault();\n    d.layoutHandlerReference.toggleForce();\n  }\n  nodeClick(d) {\n    // add handers; >> this is where we want to overwrite something;\n  }\n\n  // split the dragger functions for better reuse;\n  dragStart = d => {\n    d3.event.sourceEvent.stopPropagation(); // Prevent panning\n    d.fixed = true;\n    d.groupRoot.style(\"cursor\", \"pointer\");\n  };\n\n  drag = d => {\n    d3.event.sourceEvent.stopPropagation(); // Prevent panning\n    d.setPosition(d3.event.x, d3.event.y);\n    d.px = d3.event.x;\n    d.py = d3.event.y;\n    d.updateRenderingPosition();\n\n    if (d.layoutHandlerReference && d.layoutHandlerReference.force) {\n      d.layoutHandlerReference.resumeForce();\n    }\n  };\n\n  dragEnd = d => {\n    d.fixed = false;\n    d.groupRoot.style(\"cursor\", \"auto\");\n  };\n}\n","import * as d3 from \"d3\";\n\nexport default class LinkInteractions {\n  constructor(graph) {\n    this.graphObject = graph;\n    this.dragBehaviour = null;\n    this.hasNodeClick = false;\n    this.hasNodeDobleClick = false;\n    this.hasLinkHover = true;\n    this.hasPropertyHover = true;\n  }\n\n  applyLinkInteractions = () => {\n    if (!this.graphObject) {\n      console.error(\"NO GRAPH OBJECT FOUND\");\n      return;\n    }\n\n    // Drag,\n    this.dragBehaviour = d3.behavior\n      .drag()\n      .origin(function(d) {\n        return d;\n      })\n      .on(\"dragstart\", this.dragStart)\n      .on(\"drag\", this.drag)\n      .on(\"dragend\", this.dragEnd);\n\n    /** DEFINING OWN INTERNAL HOVER BEHAVIOR -- DO NOT OVERWRITE **/\n    const that = this;\n    this.hoverBehaviour = function(d) {\n      if (that.hasLinkHover) {\n        d.on(\"mouseover\", that.linkHoverIn);\n        d.on(\"mouseout\", that.linkHoverOut);\n      }\n    };\n    this.propertyHoverBehaviour = function(d) {\n      if (that.hasPropertyHover) {\n        d.on(\"mouseover\", that.propertyHoverIn);\n        d.on(\"mouseout\", that.propertyHoverOut);\n      }\n    };\n\n    // /** DEFINING OWN INTERNAL CLICK BEHAVIOR -- DO NOT OVERWRITE **/\n    // this.clickBehaviour = function(d) {\n    //   if (that.hasNodeClick) {\n    //     d.on('click', that.nodeClick);\n    //   }\n    // };\n    // this.doubleClickBehavoir = function(d) {\n    //   if (that.hasNodeDobleClick) {\n    //     d.on('click', that.nodeDoubleClick);\n    //   }\n    // };\n\n    // apply the node behavoir on the nodes;\n    const links = this.graphObject.links;\n    if (links.length > 0) {\n      links.forEach(l => {\n        if (l.groupRoot) {\n          l.groupRoot.call(this.hoverBehaviour);\n          // try to get the parentOf shape;\n          if (l.renderingShape) {\n            const parentNode = l.renderingShape.node().parentNode;\n            if (parentNode) {\n              const shapeRoot = d3.select(parentNode);\n              if (shapeRoot) {\n                shapeRoot.call(this.propertyHoverBehaviour);\n                shapeRoot.call(this.dragBehaviour);\n              }\n            }\n          }\n        }\n      });\n    }\n\n    // Hover\n    // Click\n    // DoubleClick\n  };\n\n  linkHoverIn(d) {\n    const shape = d.renderingLine;\n    shape.style(\"stroke\", \"red\");\n  }\n\n  linkHoverOut(d) {\n    const shape = d.renderingLine;\n    shape.style(\"stroke\", d.renderingConfig().style.link.lineColor);\n  }\n\n  propertyHoverIn = d => {\n    const shape = d.ref.renderingShape;\n    shape.style(\"fill\", \"red\");\n    const that = this;\n    if (d.mouseEntered === true) {\n      return;\n    }\n    d.mouseEntered = true;\n    d.keepRendering = true;\n\n    if (d.unblockRendering) {\n      d.keepRendering = false;\n      d.unblockRendering = false;\n    }\n\n    // Testing internal types hovers\n    // if (d.ref.__internalType === \"multiLink\") {\n    //   const radius = 20;\n    //   const aBtn = d.groupRoot.append(\"g\");\n    //   aBtn.classed(\"MultiLinkHoverButton\", true);\n    //   // draw a button top left;\n    //   const targetPrimitive = aBtn.append(\"circle\");\n    //   targetPrimitive.attr(\"r\", radius);\n    //   targetPrimitive.attr(\"cx\", 50);\n    //   targetPrimitive.attr(\"cy\", -10);\n    //   targetPrimitive.style(\"fill\", \"#ccc\");\n    //\n    //   targetPrimitive.on(\"mouseover\", function(d) {\n    //     that.propertyHoverIn(d);\n    //     targetPrimitive.style(\"fill\", \"red\");\n    //   });\n    //   targetPrimitive.on(\"mouseout\", function(d) {\n    //     targetPrimitive.style(\"fill\", \"#444\");\n    //   });\n    //   targetPrimitive.on(\"click\", function(d) {\n    //     console.log(\"THAT BUTTON WAS CLICKED!\");\n    //     console.log(that.graphObject); // we could emit stuff;\n    //   });\n    // }\n  };\n\n  propertyHoverOut(d) {\n    const shape = d.ref.renderingShape;\n    shape.style(\"fill\", d.ref.renderingConfig().style.propertyNode.bgColor);\n    if (d.ref.__internalType === \"multiLink\") {\n      d3.selectAll(\".MultiLinkHoverButton\").remove();\n    }\n    d.mouseEntered = false;\n  }\n\n  nodeDoubleClick(d) {\n    // add Handlers\n  }\n  nodeClick(d) {\n    // add handers; >> this is where we want to overwrite something;\n  }\n\n  // split the dragger functions for better reuse;\n  dragStart = d => {\n    d3.event.sourceEvent.stopPropagation(); // Prevent panning\n    d.fixed = true;\n    d.groupRoot.style(\"cursor\", \"pointer\");\n  };\n\n  drag = d => {\n    d3.event.sourceEvent.stopPropagation(); // Prevent panning\n    d.setPosition(d3.event.x, d3.event.y);\n    d.px = d3.event.x;\n    d.py = d3.event.y;\n    d.ref.updateRenderingPosition();\n    if (d.layoutHandlerReference && d.layoutHandlerReference.force) {\n      d.layoutHandlerReference.resumeForce();\n    }\n  };\n\n  dragEnd = d => {\n    d.fixed = false;\n    d.groupRoot.style(\"cursor\", \"auto\");\n  };\n}\n","import GraphInteractions from './graphInteractions';\nimport NodeInteractions from './nodeInteractions';\nimport LinkInteractions from './linkInteractions';\n\nexport default class Interactions {\n  constructor() {\n    this.graphInteractions = null;\n    this.nodeInteractions = null;\n    this.linkInteractions = null;\n  }\n\n  applyInteractions(graph) {\n    /** GRAPH INTERACTION **/\n    if (!this.graphInteractions) {\n      console.warn('NO GRAPH INTERACTIONS DEFINED!  << Creating default ones >> ');\n      this.graphInteractions = new GraphInteractions(graph);\n    }\n    this.graphInteractions.applyGraphInteractions();\n\n    /** NODE INTERACTION **/\n    if (!this.nodeInteractions) {\n      console.warn('NO NODE INTERACTIONS DEFINED!  << Creating default ones >> ');\n      this.nodeInteractions = new NodeInteractions(graph);\n    }\n    this.nodeInteractions.applyNodeInteractions();\n\n    /** LINK INTERACTION **/\n    if (!this.linkInteractions) {\n      console.warn('NO LINK INTERACTIONS DEFINED!  << Creating default ones >> ');\n      this.linkInteractions = new LinkInteractions(graph);\n    }\n    this.linkInteractions.applyLinkInteractions();\n  }\n}\n","import GraphRenderer from \"./graph\";\nimport Interactions from \"./Interactions/interactions\";\nexport default class VOWLRenderer extends GraphRenderer {\n  constructor() {\n    super();\n    this.GRAPH_TYPE = \"VOWL_RENDERING_TYPE\";\n\n    this.layoutHandler = null;\n    this.renderingConfig = null;\n    this.interactionHandler = new Interactions();\n  }\n\n  /** Exposed functions >> DO NOT OVERWRITE **/\n\n  createRenderingElements() {\n    super.createRenderingElements();\n    \n    this.model.nodes.forEach(node => {\n      this.createNodePrimitive(node);\n    });\n    // set the position of the test nodes;\n\n    this.nodes[0].setPosition(60, 150);\n    this.nodes[1].setPosition(300, 150);\n\n    this.model.links.forEach(link => {\n      this.createLinkPrimitive(link);\n    });\n\n    let i = 0;\n    this.links.forEach(link => {\n      this.updateMultiLinkTypes(link);\n      link.setPosition(200, i * 50);\n      i++;\n    });\n\n    // TODO SAME FOR LINKS!;\n  }\n}\n","export default class DefaultRenderingHandler {\n  constructor() {\n    this.renderingConfigObject = {\n      nodes: {\n        \"owl:Class\": {\n          style: {\n            renderingType: \"circle\",\n            bgColor: \"#aaccff\",\n            strokeElement: true,\n            strokeWidth: \"1px\",\n            strokeStyle: \"solid\",\n            strokeColor: \"#000\",\n            radius: 50,\n            width: 100,\n            height: 50\n          },\n          fontStyle: {\n            fontFamily: \"Helvetica,Arial,sans-serif\",\n            fontColor: \"#000\",\n            fontSize: \"12px\"\n          },\n\n          options: {\n            drawDisplayName: true,\n            drawNestedAttributes: false,\n            cropLongText: false,\n            addTitleForDisplayName: true,\n            overwritesShapeSize: false,\n            overwriteOffset: 0,\n            fontPositionH: \"center\",\n            fontPositionV: \"center\"\n          }\n        },\n\n        Literal: {\n          style: {\n            renderingType: \"rect\",\n            bgColor: \"#FFCC33\",\n            strokeElement: true,\n            strokeWidth: \"1px\",\n            strokeStyle: \"solid\",\n            strokeColor: \"#000\",\n            radius: 30,\n            width: 100,\n            height: 25\n          },\n          fontStyle: {\n            fontFamily: \"Helvetica,Arial,sans-serif\",\n            fontColor: \"#000\",\n            fontSize: \"12px\"\n          },\n\n          options: {\n            drawDisplayName: true,\n            drawNestedAttributes: false,\n            cropLongText: true,\n            addTitleForDisplayName: true,\n            overwritesShapeSize: false,\n            overwriteOffset: 0,\n            fontPositionH: \"center\",\n            fontPositionV: \"center\"\n          }\n        }\n      },\n      links: {\n        \"owl:datatypeProperty\": {\n          style: {\n            link: {\n              lineStyle: \"solid\",\n              lineWidth: \"2px\",\n              lineColor: \"#000000\"\n            },\n            arrowHead: {\n              renderingType: \"triangle\",\n              scaleFactor: 1,\n              strokeWidth: \"2px\",\n              strokeStyle: \"solid\",\n              strokeColor: \"#000000\",\n              fillColor: \"#000000\"\n            },\n\n            propertyNode: {\n              style: {\n                renderingType: \"rect\",\n                bgColor: \"#99CC66\",\n                roundedCorner: \"0,0\",\n                fontSizeOverWritesShapeSize: \"true\",\n                overWriteOffset: \"5\",\n                strokeElement: \"false\",\n                radius: 50,\n                width: 100,\n                height: 25\n              },\n              fontStyle: {\n                fontFamily: \"Helvetica,Arial,sans-serif\",\n                fontColor: \"#000000\",\n                fontSize: \"12px\"\n              },\n              options: {\n                drawDisplayName: true,\n                cropLongText: true,\n                addTitleForDisplayName: true,\n                overwritesShapeSize: false,\n                overwriteOffset: 0,\n                fontPositionH: \"center\",\n                fontPositionV: \"center\"\n              }\n            }\n          },\n          options: {\n            drawPropertyNode: true,\n            drawArrowHead: true,\n            drawArrowTail: false,\n            link_renderingType: \"line\" // line or curve\n          }\n        },\n\n        \"owl:objectProperty\": {\n          style: {\n            link: {\n              lineStyle: \"solid\",\n              lineWidth: \"2px\",\n              lineColor: \"#000000\"\n            },\n            arrowHead: {\n              renderingType: \"triangle\",\n              scaleFactor: 1,\n              strokeWidth: \"2px\",\n              strokeStyle: \"solid\",\n              strokeColor: \"#000000\",\n              fillColor: \"#000000\"\n            },\n\n            propertyNode: {\n              style: {\n                renderingType: \"rect\",\n                bgColor: \"#aaccff\",\n                roundedCorner: \"0,0\",\n                fontSizeOverWritesShapeSize: \"true\",\n                overWriteOffset: \"5\",\n                strokeElement: \"false\",\n                radius: 50,\n                width: 100,\n                height: 25\n              },\n              fontStyle: {\n                fontFamily: \"Helvetica,Arial,sans-serif\",\n                fontColor: \"#000000\",\n                fontSize: \"12px\"\n              },\n              options: {\n                drawDisplayName: true,\n                cropLongText: true,\n                addTitleForDisplayName: true,\n                overwritesShapeSize: false,\n                overwriteOffset: 0,\n                fontPositionH: \"center\",\n                fontPositionV: \"center\"\n              }\n            }\n          },\n          options: {\n            drawPropertyNode: true,\n            drawArrowHead: true,\n            drawArrowTail: false,\n            link_renderingType: \"line\" // line or curve\n          }\n        }\n      }\n    };\n\n    this.defaultNodeCFG = {\n      style: {\n        renderingType: \"rect\",\n        bgColor: \"#ffffff\",\n        strokeElement: true,\n        strokeWidth: \"1px\",\n        strokeStyle: \"solid\",\n        strokeColor: \"#000\",\n        radius: 50,\n        width: 100,\n        height: 50,\n        roundedCorner: \"10,10\"\n      },\n      fontStyle: {\n        fontFamily: \"Helvetica,Arial,sans-serif\",\n        fontColor: \"#000\",\n        fontSize: \"12px\"\n      },\n\n      options: {\n        drawDisplayName: true,\n        drawNestedAttributes: true,\n        cropLongText: false,\n        addTitleForDisplayName: true,\n        overwritesShapeSize: false,\n        overwriteOffset: 0,\n        fontPositionH: \"center\",\n        fontPositionV: \"center\"\n      }\n    };\n\n    this.defaultLinkCFG = {\n      style: {\n        link: {\n          lineStyle: \"dashed\",\n          lineWidth: \"2px\",\n          lineColor: \"#000000\"\n        },\n        arrowHead: {\n          renderingType: \"triangle\",\n          scaleFactor: 1,\n          strokeWidth: \"2px\",\n          strokeStyle: \"solid\",\n          strokeColor: \"#000000\",\n          fillColor: \"#45c3d6\"\n        },\n        arrowTail: {\n          renderingType: \"diamond\",\n          scaleFactor: 2,\n          strokeWidth: \"2px\",\n          strokeStyle: \"solid\",\n          strokeColor: \"#d58d88\",\n          fillColor: \"#d6d5d5\"\n        },\n        propertyNode: {\n          style: {\n            renderingType: \"rect\",\n            bgColor: \"#aaccff\",\n            roundedCorner: \"0,0\",\n            fontSizeOverWritesShapeSize: \"true\",\n            overWriteOffset: \"5\",\n            strokeElement: \"false\",\n            radius: 50,\n            width: 100,\n            height: 25\n          },\n          fontStyle: {\n            fontFamily: \"Helvetica,Arial,sans-serif\",\n            fontColor: \"#000000\",\n            fontSize: \"22px\"\n          },\n          options: {\n            drawDisplayName: true,\n            cropLongText: true,\n            addTitleForDisplayName: true,\n            overwritesShapeSize: false,\n            overwriteOffset: 0,\n            fontPositionH: \"center\",\n            fontPositionV: \"center\"\n          }\n        }\n      },\n      options: {\n        drawPropertyNode: true,\n        drawArrowHead: true,\n        drawArrowTail: false,\n        link_renderingType: \"line\" // line or curve\n      }\n    };\n  }\n  getNodeConfigFromType = type => {\n    if (!this.renderingConfigObject.nodes.hasOwnProperty(type)) {\n      console.log(\"NO DEFINITION FOR NODE TYPE:\" + type);\n      return this.defaultNodeCFG;\n    }\n    return this.renderingConfigObject.nodes[type];\n  };\n\n  getLinkConfigFromType = type => {\n   \n    if (!this.renderingConfigObject.links.hasOwnProperty(type)) {\n      console.log(\"NO DEFINITION FOR LINK TYPE:\" + type);\n\n      return this.defaultLinkCFG;\n    }\n    return this.renderingConfigObject.links[type];\n  };\n}\n","export default class DefaultRenderingHandler {\n  constructor() {\n    this.renderingConfigObject = {\n      \"owl:Thing\": {\n        style: {\n          renderingType: \"circle\",\n          bgColor: \"#ffffff\",\n          strokeElement: true,\n          strokeWidth: \"1px\",\n          strokeStyle: \"dashed\",\n          strokeColor: \"#000\",\n          radius: 30,\n          width: 100,\n          height: 50\n        },\n        fontStyle: {\n          fontFamily: \"Helvetica,Arial,sans-serif\",\n          fontColor: \"#000\",\n          fontSize: \"12px\"\n        },\n\n        options: {\n          drawDisplayName: true,\n          drawNestedAttributes: false,\n          cropLongText: false,\n          addTitleForDisplayName: true,\n          overwritesShapeSize: false,\n          overwriteOffset: 0,\n          fontPositionH: \"center\",\n          fontPositionV: \"center\"\n        }\n      },\n\n      \"owl:Class\": {\n        style: {\n          renderingType: \"circle\",\n          bgColor: \"#aaccff\",\n          strokeElement: true,\n          strokeWidth: \"1px\",\n          strokeStyle: \"solid\",\n          strokeColor: \"#000\",\n          radius: 50,\n          width: 100,\n          height: 50\n        },\n        fontStyle: {\n          fontFamily: \"Helvetica,Arial,sans-serif\",\n          fontColor: \"#000\",\n          fontSize: \"12px\"\n        },\n\n        options: {\n          drawDisplayName: true,\n          drawNestedAttributes: false,\n          cropLongText: false,\n          addTitleForDisplayName: true,\n          overwritesShapeSize: false,\n          overwriteOffset: 0,\n          fontPositionH: \"center\",\n          fontPositionV: \"center\"\n        }\n      },\n\n      \"owl:equivalentClass\": {\n        style: {\n          renderingType: \"circle\",\n          bgColor: \"#aaccff\",\n          strokeElement: true,\n          strokeWidth: \"1px\",\n          strokeStyle: \"dotted\",\n          strokeColor: \"#000\",\n          radius: 50,\n          width: 100,\n          height: 50,\n          doubleStrokes: true\n        },\n        fontStyle: {\n          fontFamily: \"Helvetica,Arial,sans-serif\",\n          fontColor: \"#000\",\n          fontSize: \"12px\"\n        },\n\n        options: {\n          drawDisplayName: true,\n          drawNestedAttributes: false,\n          cropLongText: true,\n          addTitleForDisplayName: true,\n          overwritesShapeSize: false,\n          overwriteOffset: 0,\n          fontPositionH: \"center\",\n          fontPositionV: \"center\"\n        }\n      },\n\n      \"rdfs:Literal\": {\n        style: {\n          renderingType: \"rect\",\n          bgColor: \"#FFCC33\",\n          strokeElement: true,\n          strokeWidth: \"1px\",\n          strokeStyle: \"dashed\",\n          strokeColor: \"#000\",\n          radius: 30,\n          width: 50,\n          height: 20\n        },\n        fontStyle: {\n          fontFamily: \"Helvetica,Arial,sans-serif\",\n          fontColor: \"#000\",\n          fontSize: \"12px\"\n        },\n\n        options: {\n          drawDisplayName: true,\n          drawNestedAttributes: false,\n          cropLongText: false,\n          addTitleForDisplayName: true,\n          overwritesShapeSize: false,\n          overwriteOffset: 0,\n          fontPositionH: \"center\",\n          fontPositionV: \"center\"\n        }\n      },\n\n      \"owl:datatypeProperty\": {\n        style: {\n          link: {\n            lineStyle: \"solid\",\n            lineWidth: \"2px\",\n            lineColor: \"#000000\"\n          },\n          arrowHead: {\n            renderingType: \"triangle\",\n            scaleFactor: 1,\n            strokeWidth: \"2px\",\n            strokeStyle: \"solid\",\n            strokeColor: \"#000000\",\n            fillColor: \"#000000\"\n          },\n\n          propertyNode: {\n            style: {\n              renderingType: \"rect\",\n              bgColor: \"#99CC66\",\n              roundedCorner: \"0,0\",\n              fontSizeOverWritesShapeSize: \"true\",\n              overWriteOffset: \"5\",\n              strokeElement: \"false\",\n              radius: 50,\n              width: 100,\n              height: 25\n            },\n            fontStyle: {\n              fontFamily: \"Helvetica,Arial,sans-serif\",\n              fontColor: \"#000000\",\n              fontSize: \"12px\"\n            },\n            options: {\n              drawDisplayName: true,\n              cropLongText: true,\n              addTitleForDisplayName: true,\n              overwritesShapeSize: false,\n              overwriteOffset: 0,\n              fontPositionH: \"center\",\n              fontPositionV: \"center\"\n            }\n          }\n        },\n        options: {\n          drawPropertyNode: true,\n          drawArrowHead: true,\n          drawArrowTail: false,\n          link_renderingType: \"line\" // line or curve\n        }\n      },\n\n      \"rdfs:subClassOf\": {\n        style: {\n          link: {\n            lineStyle: \"dashed\",\n            lineWidth: \"2px\",\n            lineColor: \"#000000\"\n          },\n          arrowHead: {\n            renderingType: \"triangle\",\n            scaleFactor: 1,\n            strokeWidth: \"2px\",\n            strokeStyle: \"solid\",\n            strokeColor: \"#000000\",\n            fillColor: \"#000000\"\n          },\n\n          propertyNode: {\n            style: {\n              renderingType: \"rect\",\n              bgColor: \"#ECF0F1\",\n              roundedCorner: \"0,0\",\n              fontSizeOverWritesShapeSize: \"true\",\n              overWriteOffset: \"5\",\n              strokeElement: \"false\",\n              radius: 50,\n              width: 100,\n              height: 25\n            },\n            fontStyle: {\n              fontFamily: \"Helvetica,Arial,sans-serif\",\n              fontColor: \"#000000\",\n              fontSize: \"12px\"\n            },\n            options: {\n              drawDisplayName: true,\n              cropLongText: true,\n              addTitleForDisplayName: true,\n              overwritesShapeSize: false,\n              overwriteOffset: 0,\n              fontPositionH: \"center\",\n              fontPositionV: \"center\"\n            }\n          }\n        },\n        options: {\n          drawPropertyNode: true,\n          drawArrowHead: true,\n          drawArrowTail: false,\n          link_renderingType: \"line\" // line or curve\n        }\n      },\n\n      \"owl:objectProperty\": {\n        style: {\n          link: {\n            lineStyle: \"solid\",\n            lineWidth: \"2px\",\n            lineColor: \"#000000\"\n          },\n          arrowHead: {\n            renderingType: \"triangle\",\n            scaleFactor: 1,\n            strokeWidth: \"2px\",\n            strokeStyle: \"solid\",\n            strokeColor: \"#000000\",\n            fillColor: \"#000000\"\n          },\n\n          propertyNode: {\n            style: {\n              renderingType: \"rect\",\n              bgColor: \"#aaccff\",\n              roundedCorner: \"0,0\",\n              fontSizeOverWritesShapeSize: \"true\",\n              overWriteOffset: \"5\",\n              strokeElement: \"false\",\n              radius: 50,\n              width: 100,\n              height: 25\n            },\n            fontStyle: {\n              fontFamily: \"Helvetica,Arial,sans-serif\",\n              fontColor: \"#000000\",\n              fontSize: \"12px\"\n            },\n            options: {\n              drawDisplayName: true,\n              cropLongText: true,\n              addTitleForDisplayName: true,\n              overwritesShapeSize: false,\n              overwriteOffset: 0,\n              fontPositionH: \"center\",\n              fontPositionV: \"center\"\n            }\n          }\n        },\n        options: {\n          drawPropertyNode: true,\n          drawArrowHead: true,\n          drawArrowTail: false,\n          link_renderingType: \"curve\" // line or curve\n        }\n      }\n    };\n\n    this.defaultNodeCFG = {\n      style: {\n        renderingType: \"circle\",\n        bgColor: \"#800080\",\n        strokeElement: true,\n        strokeWidth: \"1px\",\n        strokeStyle: \"solid\",\n        strokeColor: \"#000\",\n        radius: 50,\n        width: 100,\n        height: 50\n      },\n      fontStyle: {\n        fontFamily: \"Helvetica,Arial,sans-serif\",\n        fontColor: \"#4d88ad\",\n        fontSize: \"22px\"\n      },\n\n      options: {\n        drawDisplayName: true,\n        drawNestedAttributes: false,\n        cropLongText: true,\n        addTitleForDisplayName: true,\n        overwritesShapeSize: false,\n        overwriteOffset: 0,\n        fontPositionH: \"center\",\n        fontPositionV: \"center\"\n      }\n    };\n\n    this.defaultLinkCFG = {\n      style: {\n        link: {\n          lineStyle: \"dashed\",\n          lineWidth: \"2px\",\n          lineColor: \"#000000\"\n        },\n        arrowHead: {\n          renderingType: \"triangle\",\n          scaleFactor: 1,\n          strokeWidth: \"2px\",\n          strokeStyle: \"solid\",\n          strokeColor: \"#000000\",\n          fillColor: \"#45c3d6\"\n        },\n        arrowTail: {\n          renderingType: \"diamond\",\n          scaleFactor: 2,\n          strokeWidth: \"2px\",\n          strokeStyle: \"solid\",\n          strokeColor: \"#d58d88\",\n          fillColor: \"#d6d5d5\"\n        },\n        propertyNode: {\n          style: {\n            renderingType: \"rect\",\n            bgColor: \"#aaccff\",\n            roundedCorner: \"0,0\",\n            fontSizeOverWritesShapeSize: \"true\",\n            overWriteOffset: \"5\",\n            strokeElement: \"false\",\n            radius: 50,\n            width: 100,\n            height: 25\n          },\n          fontStyle: {\n            fontFamily: \"Helvetica,Arial,sans-serif\",\n            fontColor: \"#000000\",\n            fontSize: \"22px\"\n          },\n          options: {\n            drawDisplayName: true,\n            cropLongText: true,\n            addTitleForDisplayName: true,\n            overwritesShapeSize: false,\n            overwriteOffset: 0,\n            fontPositionH: \"center\",\n            fontPositionV: \"center\"\n          }\n        }\n      },\n      options: {\n        drawPropertyNode: true,\n        drawArrowHead: true,\n        drawArrowTail: false,\n        link_renderingType: \"line\" // line or curve\n      }\n    };\n  }\n  getNodeConfigFromType = type => {\n    if (!this.renderingConfigObject.hasOwnProperty(type)) {\n      console.log(\"NO DEFINITION FOR NODE TYPE:\" + type);\n      return this.defaultNodeCFG;\n    }\n    return this.renderingConfigObject[type];\n  };\n\n  getLinkConfigFromType = type => {\n    if (!this.renderingConfigObject.hasOwnProperty(type)) {\n      console.log(\"NO DEFINITION FOR LINK TYPE:\" + type);\n\n      return this.defaultLinkCFG;\n    }\n    return this.renderingConfigObject[type];\n  };\n}\n","export default class DefaultRenderingHandler {\n  constructor() {\n    this.renderingConfigObject = {\n      nodes: {\n        \"owl:Thing\": {\n          style: {\n            renderingType: \"circle\",\n            bgColor: \"#ffffff\",\n            strokeElement: true,\n            strokeWidth: \"1px\",\n            strokeStyle: \"dashed\",\n            strokeColor: \"#000\",\n            radius: 30,\n            width: 100,\n            height: 50\n          },\n          fontStyle: {\n            fontFamily: \"Helvetica,Arial,sans-serif\",\n            fontColor: \"#000\",\n            fontSize: \"12px\"\n          },\n\n          options: {\n            drawDisplayName: true,\n            drawNestedAttributes: false,\n            cropLongText: false,\n            addTitleForDisplayName: true,\n            overwritesShapeSize: false,\n            overwriteOffset: 0,\n            fontPositionH: \"center\",\n            fontPositionV: \"center\"\n          }\n        },\n\n        \"owl:Class\": {\n          style: {\n            renderingType: \"circle\",\n            bgColor: \"#aaccff\",\n            strokeElement: true,\n            strokeWidth: \"1px\",\n            strokeStyle: \"solid\",\n            strokeColor: \"#000\",\n            radius: 50,\n            width: 100,\n            height: 50\n          },\n          fontStyle: {\n            fontFamily: \"Helvetica,Arial,sans-serif\",\n            fontColor: \"#000\",\n            fontSize: \"12px\"\n          },\n\n          options: {\n            drawDisplayName: true,\n            drawNestedAttributes: false,\n            cropLongText: false,\n            addTitleForDisplayName: true,\n            overwritesShapeSize: false,\n            overwriteOffset: 0,\n            fontPositionH: \"center\",\n            fontPositionV: \"center\"\n          }\n        },\n\n        auxForDataTypeProperties: {\n          style: {\n            renderingType: \"rect\",\n            bgColor: \"#99CC66\",\n            strokeElement: true,\n            strokeWidth: \"1px\",\n            strokeStyle: \"solid\",\n            strokeColor: \"#000\",\n            radius: 50,\n            width: 100,\n            height: 30,\n            roundedCorner: \"20, 20\"\n          },\n          fontStyle: {\n            fontFamily: \"Helvetica,Arial,sans-serif\",\n            fontColor: \"#000\",\n            fontSize: \"12px\"\n          },\n\n          options: {\n            drawDisplayName: true,\n            drawNestedAttributes: false,\n            cropLongText: true,\n            addTitleForDisplayName: true,\n            overwritesShapeSize: false,\n            overwriteOffset: 0,\n            fontPositionH: \"center\",\n            fontPositionV: \"center\"\n          }\n        },\n\n        auxForObjectProperties: {\n          style: {\n            renderingType: \"rect\",\n            bgColor: \"#aaccff\",\n            strokeElement: true,\n            strokeWidth: \"1px\",\n            strokeStyle: \"solid\",\n            strokeColor: \"#000\",\n            radius: 50,\n            width: 100,\n            height: 30,\n            roundedCorner: \"20, 20\"\n          },\n          fontStyle: {\n            fontFamily: \"Helvetica,Arial,sans-serif\",\n            fontColor: \"#000\",\n            fontSize: \"12px\"\n          },\n\n          options: {\n            drawDisplayName: true,\n            drawNestedAttributes: false,\n            cropLongText: true,\n            addTitleForDisplayName: true,\n            overwritesShapeSize: false,\n            overwriteOffset: 0,\n            fontPositionH: \"center\",\n            fontPositionV: \"center\"\n          }\n        },\n\n        \"owl:equivalentClass\": {\n          style: {\n            renderingType: \"circle\",\n            bgColor: \"#aaccff\",\n            strokeElement: true,\n            strokeWidth: \"1px\",\n            strokeStyle: \"dotted\",\n            strokeColor: \"#000\",\n            radius: 50,\n            width: 100,\n            height: 50,\n            doubleStrokes: true\n          },\n          fontStyle: {\n            fontFamily: \"Helvetica,Arial,sans-serif\",\n            fontColor: \"#000\",\n            fontSize: \"12px\"\n          },\n\n          options: {\n            drawDisplayName: true,\n            drawNestedAttributes: false,\n            cropLongText: true,\n            addTitleForDisplayName: true,\n            overwritesShapeSize: false,\n            overwriteOffset: 0,\n            fontPositionH: \"center\",\n            fontPositionV: \"center\"\n          }\n        },\n\n        \"rdfs:Literal\": {\n          style: {\n            renderingType: \"rect\",\n            bgColor: \"#FFCC33\",\n            strokeElement: true,\n            strokeWidth: \"1px\",\n            strokeStyle: \"dashed\",\n            strokeColor: \"#000\",\n            radius: 30,\n            width: 50,\n            height: 20\n          },\n          fontStyle: {\n            fontFamily: \"Helvetica,Arial,sans-serif\",\n            fontColor: \"#000\",\n            fontSize: \"12px\"\n          },\n\n          options: {\n            drawDisplayName: true,\n            drawNestedAttributes: false,\n            cropLongText: false,\n            addTitleForDisplayName: true,\n            overwritesShapeSize: false,\n            overwriteOffset: 0,\n            fontPositionH: \"center\",\n            fontPositionV: \"center\"\n          }\n        }\n      },\n      links: {\n        auxLink: {\n          style: {\n            link: {\n              lineStyle: \"solid\",\n              lineWidth: \"2px\",\n              lineColor: \"#000000\"\n            },\n            arrowHead: {\n              renderingType: \"triangle\",\n              scaleFactor: 1,\n              strokeWidth: \"2px\",\n              strokeStyle: \"solid\",\n              strokeColor: \"#000000\",\n              fillColor: \"#000000\"\n            },\n\n            propertyNode: {\n              style: {\n                renderingType: \"rect\",\n                bgColor: \"#b0b1b1\",\n\n                fontSizeOverWritesShapeSize: \"true\",\n                overWriteOffset: \"5\",\n                strokeElement: true,\n                strokeWidth: \"1px\",\n                strokeStyle: \"dashed\",\n                radius: 50,\n                width: 100,\n                height: 25,\n                roundedCorner: \"10, 10\"\n              },\n              fontStyle: {\n                fontFamily: \"Helvetica,Arial,sans-serif\",\n                fontColor: \"#000000\",\n                fontSize: \"12px\"\n              },\n              options: {\n                drawDisplayName: true,\n                cropLongText: true,\n                addTitleForDisplayName: true,\n                overwritesShapeSize: false,\n                overwriteOffset: 0,\n                fontPositionH: \"center\",\n                fontPositionV: \"center\"\n              }\n            }\n          },\n          options: {\n            drawPropertyNode: true,\n            drawArrowHead: true,\n            drawArrowTail: false,\n            link_renderingType: \"line\" // line or curve\n          }\n        },\n        \"owl:datatypeProperty\": {\n          style: {\n            link: {\n              lineStyle: \"solid\",\n              lineWidth: \"2px\",\n              lineColor: \"#000000\"\n            },\n            arrowHead: {\n              renderingType: \"triangle\",\n              scaleFactor: 1,\n              strokeWidth: \"2px\",\n              strokeStyle: \"solid\",\n              strokeColor: \"#000000\",\n              fillColor: \"#000000\"\n            },\n\n            propertyNode: {\n              style: {\n                renderingType: \"rect\",\n                bgColor: \"#99CC66\",\n                roundedCorner: \"0,0\",\n                fontSizeOverWritesShapeSize: \"true\",\n                overWriteOffset: \"5\",\n                strokeElement: \"false\",\n                radius: 50,\n                width: 100,\n                height: 25\n              },\n              fontStyle: {\n                fontFamily: \"Helvetica,Arial,sans-serif\",\n                fontColor: \"#000000\",\n                fontSize: \"12px\"\n              },\n              options: {\n                drawDisplayName: true,\n                cropLongText: true,\n                addTitleForDisplayName: true,\n                overwritesShapeSize: false,\n                overwriteOffset: 0,\n                fontPositionH: \"center\",\n                fontPositionV: \"center\"\n              }\n            }\n          },\n          options: {\n            drawPropertyNode: true,\n            drawArrowHead: true,\n            drawArrowTail: false,\n            link_renderingType: \"line\" // line or curve\n          }\n        },\n        \"owl:equivalentClass\": {\n          style: {\n            link: {\n              lineStyle: \"dashed\",\n              lineWidth: \"2px\",\n              lineColor: \"#000000\"\n            },\n            arrowHead: {\n              renderingType: \"triangle\",\n              scaleFactor: 1.5,\n              strokeWidth: \"2px\",\n              strokeStyle: \"solid\",\n              strokeColor: \"#000000\",\n              fillColor: \"#ffffff\"\n            },\n\n            propertyNode: {\n              style: {\n                renderingType: \"rect\",\n                bgColor: \"#ECF0F1\",\n                roundedCorner: \"0,0\",\n                fontSizeOverWritesShapeSize: \"true\",\n                overWriteOffset: \"5\",\n                strokeElement: \"false\",\n                radius: 50,\n                width: 100,\n                height: 25\n              },\n              fontStyle: {\n                fontFamily: \"Helvetica,Arial,sans-serif\",\n                fontColor: \"#000000\",\n                fontSize: \"12px\"\n              },\n              options: {\n                drawDisplayName: true,\n                cropLongText: false,\n                addTitleForDisplayName: true,\n                overwritesShapeSize: false,\n                overwriteOffset: 0,\n                fontPositionH: \"center\",\n                fontPositionV: \"center\"\n              }\n            }\n          },\n          options: {\n            drawPropertyNode: true,\n            drawArrowHead: true,\n            drawArrowTail: false,\n            link_renderingType: \"line\" // line or curve\n          }\n        },\n\n        \"rdfs:subClassOf\": {\n          style: {\n            link: {\n              lineStyle: \"dashed\",\n              lineWidth: \"2px\",\n              lineColor: \"#000000\"\n            },\n            arrowHead: {\n              renderingType: \"triangle\",\n              scaleFactor: 1,\n              strokeWidth: \"2px\",\n              strokeStyle: \"solid\",\n              strokeColor: \"#000000\",\n              fillColor: \"#000000\"\n            },\n\n            propertyNode: {\n              style: {\n                renderingType: \"rect\",\n                bgColor: \"#ECF0F1\",\n                roundedCorner: \"0,0\",\n                fontSizeOverWritesShapeSize: \"true\",\n                overWriteOffset: \"5\",\n                strokeElement: \"false\",\n                radius: 50,\n                width: 100,\n                height: 25\n              },\n              fontStyle: {\n                fontFamily: \"Helvetica,Arial,sans-serif\",\n                fontColor: \"#000000\",\n                fontSize: \"12px\"\n              },\n              options: {\n                drawDisplayName: true,\n                cropLongText: true,\n                addTitleForDisplayName: true,\n                overwritesShapeSize: false,\n                overwriteOffset: 0,\n                fontPositionH: \"center\",\n                fontPositionV: \"center\"\n              }\n            }\n          },\n          options: {\n            drawPropertyNode: true,\n            drawArrowHead: true,\n            drawArrowTail: false,\n            link_renderingType: \"line\" // line or curve\n          }\n        },\n\n        \"owl:objectProperty\": {\n          style: {\n            link: {\n              lineStyle: \"solid\",\n              lineWidth: \"2px\",\n              lineColor: \"#000000\"\n            },\n            arrowHead: {\n              renderingType: \"triangle\",\n              scaleFactor: 1,\n              strokeWidth: \"2px\",\n              strokeStyle: \"solid\",\n              strokeColor: \"#000000\",\n              fillColor: \"#000000\"\n            },\n\n            propertyNode: {\n              style: {\n                renderingType: \"rect\",\n                bgColor: \"#aaccff\",\n                roundedCorner: \"0,0\",\n                fontSizeOverWritesShapeSize: \"true\",\n                overWriteOffset: \"5\",\n                strokeElement: \"false\",\n                radius: 50,\n                width: 100,\n                height: 25\n              },\n              fontStyle: {\n                fontFamily: \"Helvetica,Arial,sans-serif\",\n                fontColor: \"#000000\",\n                fontSize: \"12px\"\n              },\n              options: {\n                drawDisplayName: true,\n                cropLongText: true,\n                addTitleForDisplayName: true,\n                overwritesShapeSize: false,\n                overwriteOffset: 0,\n                fontPositionH: \"center\",\n                fontPositionV: \"center\"\n              }\n            }\n          },\n          options: {\n            drawPropertyNode: true,\n            drawArrowHead: true,\n            drawArrowTail: false,\n            link_renderingType: \"curve\" // line or curve\n          }\n        }\n      }\n    };\n\n    this.defaultNodeCFG = {\n      style: {\n        renderingType: \"circle\",\n        bgColor: \"#800080\",\n        strokeElement: true,\n        strokeWidth: \"1px\",\n        strokeStyle: \"solid\",\n        strokeColor: \"#000\",\n        radius: 50,\n        width: 100,\n        height: 50\n      },\n      fontStyle: {\n        fontFamily: \"Helvetica,Arial,sans-serif\",\n        fontColor: \"#4d88ad\",\n        fontSize: \"22px\"\n      },\n\n      options: {\n        drawDisplayName: true,\n        drawNestedAttributes: false,\n        cropLongText: true,\n        addTitleForDisplayName: true,\n        overwritesShapeSize: false,\n        overwriteOffset: 0,\n        fontPositionH: \"center\",\n        fontPositionV: \"center\"\n      }\n    };\n\n    this.defaultLinkCFG = {\n      style: {\n        link: {\n          lineStyle: \"dashed\",\n          lineWidth: \"2px\",\n          lineColor: \"#000000\"\n        },\n        arrowHead: {\n          renderingType: \"triangle\",\n          scaleFactor: 1,\n          strokeWidth: \"2px\",\n          strokeStyle: \"solid\",\n          strokeColor: \"#000000\",\n          fillColor: \"#45c3d6\"\n        },\n        arrowTail: {\n          renderingType: \"diamond\",\n          scaleFactor: 2,\n          strokeWidth: \"2px\",\n          strokeStyle: \"solid\",\n          strokeColor: \"#d58d88\",\n          fillColor: \"#d6d5d5\"\n        },\n        propertyNode: {\n          style: {\n            renderingType: \"rect\",\n            bgColor: \"#aaccff\",\n            roundedCorner: \"0,0\",\n            fontSizeOverWritesShapeSize: \"true\",\n            overWriteOffset: \"5\",\n            strokeElement: \"false\",\n            radius: 50,\n            width: 100,\n            height: 25\n          },\n          fontStyle: {\n            fontFamily: \"Helvetica,Arial,sans-serif\",\n            fontColor: \"#000000\",\n            fontSize: \"22px\"\n          },\n          options: {\n            drawDisplayName: true,\n            cropLongText: true,\n            addTitleForDisplayName: true,\n            overwritesShapeSize: false,\n            overwriteOffset: 0,\n            fontPositionH: \"center\",\n            fontPositionV: \"center\"\n          }\n        }\n      },\n      options: {\n        drawPropertyNode: true,\n        drawArrowHead: true,\n        drawArrowTail: false,\n        link_renderingType: \"line\" // line or curve\n      }\n    };\n  }\n  getNodeConfigFromType = type => {\n    if (!this.renderingConfigObject.nodes.hasOwnProperty(type)) {\n      console.log(\"NO DEFINITION FOR NODE TYPE:\" + type);\n      return this.defaultNodeCFG;\n    }\n    return this.renderingConfigObject.nodes[type];\n  };\n\n  getLinkConfigFromType = type => {\n    if (!this.renderingConfigObject.links.hasOwnProperty(type)) {\n      console.log(\"NO DEFINITION FOR LINK TYPE:\" + type);\n\n      return this.defaultLinkCFG;\n    }\n    return this.renderingConfigObject.links[type];\n  };\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\n// load some Images;\nimport VOWL_PipelineCode from \"./Code_VowlPipe.png\";\nimport SPARQL_PipelineCode from \"./Code_SPARQLPipeline.png\";\nimport RDF_PipelineCode from \"./Code_RDFStyledPipeline.png\";\nimport Schematic_Overview from \"./NodeLinkPipeline.png\";\n\n// loading static data as json objects >> Simulating data access (HERE for ISWC 2020 Submission)\nimport * as inputSPARQLDataAsJSON from \"./inputSPARQL.json\";\nimport * as inputVOWLDataAsJSON from \"./inputVOWL.json\";\n\n// loading the two different parser components\nimport SparqlParser from \"./Implementation/Parsers/SparqlParser\";\nimport VOWL_Parser from \"./Implementation/Parsers/VOWLParser\";\n\n// loading two vertex mappers (one for vowl and one for sparql data)\nimport VOWL_VertexEdgeMapper from \"./Implementation/Mappers/VOWL-VertexEdgeMapper\";\nimport Sparql_VertexEdgeMapper from \"./Implementation/Mappers/SPARQL-VertexEdgeMapper\";\n\n// loading three node link mappers\nimport VOWL_NodeLinkMapper from \"./Implementation/Mappers/VOWL-NodeLinkMapper\";\nimport RDF_NodeLinkMapper from \"./Implementation/Mappers/RDF-NodeLinkMapper\";\nimport SPARQL_NodeLinkMapper from \"./Implementation/Mappers/SPARQL-NodeLinkMapper\";\n\nimport VOWLRenderer from \"./Implementation/Renderes/gizmoRenderer/vowlGraph\";\nimport SPARQLRenderingHandler from \"./Implementation/Renderes/gizmoRenderer/renderingConfigs/SPARQLRenderingHandler\";\nimport VOWLRenderingHandler from \"./Implementation/Renderes/gizmoRenderer/renderingConfigs/VOWLRenderingHandler\";\nimport RDFStyledRenderingHandler from \"./Implementation/Renderes/gizmoRenderer/renderingConfigs/RDFStyledRenderingHandler\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      canRenderVisualization: false\n    };\n  }\n\n  componentDidMount() {\n    this.VOWL_Pipeline().then(() => {\n      this.RDFStyled_Pipeline().then(() => {\n        this.SPARQL_Pipeline().then();\n      });\n    });\n  }\n\n  // ********************************************************************************************************************\n  SPARQL_Pipeline = async () => {\n    // Component instantiation\n    const parser = new SparqlParser();\n    const mapper_1 = new Sparql_VertexEdgeMapper();\n    const mapper_2 = new SPARQL_NodeLinkMapper();\n    const renderingModule = new VOWLRenderer();\n\n    const nestedVisualizationConfig = new SPARQLRenderingHandler();\n\n    // tell the renderer to use a specific rendering handler;\n    renderingModule.setRenderingConfig(nestedVisualizationConfig);\n    // execute the pipeline\n    /** ------------ Data Access 'module' -------------------------**/\n    // NOTE: This examples do not employ the data access handler\n    // Input data is pre-fetched to make it possible to release these examples on GitHub (as GitHub pages)\n    parser.setInputData(inputSPARQLDataAsJSON.default); // << HERE WE SET THE RESULT AS JSON\n    await parser.execute();\n\n    /** ------------ Mapper 'module' -------------------------**/\n    mapper_1.setInputData(parser.getResult());\n    await mapper_1.execute();\n\n    mapper_2.setInputData(mapper_1.getResult());\n    await mapper_2.execute();\n\n    /** ------------ Rendering  'module' -------------------------**/\n    renderingModule.setRenderingContainer(\"GraphRenderingDiv3\"); // set div for rendering\n    renderingModule.setModel(mapper_2.getResult().resultingModel.getResult()); // set node-link model\n    // do the rendering magic\n    renderingModule.initializeRenderingContainer();\n    renderingModule.createRenderingElements();\n    renderingModule.drawRenderingPrimitives();\n  };\n\n  // ********************************************************************************************************************\n  VOWL_Pipeline = async () => {\n    // Component instantiation\n    const parser = new VOWL_Parser();\n    const mapper_1 = new VOWL_VertexEdgeMapper();\n    const mapper_2 = new VOWL_NodeLinkMapper();\n    const renderingModule = new VOWLRenderer();\n    const nativeVOWLRenderingConfig = new VOWLRenderingHandler();\n\n    // tell the renderer to use a specific rendering handler;\n    renderingModule.setRenderingConfig(nativeVOWLRenderingConfig);\n\n    // NOTE: This examples do not employ the data access handler\n    // Input data is pre-fetched to make it possible to release these examples on GitHub (as GitHub pages)\n    /** ------------ Data Access Module-----------------------**/\n    const deepCopy = JSON.parse(JSON.stringify(inputVOWLDataAsJSON.default));\n    parser.setInputData(deepCopy); // << HERE WE SET THE RESULT AS JSON\n\n    await parser.execute();\n\n    /** ------------ Mapper Module  -------------------------**/\n    mapper_1.setInputData(parser.getResult());\n    await mapper_1.execute();\n\n    mapper_2.setInputData(mapper_1.getResult());\n    await mapper_2.execute();\n\n    /** ------------ Rendering Module -----------------------**/\n    renderingModule.setRenderingContainer(\"GraphRenderingDiv\"); // set div for rendering\n    renderingModule.setModel(mapper_2.getResult().resultingModel.getResult()); // set node-link model\n    // do the rendering magic\n    renderingModule.initializeRenderingContainer();\n    renderingModule.createRenderingElements();\n    renderingModule.drawRenderingPrimitives();\n  };\n\n  // ********************************************************************************************************************\n  RDFStyled_Pipeline = async () => {\n    // Component instantiation\n    const parser = new VOWL_Parser(); // using the same vowlParser\n    const mapper_1 = new VOWL_VertexEdgeMapper(); // using the vowl vertexEdge mapper\n    const mapper_2 = new RDF_NodeLinkMapper(); // using RDF-Styled Mapper\n    const renderingModule = new VOWLRenderer();\n\n    const AuxiliariesNodeRenderingConfig = new RDFStyledRenderingHandler();\n\n    // tell the renderer to use a specific rendering handler;\n    renderingModule.setRenderingConfig(AuxiliariesNodeRenderingConfig);\n\n    // NOTE: This examples do not employ the data access handler\n    // Input data is pre-fetched to make it possible to release these examples on GitHub (as GitHub pages)\n    /** ------------ Data Access 'module' -------------------------**/\n    const deepCopy = JSON.parse(JSON.stringify(inputVOWLDataAsJSON.default));\n    parser.setInputData(deepCopy); // << HERE WE SET THE RESULT AS JSON\n    await parser.execute();\n\n    /** ------------ Mapper 'module' -------------------------**/\n    mapper_1.setInputData(parser.getResult());\n    await mapper_1.execute();\n\n    mapper_2.setInputData(mapper_1.getResult());\n    await mapper_2.execute();\n\n    /** ------------ Rendering  'module' -------------------------**/\n    renderingModule.setRenderingContainer(\"GraphRenderingDiv2\"); // set div for rendering\n    renderingModule.setModel(mapper_2.getResult().resultingModel.getResult()); // set node-link model\n    // do the rendering magic\n    renderingModule.initializeRenderingContainer();\n    renderingModule.createRenderingElements();\n    renderingModule.drawRenderingPrimitives();\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Schematic overview\n        <body className=\"App-header\">\n        <div>\n          <img src={Schematic_Overview} width=\"80%\" alt=\"logo\" />\n        </div>\n        </body>\n        </header>\n        <header className=\"App-header\">\n          Example 1) VOWL Visualization Pipeline\n          <div\n            id=\"GraphRenderingDiv\"\n            style={{\n              width: \"80%\",\n              height: \"400px\",\n              backgroundColor: \"#ccc\",\n              margin: \"20px\",\n              paddingTop: \"0\"\n            }}\n          />\n        </header>\n        <body className=\"App-header\">\n          <div>\n            <img src={VOWL_PipelineCode} width=\"100%\" alt=\"logo\" />\n          </div>\n        </body>\n        <header className=\"App-header\">\n          Example 2) Modified VOWL Visualization Pipeline (adding auxiliary\n          nodes)\n          <div\n            id=\"GraphRenderingDiv2\"\n            style={{\n              width: \"80%\",\n              height: \"400px\",\n              backgroundColor: \"#ccc\",\n              margin: \"20px\",\n              paddingTop: \"0\"\n            }}\n          />\n        </header>\n        <body className=\"App-header\">\n          <div>\n            <img src={RDF_PipelineCode} width=\"100%\" alt=\"logo\" />\n          </div>\n        </body>\n        <header className=\"App-header\">\n          Example 3) SPARQL Query Visualization (Nested UML-style)\n          <div\n            id=\"GraphRenderingDiv3\"\n            style={{\n              width: \"80%\",\n              height: \"400px\",\n              backgroundColor: \"#ccc\",\n              margin: \"20px\",\n              paddingTop: \"0\"\n            }}\n          />\n        </header>\n        <body className=\"App-header\">\n          <div>\n            <img src={SPARQL_PipelineCode} width=\"100%\" alt=\"logo\" />\n          </div>\n        </body>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}